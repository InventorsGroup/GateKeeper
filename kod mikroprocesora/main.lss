
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000108a  0000111e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080013e  0080013e  0000115c  2**0
                  ALLOC
  3 .debug_aranges 000004b0  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cf5  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008141  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021ae  00000000  00000000  0000a442  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000617f  00000000  00000000  0000c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000720  00000000  00000000  00012770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000338a  00000000  00000000  00012e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000342b  00000000  00000000  0001621a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005e8  00000000  00000000  00019645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	while (*s) 
		USARTWriteChar(*s++);
}

unsigned char USARTReadChar( void ) 
{
       0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       2:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e7 c3       	rjmp	.+1998   	; 0x7fc <__vector_11>
      2e:	00 00       	nop
      30:	aa c3       	rjmp	.+1876   	; 0x786 <__vector_12>
      32:	00 00       	nop
      34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
      36:	00 00       	nop
      38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	75 c0       	rjmp	.+234    	; 0x138 <__vector_19>
      4e:	00 00       	nop
      50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
      52:	00 00       	nop
      54:	70 c0       	rjmp	.+224    	; 0x136 <__bad_interrupt>
      56:	00 00       	nop
      58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d9 c0       	rjmp	.+434    	; 0x210 <__vector_23>
      5e:	00 00       	nop
      60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      84:	dc 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      96:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      b6:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <ProductString>:
      e2:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      f2:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000100 <__ctors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	d2 e0       	ldi	r29, 0x02	; 2
     108:	de bf       	out	0x3e, r29	; 62
     10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
     10c:	11 e0       	ldi	r17, 0x01	; 1
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	ea e8       	ldi	r30, 0x8A	; 138
     114:	f0 e1       	ldi	r31, 0x10	; 16
     116:	02 c0       	rjmp	.+4      	; 0x11c <.do_copy_data_start>

00000118 <.do_copy_data_loop>:
     118:	05 90       	lpm	r0, Z+
     11a:	0d 92       	st	X+, r0

0000011c <.do_copy_data_start>:
     11c:	ae 33       	cpi	r26, 0x3E	; 62
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <.do_copy_data_loop>

00000122 <__do_clear_bss>:
     122:	11 e0       	ldi	r17, 0x01	; 1
     124:	ae e3       	ldi	r26, 0x3E	; 62
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a9 35       	cpi	r26, 0x59	; 89
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	df d0       	rcall	.+446    	; 0x2f2 <main>
     134:	a8 c7       	rjmp	.+3920   	; 0x1086 <_exit>

00000136 <__bad_interrupt>:
     136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <__vector_19>:
#include "main.h"


ISR(TIMER0_COMPA_vect)
{
     138:	1f 92       	push	r1
     13a:	0f 92       	push	r0
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	0f 92       	push	r0
     140:	11 24       	eor	r1, r1
     142:	8f 93       	push	r24
     144:	9f 93       	push	r25
	PORTB ^= (1 << PB6);
     146:	85 b1       	in	r24, 0x05	; 5
     148:	90 e4       	ldi	r25, 0x40	; 64
     14a:	89 27       	eor	r24, r25
     14c:	85 b9       	out	0x05, r24	; 5
}
     14e:	9f 91       	pop	r25
     150:	8f 91       	pop	r24
     152:	0f 90       	pop	r0
     154:	0f be       	out	0x3f, r0	; 63
     156:	0f 90       	pop	r0
     158:	1f 90       	pop	r1
     15a:	18 95       	reti

0000015c <USARTWriteChar>:
	};

static FILE USBSerialStream;

void USARTWriteChar(unsigned char data)
{
     15c:	98 2f       	mov	r25, r24
   while(!(UCSR1A & (1<<UDRE1)));
     15e:	80 91 c8 00 	lds	r24, 0x00C8
     162:	85 ff       	sbrs	r24, 5
     164:	fc cf       	rjmp	.-8      	; 0x15e <USARTWriteChar+0x2>
   UDR1=data;
     166:	90 93 ce 00 	sts	0x00CE, r25
}
     16a:	08 95       	ret

0000016c <uart_puts>:

void uart_puts(const char *s )
{
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
     172:	02 c0       	rjmp	.+4      	; 0x178 <uart_puts+0xc>
	while (*s) 
		USARTWriteChar(*s++);
     174:	21 96       	adiw	r28, 0x01	; 1
     176:	f2 df       	rcall	.-28     	; 0x15c <USARTWriteChar>
   UDR1=data;
}

void uart_puts(const char *s )
{
	while (*s) 
     178:	88 81       	ld	r24, Y
     17a:	88 23       	and	r24, r24
     17c:	d9 f7       	brne	.-10     	; 0x174 <uart_puts+0x8>
		USARTWriteChar(*s++);
}
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <USARTInit>:
}

void USARTInit(unsigned int ubrr_value)
{
   
   UCSR1A |= (1 << U2X1);
     184:	e8 ec       	ldi	r30, 0xC8	; 200
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	20 81       	ld	r18, Z
     18a:	22 60       	ori	r18, 0x02	; 2
     18c:	20 83       	st	Z, r18
   UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
     18e:	e9 ec       	ldi	r30, 0xC9	; 201
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	20 81       	ld	r18, Z
     194:	28 69       	ori	r18, 0x98	; 152
     196:	20 83       	st	Z, r18
   UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     198:	ea ec       	ldi	r30, 0xCA	; 202
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	20 81       	ld	r18, Z
     19e:	26 60       	ori	r18, 0x06	; 6
     1a0:	20 83       	st	Z, r18
   UBRR1 = ubrr_value;
     1a2:	90 93 cd 00 	sts	0x00CD, r25
     1a6:	80 93 cc 00 	sts	0x00CC, r24
   DDRD |= (1 << PD3);
     1aa:	53 9a       	sbi	0x0a, 3	; 10
}
     1ac:	08 95       	ret

000001ae <EVENT_USB_Device_Connect>:
}

void EVENT_USB_Device_Connect(void)
{

}
     1ae:	08 95       	ret

000001b0 <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{

}
     1b0:	08 95       	ret

000001b2 <EVENT_USB_Device_ControlRequest>:
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
}

void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     1b2:	82 e2       	ldi	r24, 0x22	; 34
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	34 c6       	rjmp	.+3176   	; 0xe20 <CDC_Device_ProcessControlRequest>

000001b8 <EVENT_USB_Device_ConfigurationChanged>:

void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     1b8:	82 e2       	ldi	r24, 0x22	; 34
     1ba:	91 e0       	ldi	r25, 0x01	; 1
}
     1bc:	0a c6       	rjmp	.+3092   	; 0xdd2 <CDC_Device_ConfigureEndpoints>

000001be <SetupHardware>:
   DDRD |= (1 << PD3);
}

void SetupHardware(void)
{
	MCUSR &= ~(1 << WDRF);
     1be:	84 b7       	in	r24, 0x34	; 52
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	80 93 60 00 	sts	0x0060, r24
     1ce:	10 92 60 00 	sts	0x0060, r1
     1d2:	0f be       	out	0x3f, r0	; 63
	
	
	DDRB = (1 << PB5) | (1 << PB6) | (1 << PB4);	
     1d4:	80 e7       	ldi	r24, 0x70	; 112
     1d6:	84 b9       	out	0x04, r24	; 4
	
	clock_prescale_set(0);
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	20 e8       	ldi	r18, 0x80	; 128
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	20 93 61 00 	sts	0x0061, r18
     1e6:	80 93 61 00 	sts	0x0061, r24
     1ea:	0f be       	out	0x3f, r0	; 63

	USB_Init();
     1ec:	bd d2       	rcall	.+1402   	; 0x768 <USB_Init>
	
	USARTInit(51);
     1ee:	83 e3       	ldi	r24, 0x33	; 51
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	c8 df       	rcall	.-112    	; 0x184 <USARTInit>
	
	TCCR0A |= (1 << WGM01);
     1f4:	84 b5       	in	r24, 0x24	; 36
     1f6:	82 60       	ori	r24, 0x02	; 2
     1f8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02);
     1fa:	85 b5       	in	r24, 0x25	; 37
     1fc:	85 60       	ori	r24, 0x05	; 5
     1fe:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
     200:	ee e6       	ldi	r30, 0x6E	; 110
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	82 60       	ori	r24, 0x02	; 2
     208:	80 83       	st	Z, r24
	OCR0A = 255;
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	87 bd       	out	0x27, r24	; 39
}
     20e:	08 95       	ret

00000210 <__vector_23>:
	while ( !(UCSR1A & (1<<RXC1)) );
	return UDR1;
}

SIGNAL(USART1_RX_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	2f 93       	push	r18
     21c:	3f 93       	push	r19
     21e:	4f 93       	push	r20
     220:	5f 93       	push	r21
     222:	6f 93       	push	r22
     224:	7f 93       	push	r23
     226:	8f 93       	push	r24
     228:	9f 93       	push	r25
     22a:	af 93       	push	r26
     22c:	bf 93       	push	r27
     22e:	ef 93       	push	r30
     230:	ff 93       	push	r31
     232:	df 93       	push	r29
     234:	cf 93       	push	r28
     236:	00 d0       	rcall	.+0      	; 0x238 <__vector_23+0x28>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	int16_t c = UDR1;
     23c:	80 91 ce 00 	lds	r24, 0x00CE
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	1a 82       	std	Y+2, r1	; 0x02
	fputs(&c, &USBSerialStream);
     244:	ce 01       	movw	r24, r28
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	6e e3       	ldi	r22, 0x3E	; 62
     24a:	71 e0       	ldi	r23, 0x01	; 1
     24c:	b5 d6       	rcall	.+3434   	; 0xfb8 <fputs>
}
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	ff 91       	pop	r31
     258:	ef 91       	pop	r30
     25a:	bf 91       	pop	r27
     25c:	af 91       	pop	r26
     25e:	9f 91       	pop	r25
     260:	8f 91       	pop	r24
     262:	7f 91       	pop	r23
     264:	6f 91       	pop	r22
     266:	5f 91       	pop	r21
     268:	4f 91       	pop	r20
     26a:	3f 91       	pop	r19
     26c:	2f 91       	pop	r18
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <pb_clear>:

void pb_clear()
{
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	00 d0       	rcall	.+0      	; 0x28a <pb_clear+0x12>
     28a:	00 d0       	rcall	.+0      	; 0x28c <pb_clear+0x14>
     28c:	0f 92       	push	r0
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	01 e0       	ldi	r16, 0x01	; 1
     294:	10 e0       	ldi	r17, 0x00	; 0
	char buffer[5];
	for (int i =1; i < 11; i++)
	{
		uart_puts("AT+CPBW=");
		itoa(i, buffer, 10);
     296:	7e 01       	movw	r14, r28
     298:	08 94       	sec
     29a:	e1 1c       	adc	r14, r1
     29c:	f1 1c       	adc	r15, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	88 ec       	ldi	r24, 0xC8	; 200
     2a0:	c8 2e       	mov	r12, r24
     2a2:	d1 2c       	mov	r13, r1
void pb_clear()
{
	char buffer[5];
	for (int i =1; i < 11; i++)
	{
		uart_puts("AT+CPBW=");
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	61 df       	rcall	.-318    	; 0x16c <uart_puts>
		itoa(i, buffer, 10);
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	4a e0       	ldi	r20, 0x0A	; 10
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	63 d6       	rcall	.+3270   	; 0xf7a <itoa>
		uart_puts(buffer);
     2b4:	c7 01       	movw	r24, r14
     2b6:	5a df       	rcall	.-332    	; 0x16c <uart_puts>
		uart_puts("\r");
     2b8:	89 e0       	ldi	r24, 0x09	; 9
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	57 df       	rcall	.-338    	; 0x16c <uart_puts>
     2be:	88 ee       	ldi	r24, 0xE8	; 232
     2c0:	93 e0       	ldi	r25, 0x03	; 3
     2c2:	f6 01       	movw	r30, r12
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <pb_clear+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ca:	d9 f7       	brne	.-10     	; 0x2c2 <pb_clear+0x4a>
}

void pb_clear()
{
	char buffer[5];
	for (int i =1; i < 11; i++)
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	1f 4f       	sbci	r17, 0xFF	; 255
     2d0:	0b 30       	cpi	r16, 0x0B	; 11
     2d2:	11 05       	cpc	r17, r1
     2d4:	39 f7       	brne	.-50     	; 0x2a4 <pb_clear+0x2c>
		itoa(i, buffer, 10);
		uart_puts(buffer);
		uart_puts("\r");
		_delay_ms(100);
	}
}
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	cf 91       	pop	r28
     2e2:	df 91       	pop	r29
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	08 95       	ret

000002f2 <main>:

int main(void)
{
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <main+0xa>
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
	int16_t b;
	
	SetupHardware();
     300:	5e df       	rcall	.-324    	; 0x1be <SetupHardware>
    
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     302:	82 e2       	ldi	r24, 0x22	; 34
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	6e e3       	ldi	r22, 0x3E	; 62
     308:	71 e0       	ldi	r23, 0x01	; 1
     30a:	ca d4       	rcall	.+2452   	; 0xca0 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     30c:	78 94       	sei

	
	GlobalInterruptEnable();
	b = "GateKeeper init: OK \n\r";
     30e:	8b e0       	ldi	r24, 0x0B	; 11
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	9a 83       	std	Y+2, r25	; 0x02
     314:	89 83       	std	Y+1, r24	; 0x01
	fputs(&b, &USBSerialStream);
     316:	8e 01       	movw	r16, r28
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	c8 01       	movw	r24, r16
     31e:	6e e3       	ldi	r22, 0x3E	; 62
     320:	71 e0       	ldi	r23, 0x01	; 1
     322:	4a d6       	rcall	.+3220   	; 0xfb8 <fputs>
     324:	80 e1       	ldi	r24, 0x10	; 16
     326:	97 e2       	ldi	r25, 0x27	; 39
     328:	28 ec       	ldi	r18, 0xC8	; 200
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	31 97       	sbiw	r30, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <__stack+0x2f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     332:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     334:	d9 f7       	brne	.-10     	; 0x32c <__stack+0x2d>
	
	_delay_ms(1000);
	PORTB |= (1 << PB4);
     336:	2c 9a       	sbi	0x05, 4	; 5
     338:	88 e9       	ldi	r24, 0x98	; 152
     33a:	9a e3       	ldi	r25, 0x3A	; 58
     33c:	28 ec       	ldi	r18, 0xC8	; 200
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	f9 01       	movw	r30, r18
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <__stack+0x43>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     346:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     348:	d9 f7       	brne	.-10     	; 0x340 <__stack+0x41>
	_delay_ms(1500);
	PORTB &= ~(1 << PB4);
     34a:	2c 98       	cbi	0x05, 4	; 5
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	95 e7       	ldi	r25, 0x75	; 117
     350:	28 ec       	ldi	r18, 0xC8	; 200
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <__stack+0x57>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     35a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35c:	d9 f7       	brne	.-10     	; 0x354 <__stack+0x55>
	_delay_ms(3000);
	
	PORTB |= (1 << PB5);
     35e:	2d 9a       	sbi	0x05, 5	; 5
	

	for (;;)
	{
		b = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     360:	82 e2       	ldi	r24, 0x22	; 34
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	6f d4       	rcall	.+2270   	; 0xc44 <CDC_Device_ReceiveByte>
     366:	9a 83       	std	Y+2, r25	; 0x02
     368:	89 83       	std	Y+1, r24	; 0x01
		
		if(b > -1)
     36a:	97 fd       	sbrc	r25, 7
     36c:	0c c0       	rjmp	.+24     	; 0x386 <__stack+0x87>
		{
			fputs(&b, &USBSerialStream);
     36e:	c8 01       	movw	r24, r16
     370:	6e e3       	ldi	r22, 0x3E	; 62
     372:	71 e0       	ldi	r23, 0x01	; 1
     374:	21 d6       	rcall	.+3138   	; 0xfb8 <fputs>
			USARTWriteChar(b);	
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	f1 de       	rcall	.-542    	; 0x15c <USARTWriteChar>
			if (b == 'c') pb_clear();; 			
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	83 36       	cpi	r24, 0x63	; 99
     380:	91 05       	cpc	r25, r1
     382:	09 f4       	brne	.+2      	; 0x386 <__stack+0x87>
     384:	79 df       	rcall	.-270    	; 0x278 <pb_clear>
		}
		
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     386:	82 e2       	ldi	r24, 0x22	; 34
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	d6 d4       	rcall	.+2476   	; 0xd38 <CDC_Device_USBTask>
		USB_USBTask();
     38c:	46 d4       	rcall	.+2188   	; 0xc1a <USB_USBTask>
     38e:	e8 cf       	rjmp	.-48     	; 0x360 <__stack+0x61>

00000390 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     390:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     392:	92 30       	cpi	r25, 0x02	; 2
     394:	49 f0       	breq	.+18     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x18>
     396:	93 30       	cpi	r25, 0x03	; 3
     398:	61 f0       	breq	.+24     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x22>
     39a:	91 30       	cpi	r25, 0x01	; 1
     39c:	f9 f4       	brne	.+62     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x4c>
     39e:	e4 e7       	ldi	r30, 0x74	; 116
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	22 e1       	ldi	r18, 0x12	; 18
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	1e c0       	rjmp	.+60     	; 0x3e4 <CALLBACK_USB_GetDescriptor+0x54>
     3a8:	e6 e8       	ldi	r30, 0x86	; 134
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	2e e3       	ldi	r18, 0x3E	; 62
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	19 c0       	rjmp	.+50     	; 0x3e4 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	49 f0       	breq	.+18     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x38>
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	18 f0       	brcs	.+6      	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x30>
     3ba:	82 30       	cpi	r24, 0x02	; 2
     3bc:	79 f4       	brne	.+30     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x4c>
     3be:	08 c0       	rjmp	.+16     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3c0:	e4 ec       	ldi	r30, 0xC4	; 196
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	84 91       	lpm	r24, Z+
     3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3c8:	e8 ec       	ldi	r30, 0xC8	; 200
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	84 91       	lpm	r24, Z+
     3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3d0:	e2 ee       	ldi	r30, 0xE2	; 226
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	84 91       	lpm	r24, Z+
     3d6:	28 2f       	mov	r18, r24
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <CALLBACK_USB_GetDescriptor+0x54>
     3dc:	e0 e0       	ldi	r30, 0x00	; 0
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3e4:	ed 93       	st	X+, r30
     3e6:	fc 93       	st	X, r31
	return Size;
}
     3e8:	c9 01       	movw	r24, r18
     3ea:	08 95       	ret

000003ec <Endpoint_Write_Control_Stream_LE>:
     3ec:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3ee:	40 91 57 01 	lds	r20, 0x0157
     3f2:	50 91 58 01 	lds	r21, 0x0158
     3f6:	46 17       	cp	r20, r22
     3f8:	57 07       	cpc	r21, r23
     3fa:	18 f4       	brcc	.+6      	; 0x402 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     3fc:	f9 01       	movw	r30, r18
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	3d c0       	rjmp	.+122    	; 0x47c <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     402:	61 15       	cp	r22, r1
     404:	71 05       	cpc	r23, r1
     406:	11 f0       	breq	.+4      	; 0x40c <Endpoint_Write_Control_Stream_LE+0x20>
     408:	ab 01       	movw	r20, r22
     40a:	f8 cf       	rjmp	.-16     	; 0x3fc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     40c:	80 91 e8 00 	lds	r24, 0x00E8
     410:	8e 77       	andi	r24, 0x7E	; 126
     412:	80 93 e8 00 	sts	0x00E8, r24
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	f0 cf       	rjmp	.-32     	; 0x3fc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     41c:	80 91 50 01 	lds	r24, 0x0150

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     420:	88 23       	and	r24, r24
     422:	f1 f1       	breq	.+124    	; 0x4a0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     424:	85 30       	cpi	r24, 0x05	; 5
     426:	f1 f1       	breq	.+124    	; 0x4a4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     428:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     42c:	83 ff       	sbrs	r24, 3
     42e:	02 c0       	rjmp	.+4      	; 0x434 <Endpoint_Write_Control_Stream_LE+0x48>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     434:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     438:	82 fd       	sbrc	r24, 2
     43a:	2c c0       	rjmp	.+88     	; 0x494 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     43c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     440:	80 ff       	sbrs	r24, 0
     442:	1c c0       	rjmp	.+56     	; 0x47c <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     444:	80 91 f2 00 	lds	r24, 0x00F2
     448:	28 2f       	mov	r18, r24
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	07 c0       	rjmp	.+14     	; 0x45c <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     44e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     450:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     454:	41 50       	subi	r20, 0x01	; 1
     456:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     458:	2f 5f       	subi	r18, 0xFF	; 255
     45a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     45c:	41 15       	cp	r20, r1
     45e:	51 05       	cpc	r21, r1
     460:	19 f0       	breq	.+6      	; 0x468 <Endpoint_Write_Control_Stream_LE+0x7c>
     462:	28 30       	cpi	r18, 0x08	; 8
     464:	31 05       	cpc	r19, r1
     466:	98 f3       	brcs	.-26     	; 0x44e <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	28 30       	cpi	r18, 0x08	; 8
     46c:	31 05       	cpc	r19, r1
     46e:	09 f4       	brne	.+2      	; 0x472 <Endpoint_Write_Control_Stream_LE+0x86>
     470:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     472:	80 91 e8 00 	lds	r24, 0x00E8
     476:	8e 77       	andi	r24, 0x7E	; 126
     478:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     47c:	41 15       	cp	r20, r1
     47e:	51 05       	cpc	r21, r1
     480:	69 f6       	brne	.-102    	; 0x41c <Endpoint_Write_Control_Stream_LE+0x30>
     482:	99 23       	and	r25, r25
     484:	59 f6       	brne	.-106    	; 0x41c <Endpoint_Write_Control_Stream_LE+0x30>
     486:	06 c0       	rjmp	.+12     	; 0x494 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     488:	80 91 50 01 	lds	r24, 0x0150

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     48c:	88 23       	and	r24, r24
     48e:	41 f0       	breq	.+16     	; 0x4a0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     490:	85 30       	cpi	r24, 0x05	; 5
     492:	41 f0       	breq	.+16     	; 0x4a4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     494:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     498:	82 ff       	sbrs	r24, 2
     49a:	f6 cf       	rjmp	.-20     	; 0x488 <Endpoint_Write_Control_Stream_LE+0x9c>
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	08 95       	ret
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	08 95       	ret
     4a4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4a6:	08 95       	ret

000004a8 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     4a8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     4aa:	40 91 57 01 	lds	r20, 0x0157
     4ae:	50 91 58 01 	lds	r21, 0x0158
     4b2:	46 17       	cp	r20, r22
     4b4:	57 07       	cpc	r21, r23
     4b6:	18 f4       	brcc	.+6      	; 0x4be <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     4b8:	f9 01       	movw	r30, r18
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	40 c0       	rjmp	.+128    	; 0x53e <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4be:	61 15       	cp	r22, r1
     4c0:	71 05       	cpc	r23, r1
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <Endpoint_Write_Control_PStream_LE+0x20>
     4c4:	ab 01       	movw	r20, r22
     4c6:	f8 cf       	rjmp	.-16     	; 0x4b8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4c8:	80 91 e8 00 	lds	r24, 0x00E8
     4cc:	8e 77       	andi	r24, 0x7E	; 126
     4ce:	80 93 e8 00 	sts	0x00E8, r24
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	f0 cf       	rjmp	.-32     	; 0x4b8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4d8:	80 91 50 01 	lds	r24, 0x0150

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4dc:	88 23       	and	r24, r24
     4de:	09 f4       	brne	.+2      	; 0x4e2 <Endpoint_Write_Control_PStream_LE+0x3a>
     4e0:	40 c0       	rjmp	.+128    	; 0x562 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4e2:	85 30       	cpi	r24, 0x05	; 5
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <Endpoint_Write_Control_PStream_LE+0x40>
     4e6:	3f c0       	rjmp	.+126    	; 0x566 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4ec:	83 ff       	sbrs	r24, 3
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <Endpoint_Write_Control_PStream_LE+0x4c>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4f8:	82 fd       	sbrc	r24, 2
     4fa:	2d c0       	rjmp	.+90     	; 0x556 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4fc:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     500:	80 ff       	sbrs	r24, 0
     502:	1d c0       	rjmp	.+58     	; 0x53e <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     504:	80 91 f2 00 	lds	r24, 0x00F2
     508:	28 2f       	mov	r18, r24
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	08 c0       	rjmp	.+16     	; 0x51e <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     50e:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     510:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     514:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     516:	41 50       	subi	r20, 0x01	; 1
     518:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     51e:	41 15       	cp	r20, r1
     520:	51 05       	cpc	r21, r1
     522:	19 f0       	breq	.+6      	; 0x52a <Endpoint_Write_Control_PStream_LE+0x82>
     524:	28 30       	cpi	r18, 0x08	; 8
     526:	31 05       	cpc	r19, r1
     528:	90 f3       	brcs	.-28     	; 0x50e <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	28 30       	cpi	r18, 0x08	; 8
     52e:	31 05       	cpc	r19, r1
     530:	09 f4       	brne	.+2      	; 0x534 <Endpoint_Write_Control_PStream_LE+0x8c>
     532:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     534:	80 91 e8 00 	lds	r24, 0x00E8
     538:	8e 77       	andi	r24, 0x7E	; 126
     53a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     53e:	41 15       	cp	r20, r1
     540:	51 05       	cpc	r21, r1
     542:	51 f6       	brne	.-108    	; 0x4d8 <Endpoint_Write_Control_PStream_LE+0x30>
     544:	99 23       	and	r25, r25
     546:	41 f6       	brne	.-112    	; 0x4d8 <Endpoint_Write_Control_PStream_LE+0x30>
     548:	06 c0       	rjmp	.+12     	; 0x556 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     54a:	80 91 50 01 	lds	r24, 0x0150

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     54e:	88 23       	and	r24, r24
     550:	41 f0       	breq	.+16     	; 0x562 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     552:	85 30       	cpi	r24, 0x05	; 5
     554:	41 f0       	breq	.+16     	; 0x566 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     556:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     55a:	82 ff       	sbrs	r24, 2
     55c:	f6 cf       	rjmp	.-20     	; 0x54a <Endpoint_Write_Control_PStream_LE+0xa2>
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	08 95       	ret
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	08 95       	ret
     566:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     568:	08 95       	ret

0000056a <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     56a:	38 2f       	mov	r19, r24
     56c:	28 2f       	mov	r18, r24
     56e:	2e c0       	rjmp	.+92     	; 0x5cc <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     570:	82 2f       	mov	r24, r18
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     578:	23 17       	cp	r18, r19
     57a:	21 f4       	brne	.+8      	; 0x584 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     57c:	76 2f       	mov	r23, r22
     57e:	94 2f       	mov	r25, r20
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	06 c0       	rjmp	.+12     	; 0x590 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     584:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     588:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     58c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     590:	91 ff       	sbrs	r25, 1
     592:	1b c0       	rjmp	.+54     	; 0x5ca <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     594:	80 91 eb 00 	lds	r24, 0x00EB
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     59e:	80 91 ed 00 	lds	r24, 0x00ED
     5a2:	8d 7f       	andi	r24, 0xFD	; 253
     5a4:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     5a8:	80 91 eb 00 	lds	r24, 0x00EB
     5ac:	81 60       	ori	r24, 0x01	; 1
     5ae:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     5b2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     5b6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     5ba:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     5be:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     5c2:	87 fd       	sbrc	r24, 7
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <Endpoint_ConfigureEndpoint_Prv+0x60>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5ca:	2f 5f       	subi	r18, 0xFF	; 255
     5cc:	25 30       	cpi	r18, 0x05	; 5
     5ce:	80 f2       	brcs	.-96     	; 0x570 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5d0:	3f 70       	andi	r19, 0x0F	; 15
     5d2:	30 93 e9 00 	sts	0x00E9, r19
     5d6:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     5d8:	08 95       	ret

000005da <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	06 2f       	mov	r16, r22
     5e4:	ec 01       	movw	r28, r24
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	2a c0       	rjmp	.+84     	; 0x63e <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     5ea:	98 81       	ld	r25, Y
     5ec:	99 23       	and	r25, r25
     5ee:	29 f1       	breq	.+74     	; 0x63a <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     5f0:	6b 81       	ldd	r22, Y+3	; 0x03
     5f2:	e9 81       	ldd	r30, Y+1	; 0x01
     5f4:	fa 81       	ldd	r31, Y+2	; 0x02
     5f6:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     5f8:	89 2f       	mov	r24, r25
     5fa:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     5fc:	85 30       	cpi	r24, 0x05	; 5
     5fe:	18 f5       	brcc	.+70     	; 0x646 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     600:	22 30       	cpi	r18, 0x02	; 2
     602:	10 f4       	brcc	.+4      	; 0x608 <Endpoint_ConfigureEndpointTable+0x2e>
     604:	52 e0       	ldi	r21, 0x02	; 2
     606:	01 c0       	rjmp	.+2      	; 0x60a <Endpoint_ConfigureEndpointTable+0x30>
     608:	56 e0       	ldi	r21, 0x06	; 6
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	28 e0       	ldi	r18, 0x08	; 8
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	03 c0       	rjmp	.+6      	; 0x618 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     612:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     614:	22 0f       	add	r18, r18
     616:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     618:	2e 17       	cp	r18, r30
     61a:	3f 07       	cpc	r19, r31
     61c:	d0 f3       	brcs	.-12     	; 0x612 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     61e:	62 95       	swap	r22
     620:	66 0f       	add	r22, r22
     622:	66 0f       	add	r22, r22
     624:	60 7c       	andi	r22, 0xC0	; 192
     626:	99 1f       	adc	r25, r25
     628:	99 27       	eor	r25, r25
     62a:	99 1f       	adc	r25, r25
     62c:	69 2b       	or	r22, r25
     62e:	42 95       	swap	r20
     630:	40 7f       	andi	r20, 0xF0	; 240
     632:	45 2b       	or	r20, r21
     634:	9a df       	rcall	.-204    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
     636:	88 23       	and	r24, r24
     638:	31 f0       	breq	.+12     	; 0x646 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     63a:	1f 5f       	subi	r17, 0xFF	; 255
     63c:	25 96       	adiw	r28, 0x05	; 5
     63e:	10 17       	cp	r17, r16
     640:	a0 f2       	brcs	.-88     	; 0x5ea <Endpoint_ConfigureEndpointTable+0x10>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	01 c0       	rjmp	.+2      	; 0x648 <Endpoint_ConfigureEndpointTable+0x6e>
     646:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	08 95       	ret

00000652 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     652:	80 91 51 01 	lds	r24, 0x0151
     656:	88 23       	and	r24, r24
     658:	9c f4       	brge	.+38     	; 0x680 <Endpoint_ClearStatusStage+0x2e>
     65a:	04 c0       	rjmp	.+8      	; 0x664 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     65c:	80 91 50 01 	lds	r24, 0x0150
     660:	88 23       	and	r24, r24
     662:	b9 f0       	breq	.+46     	; 0x692 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     664:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     668:	82 ff       	sbrs	r24, 2
     66a:	f8 cf       	rjmp	.-16     	; 0x65c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     66c:	80 91 e8 00 	lds	r24, 0x00E8
     670:	8b 77       	andi	r24, 0x7B	; 123
     672:	80 93 e8 00 	sts	0x00E8, r24
     676:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     678:	80 91 50 01 	lds	r24, 0x0150
     67c:	88 23       	and	r24, r24
     67e:	49 f0       	breq	.+18     	; 0x692 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     680:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     684:	80 ff       	sbrs	r24, 0
     686:	f8 cf       	rjmp	.-16     	; 0x678 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     688:	80 91 e8 00 	lds	r24, 0x00E8
     68c:	8e 77       	andi	r24, 0x7E	; 126
     68e:	80 93 e8 00 	sts	0x00E8, r24
     692:	08 95       	ret

00000694 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     694:	40 91 e4 00 	lds	r20, 0x00E4
     698:	50 91 e5 00 	lds	r21, 0x00E5
     69c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     69e:	80 91 ec 00 	lds	r24, 0x00EC
     6a2:	80 ff       	sbrs	r24, 0
     6a4:	24 c0       	rjmp	.+72     	; 0x6ee <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6a6:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     6aa:	80 fd       	sbrc	r24, 0
     6ac:	1e c0       	rjmp	.+60     	; 0x6ea <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6ae:	80 91 50 01 	lds	r24, 0x0150

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6b2:	88 23       	and	r24, r24
     6b4:	11 f4       	brne	.+4      	; 0x6ba <Endpoint_WaitUntilReady+0x26>
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6ba:	85 30       	cpi	r24, 0x05	; 5
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <Endpoint_WaitUntilReady+0x2e>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     6c2:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     6c6:	85 ff       	sbrs	r24, 5
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <Endpoint_WaitUntilReady+0x3a>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	08 95       	ret
     6ce:	80 91 e4 00 	lds	r24, 0x00E4
     6d2:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     6d6:	84 17       	cp	r24, r20
     6d8:	95 07       	cpc	r25, r21
     6da:	09 f3       	breq	.-62     	; 0x69e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     6dc:	22 23       	and	r18, r18
     6de:	11 f4       	brne	.+4      	; 0x6e4 <Endpoint_WaitUntilReady+0x50>
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	08 95       	ret
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	ac 01       	movw	r20, r24
     6e8:	da cf       	rjmp	.-76     	; 0x69e <Endpoint_WaitUntilReady+0xa>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     6ec:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6ee:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     6f2:	82 ff       	sbrs	r24, 2
     6f4:	dc cf       	rjmp	.-72     	; 0x6ae <Endpoint_WaitUntilReady+0x1a>
     6f6:	f9 cf       	rjmp	.-14     	; 0x6ea <Endpoint_WaitUntilReady+0x56>

000006f8 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     6f8:	40 d0       	rcall	.+128    	; 0x77a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     6fa:	42 d0       	rcall	.+132    	; 0x780 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     6fc:	80 91 d8 00 	lds	r24, 0x00D8
     700:	8f 77       	andi	r24, 0x7F	; 127
     702:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     706:	80 91 d8 00 	lds	r24, 0x00D8
     70a:	80 68       	ori	r24, 0x80	; 128
     70c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     710:	80 91 d8 00 	lds	r24, 0x00D8
     714:	8f 7d       	andi	r24, 0xDF	; 223
     716:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     71a:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     720:	09 b4       	in	r0, 0x29	; 41
     722:	00 fe       	sbrs	r0, 0
     724:	fd cf       	rjmp	.-6      	; 0x720 <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     726:	10 92 50 01 	sts	0x0150, r1
	USB_Device_ConfigurationNumber  = 0;
     72a:	10 92 4c 01 	sts	0x014C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     72e:	10 92 4e 01 	sts	0x014E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     732:	10 92 4d 01 	sts	0x014D, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	42 e0       	ldi	r20, 0x02	; 2
     73c:	16 df       	rcall	.-468    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     73e:	80 91 e1 00 	lds	r24, 0x00E1
     742:	8e 7f       	andi	r24, 0xFE	; 254
     744:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     748:	80 91 e2 00 	lds	r24, 0x00E2
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     752:	80 91 e2 00 	lds	r24, 0x00E2
     756:	88 60       	ori	r24, 0x08	; 8
     758:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     75c:	80 91 e0 00 	lds	r24, 0x00E0
     760:	8e 7f       	andi	r24, 0xFE	; 254
     762:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     766:	08 95       	ret

00000768 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     768:	e3 e6       	ldi	r30, 0x63	; 99
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	8e 7f       	andi	r24, 0xFE	; 254
     770:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 4f 01 	sts	0x014F, r24

	USB_ResetInterface();
}
     778:	bf cf       	rjmp	.-130    	; 0x6f8 <USB_ResetInterface>

0000077a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     77a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     77e:	08 95       	ret

00000780 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     780:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     784:	08 95       	ret

00000786 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	1f 93       	push	r17
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     7aa:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7ae:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7b2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     7b6:	80 91 f0 00 	lds	r24, 0x00F0
     7ba:	87 7f       	andi	r24, 0xF7	; 247
     7bc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     7c0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     7c2:	c2 d0       	rcall	.+388    	; 0x948 <USB_Device_ProcessControlRequest>
     7c4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     7c8:	80 91 f0 00 	lds	r24, 0x00F0
     7cc:	88 60       	ori	r24, 0x08	; 8
     7ce:	80 93 f0 00 	sts	0x00F0, r24
     7d2:	1f 70       	andi	r17, 0x0F	; 15
     7d4:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	1f 91       	pop	r17
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     81e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     822:	82 ff       	sbrs	r24, 2
     824:	0a c0       	rjmp	.+20     	; 0x83a <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     826:	80 91 e2 00 	lds	r24, 0x00E2
     82a:	82 ff       	sbrs	r24, 2
     82c:	06 c0       	rjmp	.+12     	; 0x83a <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     82e:	80 91 e1 00 	lds	r24, 0x00E1
     832:	8b 7f       	andi	r24, 0xFB	; 251
     834:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     838:	ef d1       	rcall	.+990    	; 0xc18 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     83a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     83e:	80 ff       	sbrs	r24, 0
     840:	17 c0       	rjmp	.+46     	; 0x870 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     842:	80 91 e2 00 	lds	r24, 0x00E2
     846:	80 ff       	sbrs	r24, 0
     848:	13 c0       	rjmp	.+38     	; 0x870 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     84a:	80 91 e2 00 	lds	r24, 0x00E2
     84e:	8e 7f       	andi	r24, 0xFE	; 254
     850:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     854:	80 91 e2 00 	lds	r24, 0x00E2
     858:	80 61       	ori	r24, 0x10	; 16
     85a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     85e:	80 91 d8 00 	lds	r24, 0x00D8
     862:	80 62       	ori	r24, 0x20	; 32
     864:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     868:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     86a:	10 92 50 01 	sts	0x0150, r1
		EVENT_USB_Device_Disconnect();
     86e:	a0 dc       	rcall	.-1728   	; 0x1b0 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     870:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     874:	84 ff       	sbrs	r24, 4
     876:	2c c0       	rjmp	.+88     	; 0x8d0 <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     878:	80 91 e2 00 	lds	r24, 0x00E2
     87c:	84 ff       	sbrs	r24, 4
     87e:	28 c0       	rjmp	.+80     	; 0x8d0 <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     880:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     886:	09 b4       	in	r0, 0x29	; 41
     888:	00 fe       	sbrs	r0, 0
     88a:	fd cf       	rjmp	.-6      	; 0x886 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     88c:	80 91 d8 00 	lds	r24, 0x00D8
     890:	8f 7d       	andi	r24, 0xDF	; 223
     892:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     896:	80 91 e1 00 	lds	r24, 0x00E1
     89a:	8f 7e       	andi	r24, 0xEF	; 239
     89c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     8a0:	80 91 e2 00 	lds	r24, 0x00E2
     8a4:	8f 7e       	andi	r24, 0xEF	; 239
     8a6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8aa:	80 91 e2 00 	lds	r24, 0x00E2
     8ae:	81 60       	ori	r24, 0x01	; 1
     8b0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     8b4:	80 91 4c 01 	lds	r24, 0x014C
     8b8:	88 23       	and	r24, r24
     8ba:	31 f4       	brne	.+12     	; 0x8c8 <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8bc:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     8c0:	87 fd       	sbrc	r24, 7
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__vector_11+0xcc>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <__vector_11+0xce>
     8c8:	84 e0       	ldi	r24, 0x04	; 4
     8ca:	80 93 50 01 	sts	0x0150, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     8ce:	6f dc       	rcall	.-1826   	; 0x1ae <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     8d0:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8d4:	83 ff       	sbrs	r24, 3
     8d6:	27 c0       	rjmp	.+78     	; 0x926 <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     8d8:	80 91 e2 00 	lds	r24, 0x00E2
     8dc:	83 ff       	sbrs	r24, 3
     8de:	23 c0       	rjmp	.+70     	; 0x926 <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     8e0:	80 91 e1 00 	lds	r24, 0x00E1
     8e4:	87 7f       	andi	r24, 0xF7	; 247
     8e6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	80 93 50 01 	sts	0x0150, r24
		USB_Device_ConfigurationNumber = 0;
     8f0:	10 92 4c 01 	sts	0x014C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8f4:	80 91 e1 00 	lds	r24, 0x00E1
     8f8:	8e 7f       	andi	r24, 0xFE	; 254
     8fa:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8fe:	80 91 e2 00 	lds	r24, 0x00E2
     902:	8e 7f       	andi	r24, 0xFE	; 254
     904:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     908:	80 91 e2 00 	lds	r24, 0x00E2
     90c:	80 61       	ori	r24, 0x10	; 16
     90e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	42 e0       	ldi	r20, 0x02	; 2
     918:	28 de       	rcall	.-944    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     91a:	80 91 f0 00 	lds	r24, 0x00F0
     91e:	88 60       	ori	r24, 0x08	; 8
     920:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     924:	79 d1       	rcall	.+754    	; 0xc18 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     948:	1f 93       	push	r17
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	ac 97       	sbiw	r28, 0x2c	; 44
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	e1 e5       	ldi	r30, 0x51	; 81
     960:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     962:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     966:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	e9 35       	cpi	r30, 0x59	; 89
     96c:	f2 07       	cpc	r31, r18
     96e:	c9 f7       	brne	.-14     	; 0x962 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     970:	20 dc       	rcall	.-1984   	; 0x1b2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     972:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     976:	83 ff       	sbrs	r24, 3
     978:	37 c1       	rjmp	.+622    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     97a:	80 91 51 01 	lds	r24, 0x0151

		switch (USB_ControlRequest.bRequest)
     97e:	30 91 52 01 	lds	r19, 0x0152
     982:	35 30       	cpi	r19, 0x05	; 5
     984:	09 f4       	brne	.+2      	; 0x988 <USB_Device_ProcessControlRequest+0x40>
     986:	87 c0       	rjmp	.+270    	; 0xa96 <USB_Device_ProcessControlRequest+0x14e>
     988:	36 30       	cpi	r19, 0x06	; 6
     98a:	40 f4       	brcc	.+16     	; 0x99c <USB_Device_ProcessControlRequest+0x54>
     98c:	31 30       	cpi	r19, 0x01	; 1
     98e:	c9 f1       	breq	.+114    	; 0xa02 <USB_Device_ProcessControlRequest+0xba>
     990:	31 30       	cpi	r19, 0x01	; 1
     992:	70 f0       	brcs	.+28     	; 0x9b0 <USB_Device_ProcessControlRequest+0x68>
     994:	33 30       	cpi	r19, 0x03	; 3
     996:	09 f0       	breq	.+2      	; 0x99a <USB_Device_ProcessControlRequest+0x52>
     998:	27 c1       	rjmp	.+590    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
     99a:	33 c0       	rjmp	.+102    	; 0xa02 <USB_Device_ProcessControlRequest+0xba>
     99c:	38 30       	cpi	r19, 0x08	; 8
     99e:	09 f4       	brne	.+2      	; 0x9a2 <USB_Device_ProcessControlRequest+0x5a>
     9a0:	f5 c0       	rjmp	.+490    	; 0xb8c <USB_Device_ProcessControlRequest+0x244>
     9a2:	39 30       	cpi	r19, 0x09	; 9
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <USB_Device_ProcessControlRequest+0x60>
     9a6:	04 c1       	rjmp	.+520    	; 0xbb0 <USB_Device_ProcessControlRequest+0x268>
     9a8:	36 30       	cpi	r19, 0x06	; 6
     9aa:	09 f0       	breq	.+2      	; 0x9ae <USB_Device_ProcessControlRequest+0x66>
     9ac:	1d c1       	rjmp	.+570    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
     9ae:	96 c0       	rjmp	.+300    	; 0xadc <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9b0:	80 38       	cpi	r24, 0x80	; 128
     9b2:	21 f0       	breq	.+8      	; 0x9bc <USB_Device_ProcessControlRequest+0x74>
     9b4:	82 38       	cpi	r24, 0x82	; 130
     9b6:	09 f0       	breq	.+2      	; 0x9ba <USB_Device_ProcessControlRequest+0x72>
     9b8:	17 c1       	rjmp	.+558    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
     9ba:	08 c0       	rjmp	.+16     	; 0x9cc <USB_Device_ProcessControlRequest+0x84>
     9bc:	90 91 4d 01 	lds	r25, 0x014D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     9c0:	80 91 4e 01 	lds	r24, 0x014E
     9c4:	88 23       	and	r24, r24
     9c6:	99 f0       	breq	.+38     	; 0x9ee <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     9c8:	92 60       	ori	r25, 0x02	; 2
     9ca:	11 c0       	rjmp	.+34     	; 0x9ee <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9cc:	80 91 55 01 	lds	r24, 0x0155
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9d6:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	25 e0       	ldi	r18, 0x05	; 5
     9de:	96 95       	lsr	r25
     9e0:	87 95       	ror	r24
     9e2:	2a 95       	dec	r18
     9e4:	e1 f7       	brne	.-8      	; 0x9de <USB_Device_ProcessControlRequest+0x96>
     9e6:	98 2f       	mov	r25, r24
     9e8:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9ea:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9ee:	80 91 e8 00 	lds	r24, 0x00E8
     9f2:	87 7f       	andi	r24, 0xF7	; 247
     9f4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9f8:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     9fc:	10 92 f1 00 	sts	0x00F1, r1
     a00:	d0 c0       	rjmp	.+416    	; 0xba2 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a02:	88 23       	and	r24, r24
     a04:	19 f0       	breq	.+6      	; 0xa0c <USB_Device_ProcessControlRequest+0xc4>
     a06:	82 30       	cpi	r24, 0x02	; 2
     a08:	09 f0       	breq	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0xc4>
     a0a:	ee c0       	rjmp	.+476    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	8f 71       	andi	r24, 0x1F	; 31
     a10:	90 70       	andi	r25, 0x00	; 0
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	21 f0       	breq	.+8      	; 0xa1e <USB_Device_ProcessControlRequest+0xd6>
     a16:	02 97       	sbiw	r24, 0x02	; 2
     a18:	09 f0       	breq	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0xd4>
     a1a:	e6 c0       	rjmp	.+460    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
     a1c:	0c c0       	rjmp	.+24     	; 0xa36 <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a1e:	80 91 53 01 	lds	r24, 0x0153
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	09 f0       	breq	.+2      	; 0xa28 <USB_Device_ProcessControlRequest+0xe0>
     a26:	e0 c0       	rjmp	.+448    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a28:	10 92 4e 01 	sts	0x014E, r1
     a2c:	33 30       	cpi	r19, 0x03	; 3
     a2e:	69 f5       	brne	.+90     	; 0xa8a <USB_Device_ProcessControlRequest+0x142>
     a30:	80 93 4e 01 	sts	0x014E, r24
     a34:	2a c0       	rjmp	.+84     	; 0xa8a <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a36:	80 91 53 01 	lds	r24, 0x0153
     a3a:	88 23       	and	r24, r24
     a3c:	31 f5       	brne	.+76     	; 0xa8a <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a3e:	20 91 55 01 	lds	r18, 0x0155
     a42:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a44:	09 f4       	brne	.+2      	; 0xa48 <USB_Device_ProcessControlRequest+0x100>
     a46:	d0 c0       	rjmp	.+416    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a48:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a4c:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a50:	80 ff       	sbrs	r24, 0
     a52:	1b c0       	rjmp	.+54     	; 0xa8a <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a54:	33 30       	cpi	r19, 0x03	; 3
     a56:	21 f4       	brne	.+8      	; 0xa60 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a58:	80 91 eb 00 	lds	r24, 0x00EB
     a5c:	80 62       	ori	r24, 0x20	; 32
     a5e:	13 c0       	rjmp	.+38     	; 0xa86 <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a60:	80 91 eb 00 	lds	r24, 0x00EB
     a64:	80 61       	ori	r24, 0x10	; 16
     a66:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <USB_Device_ProcessControlRequest+0x12c>
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	2a 95       	dec	r18
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <USB_Device_ProcessControlRequest+0x128>
     a78:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     a7c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a80:	80 91 eb 00 	lds	r24, 0x00EB
     a84:	88 60       	ori	r24, 0x08	; 8
     a86:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a8a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a8e:	80 91 e8 00 	lds	r24, 0x00E8
     a92:	87 7f       	andi	r24, 0xF7	; 247
     a94:	89 c0       	rjmp	.+274    	; 0xba8 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a96:	88 23       	and	r24, r24
     a98:	09 f0       	breq	.+2      	; 0xa9c <USB_Device_ProcessControlRequest+0x154>
     a9a:	a6 c0       	rjmp	.+332    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a9c:	10 91 53 01 	lds	r17, 0x0153
     aa0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     aa2:	80 91 e3 00 	lds	r24, 0x00E3
     aa6:	80 78       	andi	r24, 0x80	; 128
     aa8:	81 2b       	or	r24, r17
     aaa:	80 93 e3 00 	sts	0x00E3, r24
     aae:	80 91 e8 00 	lds	r24, 0x00E8
     ab2:	87 7f       	andi	r24, 0xF7	; 247
     ab4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ab8:	cc dd       	rcall	.-1128   	; 0x652 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     aba:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     abe:	80 ff       	sbrs	r24, 0
     ac0:	fc cf       	rjmp	.-8      	; 0xaba <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     ac2:	80 91 e3 00 	lds	r24, 0x00E3
     ac6:	80 68       	ori	r24, 0x80	; 128
     ac8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     acc:	11 23       	and	r17, r17
     ace:	11 f4       	brne	.+4      	; 0xad4 <USB_Device_ProcessControlRequest+0x18c>
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <USB_Device_ProcessControlRequest+0x18e>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	80 93 50 01 	sts	0x0150, r24
     ada:	86 c0       	rjmp	.+268    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     adc:	80 58       	subi	r24, 0x80	; 128
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	08 f0       	brcs	.+2      	; 0xae4 <USB_Device_ProcessControlRequest+0x19c>
     ae2:	82 c0       	rjmp	.+260    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ae4:	80 91 53 01 	lds	r24, 0x0153
     ae8:	90 91 54 01 	lds	r25, 0x0154
     aec:	23 e0       	ldi	r18, 0x03	; 3
     aee:	8c 3d       	cpi	r24, 0xDC	; 220
     af0:	92 07       	cpc	r25, r18
     af2:	09 f0       	breq	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0x1ae>
     af4:	33 c0       	rjmp	.+102    	; 0xb5c <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     afa:	8a e2       	ldi	r24, 0x2A	; 42
     afc:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     afe:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b00:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b02:	de 01       	movw	r26, r28
     b04:	15 96       	adiw	r26, 0x05	; 5
     b06:	6e e0       	ldi	r22, 0x0E	; 14
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b0c:	11 e2       	ldi	r17, 0x21	; 33
     b0e:	e6 2f       	mov	r30, r22
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	10 93 57 00 	sts	0x0057, r17
     b16:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     b18:	40 ff       	sbrs	r20, 0
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
     b1c:	82 95       	swap	r24
     b1e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     b20:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b22:	8f 70       	andi	r24, 0x0F	; 15
     b24:	28 2f       	mov	r18, r24
     b26:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b28:	8a 30       	cpi	r24, 0x0A	; 10
     b2a:	18 f0       	brcs	.+6      	; 0xb32 <USB_Device_ProcessControlRequest+0x1ea>
     b2c:	c9 01       	movw	r24, r18
     b2e:	c7 96       	adiw	r24, 0x37	; 55
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <USB_Device_ProcessControlRequest+0x1ee>
     b32:	c9 01       	movw	r24, r18
     b34:	c0 96       	adiw	r24, 0x30	; 48
     b36:	8d 93       	st	X+, r24
     b38:	9d 93       	st	X+, r25
     b3a:	4f 5f       	subi	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b3e:	44 31       	cpi	r20, 0x14	; 20
     b40:	51 05       	cpc	r21, r1
     b42:	29 f7       	brne	.-54     	; 0xb0e <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b44:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b46:	80 91 e8 00 	lds	r24, 0x00E8
     b4a:	87 7f       	andi	r24, 0xF7	; 247
     b4c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b50:	ce 01       	movw	r24, r28
     b52:	03 96       	adiw	r24, 0x03	; 3
     b54:	6a e2       	ldi	r22, 0x2A	; 42
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	49 dc       	rcall	.-1902   	; 0x3ec <Endpoint_Write_Control_Stream_LE>
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <USB_Device_ProcessControlRequest+0x238>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b5c:	60 91 55 01 	lds	r22, 0x0155
     b60:	ae 01       	movw	r20, r28
     b62:	4f 5f       	subi	r20, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	14 dc       	rcall	.-2008   	; 0x390 <CALLBACK_USB_GetDescriptor>
     b68:	bc 01       	movw	r22, r24
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	09 f4       	brne	.+2      	; 0xb70 <USB_Device_ProcessControlRequest+0x228>
     b6e:	3c c0       	rjmp	.+120    	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
     b70:	80 91 e8 00 	lds	r24, 0x00E8
     b74:	87 7f       	andi	r24, 0xF7	; 247
     b76:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	94 dc       	rcall	.-1752   	; 0x4a8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b80:	80 91 e8 00 	lds	r24, 0x00E8
     b84:	8b 77       	andi	r24, 0x7B	; 123
     b86:	80 93 e8 00 	sts	0x00E8, r24
     b8a:	2e c0       	rjmp	.+92     	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b8c:	80 38       	cpi	r24, 0x80	; 128
     b8e:	61 f5       	brne	.+88     	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b90:	80 91 e8 00 	lds	r24, 0x00E8
     b94:	87 7f       	andi	r24, 0xF7	; 247
     b96:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b9a:	80 91 4c 01 	lds	r24, 0x014C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b9e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba2:	80 91 e8 00 	lds	r24, 0x00E8
     ba6:	8e 77       	andi	r24, 0x7E	; 126
     ba8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     bac:	52 dd       	rcall	.-1372   	; 0x652 <Endpoint_ClearStatusStage>
     bae:	1c c0       	rjmp	.+56     	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bb0:	88 23       	and	r24, r24
     bb2:	d1 f4       	brne	.+52     	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     bb4:	90 91 53 01 	lds	r25, 0x0153
     bb8:	92 30       	cpi	r25, 0x02	; 2
     bba:	b0 f4       	brcc	.+44     	; 0xbe8 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bbc:	80 91 e8 00 	lds	r24, 0x00E8
     bc0:	87 7f       	andi	r24, 0xF7	; 247
     bc2:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     bc6:	90 93 4c 01 	sts	0x014C, r25

	Endpoint_ClearStatusStage();
     bca:	43 dd       	rcall	.-1402   	; 0x652 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     bcc:	80 91 4c 01 	lds	r24, 0x014C
     bd0:	88 23       	and	r24, r24
     bd2:	31 f4       	brne	.+12     	; 0xbe0 <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bd4:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bd8:	87 fd       	sbrc	r24, 7
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <USB_Device_ProcessControlRequest+0x298>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <USB_Device_ProcessControlRequest+0x29a>
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	80 93 50 01 	sts	0x0150, r24

	EVENT_USB_Device_ConfigurationChanged();
     be6:	e8 da       	rcall	.-2608   	; 0x1b8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     be8:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     bec:	83 ff       	sbrs	r24, 3
     bee:	0a c0       	rjmp	.+20     	; 0xc04 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf0:	80 91 e8 00 	lds	r24, 0x00E8
     bf4:	87 7f       	andi	r24, 0xF7	; 247
     bf6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bfa:	80 91 eb 00 	lds	r24, 0x00EB
     bfe:	80 62       	ori	r24, 0x20	; 32
     c00:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c04:	ac 96       	adiw	r28, 0x2c	; 44
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	1f 91       	pop	r17
     c16:	08 95       	ret

00000c18 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c18:	08 95       	ret

00000c1a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c1a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c1c:	80 91 50 01 	lds	r24, 0x0150
     c20:	88 23       	and	r24, r24
     c22:	71 f0       	breq	.+28     	; 0xc40 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c24:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c28:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c30:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c34:	83 ff       	sbrs	r24, 3
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
     c38:	87 de       	rcall	.-754    	; 0x948 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3a:	1f 70       	andi	r17, 0x0F	; 15
     c3c:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c40:	1f 91       	pop	r17
     c42:	08 95       	ret

00000c44 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     c44:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     c46:	80 91 50 01 	lds	r24, 0x0150
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	29 f5       	brne	.+74     	; 0xc98 <CDC_Device_ReceiveByte+0x54>
     c4e:	84 89       	ldd	r24, Z+20	; 0x14
     c50:	95 89       	ldd	r25, Z+21	; 0x15
     c52:	a6 89       	ldd	r26, Z+22	; 0x16
     c54:	b7 89       	ldd	r27, Z+23	; 0x17
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	a1 05       	cpc	r26, r1
     c5a:	b1 05       	cpc	r27, r1
     c5c:	e9 f0       	breq	.+58     	; 0xc98 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c5e:	86 81       	ldd	r24, Z+6	; 0x06
     c60:	8f 70       	andi	r24, 0x0F	; 15
     c62:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c66:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     c6a:	82 ff       	sbrs	r24, 2
     c6c:	15 c0       	rjmp	.+42     	; 0xc98 <CDC_Device_ReceiveByte+0x54>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     c6e:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     c72:	88 23       	and	r24, r24
     c74:	19 f4       	brne	.+6      	; 0xc7c <CDC_Device_ReceiveByte+0x38>
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c7c:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     c84:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     c88:	88 23       	and	r24, r24
     c8a:	41 f4       	brne	.+16     	; 0xc9c <CDC_Device_ReceiveByte+0x58>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c8c:	80 91 e8 00 	lds	r24, 0x00E8
     c90:	8b 77       	andi	r24, 0x7B	; 123
     c92:	80 93 e8 00 	sts	0x00E8, r24
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <CDC_Device_ReceiveByte+0x58>
     c98:	2f ef       	ldi	r18, 0xFF	; 255
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     c9c:	c9 01       	movw	r24, r18
     c9e:	08 95       	ret

00000ca0 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
     ca0:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
     ca2:	2e e0       	ldi	r18, 0x0E	; 14
     ca4:	db 01       	movw	r26, r22
     ca6:	1d 92       	st	X+, r1
     ca8:	2a 95       	dec	r18
     caa:	e9 f7       	brne	.-6      	; 0xca6 <CDC_Device_CreateStream+0x6>
     cac:	23 e0       	ldi	r18, 0x03	; 3
     cae:	23 83       	std	Z+3, r18	; 0x03
     cb0:	2a ed       	ldi	r18, 0xDA	; 218
     cb2:	36 e0       	ldi	r19, 0x06	; 6
     cb4:	31 87       	std	Z+9, r19	; 0x09
     cb6:	20 87       	std	Z+8, r18	; 0x08
     cb8:	23 e6       	ldi	r18, 0x63	; 99
     cba:	36 e0       	ldi	r19, 0x06	; 6
     cbc:	33 87       	std	Z+11, r19	; 0x0b
     cbe:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     cc0:	95 87       	std	Z+13, r25	; 0x0d
     cc2:	84 87       	std	Z+12, r24	; 0x0c
}
     cc4:	08 95       	ret

00000cc6 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     cc6:	fc 01       	movw	r30, r24
     cc8:	84 85       	ldd	r24, Z+12	; 0x0c
     cca:	95 85       	ldd	r25, Z+13	; 0x0d
     ccc:	bb df       	rcall	.-138    	; 0xc44 <CDC_Device_ReceiveByte>
     cce:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
     cd0:	97 ff       	sbrs	r25, 7
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <CDC_Device_getchar+0x12>
     cd4:	2e ef       	ldi	r18, 0xFE	; 254
     cd6:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
     cd8:	c9 01       	movw	r24, r18
     cda:	08 95       	ret

00000cdc <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     cdc:	08 95       	ret

00000cde <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     cde:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ce0:	80 91 50 01 	lds	r24, 0x0150
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	19 f5       	brne	.+70     	; 0xd2e <CDC_Device_Flush+0x50>
     ce8:	84 89       	ldd	r24, Z+20	; 0x14
     cea:	95 89       	ldd	r25, Z+21	; 0x15
     cec:	a6 89       	ldd	r26, Z+22	; 0x16
     cee:	b7 89       	ldd	r27, Z+23	; 0x17
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	a1 05       	cpc	r26, r1
     cf4:	b1 05       	cpc	r27, r1
     cf6:	d9 f0       	breq	.+54     	; 0xd2e <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf8:	81 81       	ldd	r24, Z+1	; 0x01
     cfa:	8f 70       	andi	r24, 0x0F	; 15
     cfc:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d00:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     d04:	88 23       	and	r24, r24
     d06:	a9 f0       	breq	.+42     	; 0xd32 <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d08:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d0c:	80 91 e8 00 	lds	r24, 0x00E8
     d10:	8e 77       	andi	r24, 0x7E	; 126
     d12:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     d16:	95 fd       	sbrc	r25, 5
     d18:	0c c0       	rjmp	.+24     	; 0xd32 <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     d1a:	bc dc       	rcall	.-1672   	; 0x694 <Endpoint_WaitUntilReady>
     d1c:	98 2f       	mov	r25, r24
     d1e:	88 23       	and	r24, r24
     d20:	49 f4       	brne	.+18     	; 0xd34 <CDC_Device_Flush+0x56>
     d22:	80 91 e8 00 	lds	r24, 0x00E8
     d26:	8e 77       	andi	r24, 0x7E	; 126
     d28:	80 93 e8 00 	sts	0x00E8, r24
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <CDC_Device_Flush+0x56>
     d2e:	92 e0       	ldi	r25, 0x02	; 2
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <CDC_Device_Flush+0x56>
     d32:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     d34:	89 2f       	mov	r24, r25
     d36:	08 95       	ret

00000d38 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d38:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d3a:	80 91 50 01 	lds	r24, 0x0150
     d3e:	84 30       	cpi	r24, 0x04	; 4
     d40:	91 f4       	brne	.+36     	; 0xd66 <CDC_Device_USBTask+0x2e>
     d42:	84 89       	ldd	r24, Z+20	; 0x14
     d44:	95 89       	ldd	r25, Z+21	; 0x15
     d46:	a6 89       	ldd	r26, Z+22	; 0x16
     d48:	b7 89       	ldd	r27, Z+23	; 0x17
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	a1 05       	cpc	r26, r1
     d4e:	b1 05       	cpc	r27, r1
     d50:	51 f0       	breq	.+20     	; 0xd66 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d52:	81 81       	ldd	r24, Z+1	; 0x01
     d54:	8f 70       	andi	r24, 0x0F	; 15
     d56:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d5a:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     d5e:	80 ff       	sbrs	r24, 0
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
     d62:	cf 01       	movw	r24, r30
     d64:	bc cf       	rjmp	.-136    	; 0xcde <CDC_Device_Flush>
     d66:	08 95       	ret

00000d68 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     d68:	1f 93       	push	r17
     d6a:	fc 01       	movw	r30, r24
     d6c:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d6e:	80 91 50 01 	lds	r24, 0x0150
     d72:	84 30       	cpi	r24, 0x04	; 4
     d74:	e1 f4       	brne	.+56     	; 0xdae <CDC_Device_SendByte+0x46>
     d76:	84 89       	ldd	r24, Z+20	; 0x14
     d78:	95 89       	ldd	r25, Z+21	; 0x15
     d7a:	a6 89       	ldd	r26, Z+22	; 0x16
     d7c:	b7 89       	ldd	r27, Z+23	; 0x17
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	a1 05       	cpc	r26, r1
     d82:	b1 05       	cpc	r27, r1
     d84:	a1 f0       	breq	.+40     	; 0xdae <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d86:	81 81       	ldd	r24, Z+1	; 0x01
     d88:	8f 70       	andi	r24, 0x0F	; 15
     d8a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     d92:	85 fd       	sbrc	r24, 5
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d96:	80 91 e8 00 	lds	r24, 0x00E8
     d9a:	8e 77       	andi	r24, 0x7E	; 126
     d9c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     da0:	79 dc       	rcall	.-1806   	; 0x694 <Endpoint_WaitUntilReady>
     da2:	88 23       	and	r24, r24
     da4:	29 f4       	brne	.+10     	; 0xdb0 <CDC_Device_SendByte+0x48>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     da6:	10 93 f1 00 	sts	0x00F1, r17
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <CDC_Device_SendByte+0x48>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     dae:	82 e0       	ldi	r24, 0x02	; 2
}
     db0:	1f 91       	pop	r17
     db2:	08 95       	ret

00000db4 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
     db4:	28 2f       	mov	r18, r24
     db6:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     db8:	84 85       	ldd	r24, Z+12	; 0x0c
     dba:	95 85       	ldd	r25, Z+13	; 0x0d
     dbc:	62 2f       	mov	r22, r18
     dbe:	d4 df       	rcall	.-88     	; 0xd68 <CDC_Device_SendByte>
     dc0:	88 23       	and	r24, r24
     dc2:	19 f4       	brne	.+6      	; 0xdca <CDC_Device_putchar+0x16>
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <CDC_Device_putchar+0x1a>
     dca:	2f ef       	ldi	r18, 0xFF	; 255
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
}
     dce:	c9 01       	movw	r24, r18
     dd0:	08 95       	ret

00000dd2 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     dd8:	40 96       	adiw	r24, 0x10	; 16
     dda:	fc 01       	movw	r30, r24
     ddc:	8b e0       	ldi	r24, 0x0B	; 11
     dde:	df 01       	movw	r26, r30
     de0:	1d 92       	st	X+, r1
     de2:	8a 95       	dec	r24
     de4:	e9 f7       	brne	.-6      	; 0xde0 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     dea:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     df0:	ce 01       	movw	r24, r28
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	f1 db       	rcall	.-2078   	; 0x5da <Endpoint_ConfigureEndpointTable>
     df8:	88 23       	and	r24, r24
     dfa:	71 f0       	breq	.+28     	; 0xe18 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     dfc:	ce 01       	movw	r24, r28
     dfe:	06 96       	adiw	r24, 0x06	; 6
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	eb db       	rcall	.-2090   	; 0x5da <Endpoint_ConfigureEndpointTable>
     e04:	88 23       	and	r24, r24
     e06:	41 f0       	breq	.+16     	; 0xe18 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     e08:	ce 01       	movw	r24, r28
     e0a:	0b 96       	adiw	r24, 0x0b	; 11
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	e5 db       	rcall	.-2102   	; 0x5da <Endpoint_ConfigureEndpointTable>
     e10:	88 23       	and	r24, r24
     e12:	19 f0       	breq	.+6      	; 0xe1a <CDC_Device_ConfigureEndpoints+0x48>
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <CDC_Device_ConfigureEndpoints+0x48>
     e18:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e26:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e2a:	83 ff       	sbrs	r24, 3
     e2c:	a3 c0       	rjmp	.+326    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e2e:	88 81       	ld	r24, Y
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	20 91 55 01 	lds	r18, 0x0155
     e36:	30 91 56 01 	lds	r19, 0x0156
     e3a:	28 17       	cp	r18, r24
     e3c:	39 07       	cpc	r19, r25
     e3e:	09 f0       	breq	.+2      	; 0xe42 <CDC_Device_ProcessControlRequest+0x22>
     e40:	99 c0       	rjmp	.+306    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
     e42:	80 91 52 01 	lds	r24, 0x0152
     e46:	81 32       	cpi	r24, 0x21	; 33
     e48:	69 f0       	breq	.+26     	; 0xe64 <CDC_Device_ProcessControlRequest+0x44>
     e4a:	82 32       	cpi	r24, 0x22	; 34
     e4c:	20 f4       	brcc	.+8      	; 0xe56 <CDC_Device_ProcessControlRequest+0x36>
     e4e:	80 32       	cpi	r24, 0x20	; 32
     e50:	09 f0       	breq	.+2      	; 0xe54 <CDC_Device_ProcessControlRequest+0x34>
     e52:	90 c0       	rjmp	.+288    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
     e54:	3c c0       	rjmp	.+120    	; 0xece <CDC_Device_ProcessControlRequest+0xae>
     e56:	82 32       	cpi	r24, 0x22	; 34
     e58:	09 f4       	brne	.+2      	; 0xe5c <CDC_Device_ProcessControlRequest+0x3c>
     e5a:	6b c0       	rjmp	.+214    	; 0xf32 <CDC_Device_ProcessControlRequest+0x112>
     e5c:	83 32       	cpi	r24, 0x23	; 35
     e5e:	09 f0       	breq	.+2      	; 0xe62 <CDC_Device_ProcessControlRequest+0x42>
     e60:	89 c0       	rjmp	.+274    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
     e62:	7a c0       	rjmp	.+244    	; 0xf58 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e64:	80 91 51 01 	lds	r24, 0x0151
     e68:	81 3a       	cpi	r24, 0xA1	; 161
     e6a:	09 f0       	breq	.+2      	; 0xe6e <CDC_Device_ProcessControlRequest+0x4e>
     e6c:	83 c0       	rjmp	.+262    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e6e:	80 91 e8 00 	lds	r24, 0x00E8
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e78:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e80:	8c 89       	ldd	r24, Y+20	; 0x14
     e82:	9d 89       	ldd	r25, Y+21	; 0x15
     e84:	ae 89       	ldd	r26, Y+22	; 0x16
     e86:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     e88:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     e8c:	29 2f       	mov	r18, r25
     e8e:	3a 2f       	mov	r19, r26
     e90:	4b 2f       	mov	r20, r27
     e92:	55 27       	eor	r21, r21
     e94:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     e98:	9d 01       	movw	r18, r26
     e9a:	44 27       	eor	r20, r20
     e9c:	55 27       	eor	r21, r21
     e9e:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     ea2:	8b 2f       	mov	r24, r27
     ea4:	99 27       	eor	r25, r25
     ea6:	aa 27       	eor	r26, r26
     ea8:	bb 27       	eor	r27, r27
     eaa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     eae:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eb0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     eb4:	89 8d       	ldd	r24, Y+25	; 0x19
     eb6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     eba:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ebc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec0:	80 91 e8 00 	lds	r24, 0x00E8
     ec4:	8e 77       	andi	r24, 0x7E	; 126
     ec6:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     eca:	c3 db       	rcall	.-2170   	; 0x652 <Endpoint_ClearStatusStage>
     ecc:	53 c0       	rjmp	.+166    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ece:	80 91 51 01 	lds	r24, 0x0151
     ed2:	81 32       	cpi	r24, 0x21	; 33
     ed4:	09 f0       	breq	.+2      	; 0xed8 <CDC_Device_ProcessControlRequest+0xb8>
     ed6:	4e c0       	rjmp	.+156    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ed8:	80 91 e8 00 	lds	r24, 0x00E8
     edc:	87 7f       	andi	r24, 0xF7	; 247
     ede:	80 93 e8 00 	sts	0x00E8, r24
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     ee4:	80 91 50 01 	lds	r24, 0x0150
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <CDC_Device_ProcessControlRequest+0xce>
     eec:	43 c0       	rjmp	.+134    	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eee:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     ef2:	82 ff       	sbrs	r24, 2
     ef4:	f7 cf       	rjmp	.-18     	; 0xee4 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     ef6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     efa:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     efe:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
     f02:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f06:	8c 8b       	std	Y+20, r24	; 0x14
     f08:	9d 8b       	std	Y+21, r25	; 0x15
     f0a:	2e 8b       	std	Y+22, r18	; 0x16
     f0c:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f0e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f12:	88 8f       	std	Y+24, r24	; 0x18
     f14:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f18:	89 8f       	std	Y+25, r24	; 0x19
     f1a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f1e:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f20:	80 91 e8 00 	lds	r24, 0x00E8
     f24:	8b 77       	andi	r24, 0x7B	; 123
     f26:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f2a:	93 db       	rcall	.-2266   	; 0x652 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f2c:	ce 01       	movw	r24, r28
     f2e:	d6 de       	rcall	.-596    	; 0xcdc <CDC_Device_Event_Stub>
     f30:	21 c0       	rjmp	.+66     	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f32:	80 91 51 01 	lds	r24, 0x0151
     f36:	81 32       	cpi	r24, 0x21	; 33
     f38:	e9 f4       	brne	.+58     	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f44:	86 db       	rcall	.-2292   	; 0x652 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f46:	80 91 53 01 	lds	r24, 0x0153
     f4a:	90 91 54 01 	lds	r25, 0x0154
     f4e:	99 8b       	std	Y+17, r25	; 0x11
     f50:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f52:	ce 01       	movw	r24, r28
     f54:	c3 de       	rcall	.-634    	; 0xcdc <CDC_Device_Event_Stub>
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f58:	80 91 51 01 	lds	r24, 0x0151
     f5c:	81 32       	cpi	r24, 0x21	; 33
     f5e:	51 f4       	brne	.+20     	; 0xf74 <CDC_Device_ProcessControlRequest+0x154>
     f60:	80 91 e8 00 	lds	r24, 0x00E8
     f64:	87 7f       	andi	r24, 0xF7	; 247
     f66:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f6a:	73 db       	rcall	.-2330   	; 0x652 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f6c:	ce 01       	movw	r24, r28
     f6e:	60 91 53 01 	lds	r22, 0x0153
     f72:	b4 de       	rcall	.-664    	; 0xcdc <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <itoa>:
     f7a:	fb 01       	movw	r30, r22
     f7c:	9f 01       	movw	r18, r30
     f7e:	e8 94       	clt
     f80:	42 30       	cpi	r20, 0x02	; 2
     f82:	bc f0       	brlt	.+46     	; 0xfb2 <itoa+0x38>
     f84:	45 32       	cpi	r20, 0x25	; 37
     f86:	ac f4       	brge	.+42     	; 0xfb2 <itoa+0x38>
     f88:	4a 30       	cpi	r20, 0x0A	; 10
     f8a:	29 f4       	brne	.+10     	; 0xf96 <itoa+0x1c>
     f8c:	97 fb       	bst	r25, 7
     f8e:	1e f4       	brtc	.+6      	; 0xf96 <itoa+0x1c>
     f90:	90 95       	com	r25
     f92:	81 95       	neg	r24
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	64 2f       	mov	r22, r20
     f98:	77 27       	eor	r23, r23
     f9a:	46 d0       	rcall	.+140    	; 0x1028 <__udivmodhi4>
     f9c:	80 5d       	subi	r24, 0xD0	; 208
     f9e:	8a 33       	cpi	r24, 0x3A	; 58
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <itoa+0x2a>
     fa2:	89 5d       	subi	r24, 0xD9	; 217
     fa4:	81 93       	st	Z+, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	a9 f7       	brne	.-22     	; 0xf96 <itoa+0x1c>
     fac:	16 f4       	brtc	.+4      	; 0xfb2 <itoa+0x38>
     fae:	5d e2       	ldi	r21, 0x2D	; 45
     fb0:	51 93       	st	Z+, r21
     fb2:	10 82       	st	Z, r1
     fb4:	c9 01       	movw	r24, r18
     fb6:	28 c0       	rjmp	.+80     	; 0x1008 <strrev>

00000fb8 <fputs>:
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	7c 01       	movw	r14, r24
     fc6:	8b 01       	movw	r16, r22
     fc8:	db 01       	movw	r26, r22
     fca:	13 96       	adiw	r26, 0x03	; 3
     fcc:	8c 91       	ld	r24, X
     fce:	81 fd       	sbrc	r24, 1
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <fputs+0x20>
     fd2:	cf ef       	ldi	r28, 0xFF	; 255
     fd4:	df ef       	ldi	r29, 0xFF	; 255
     fd6:	13 c0       	rjmp	.+38     	; 0xffe <fputs+0x46>
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	d0 e0       	ldi	r29, 0x00	; 0
     fdc:	0b c0       	rjmp	.+22     	; 0xff4 <fputs+0x3c>
     fde:	d8 01       	movw	r26, r16
     fe0:	18 96       	adiw	r26, 0x08	; 8
     fe2:	ed 91       	ld	r30, X+
     fe4:	fc 91       	ld	r31, X
     fe6:	19 97       	sbiw	r26, 0x09	; 9
     fe8:	b8 01       	movw	r22, r16
     fea:	09 95       	icall
     fec:	89 2b       	or	r24, r25
     fee:	11 f0       	breq	.+4      	; 0xff4 <fputs+0x3c>
     ff0:	cf ef       	ldi	r28, 0xFF	; 255
     ff2:	df ef       	ldi	r29, 0xFF	; 255
     ff4:	f7 01       	movw	r30, r14
     ff6:	81 91       	ld	r24, Z+
     ff8:	7f 01       	movw	r14, r30
     ffa:	88 23       	and	r24, r24
     ffc:	81 f7       	brne	.-32     	; 0xfde <fputs+0x26>
     ffe:	ce 01       	movw	r24, r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	e6 e0       	ldi	r30, 0x06	; 6
    1006:	30 c0       	rjmp	.+96     	; 0x1068 <__epilogue_restores__+0x18>

00001008 <strrev>:
    1008:	dc 01       	movw	r26, r24
    100a:	fc 01       	movw	r30, r24
    100c:	67 2f       	mov	r22, r23
    100e:	71 91       	ld	r23, Z+
    1010:	77 23       	and	r23, r23
    1012:	e1 f7       	brne	.-8      	; 0x100c <strrev+0x4>
    1014:	32 97       	sbiw	r30, 0x02	; 2
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <strrev+0x18>
    1018:	7c 91       	ld	r23, X
    101a:	6d 93       	st	X+, r22
    101c:	70 83       	st	Z, r23
    101e:	62 91       	ld	r22, -Z
    1020:	ae 17       	cp	r26, r30
    1022:	bf 07       	cpc	r27, r31
    1024:	c8 f3       	brcs	.-14     	; 0x1018 <strrev+0x10>
    1026:	08 95       	ret

00001028 <__udivmodhi4>:
    1028:	aa 1b       	sub	r26, r26
    102a:	bb 1b       	sub	r27, r27
    102c:	51 e1       	ldi	r21, 0x11	; 17
    102e:	07 c0       	rjmp	.+14     	; 0x103e <__udivmodhi4_ep>

00001030 <__udivmodhi4_loop>:
    1030:	aa 1f       	adc	r26, r26
    1032:	bb 1f       	adc	r27, r27
    1034:	a6 17       	cp	r26, r22
    1036:	b7 07       	cpc	r27, r23
    1038:	10 f0       	brcs	.+4      	; 0x103e <__udivmodhi4_ep>
    103a:	a6 1b       	sub	r26, r22
    103c:	b7 0b       	sbc	r27, r23

0000103e <__udivmodhi4_ep>:
    103e:	88 1f       	adc	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	5a 95       	dec	r21
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__udivmodhi4_loop>
    1046:	80 95       	com	r24
    1048:	90 95       	com	r25
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	08 95       	ret

00001050 <__epilogue_restores__>:
    1050:	2a 88       	ldd	r2, Y+18	; 0x12
    1052:	39 88       	ldd	r3, Y+17	; 0x11
    1054:	48 88       	ldd	r4, Y+16	; 0x10
    1056:	5f 84       	ldd	r5, Y+15	; 0x0f
    1058:	6e 84       	ldd	r6, Y+14	; 0x0e
    105a:	7d 84       	ldd	r7, Y+13	; 0x0d
    105c:	8c 84       	ldd	r8, Y+12	; 0x0c
    105e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1060:	aa 84       	ldd	r10, Y+10	; 0x0a
    1062:	b9 84       	ldd	r11, Y+9	; 0x09
    1064:	c8 84       	ldd	r12, Y+8	; 0x08
    1066:	df 80       	ldd	r13, Y+7	; 0x07
    1068:	ee 80       	ldd	r14, Y+6	; 0x06
    106a:	fd 80       	ldd	r15, Y+5	; 0x05
    106c:	0c 81       	ldd	r16, Y+4	; 0x04
    106e:	1b 81       	ldd	r17, Y+3	; 0x03
    1070:	aa 81       	ldd	r26, Y+2	; 0x02
    1072:	b9 81       	ldd	r27, Y+1	; 0x01
    1074:	ce 0f       	add	r28, r30
    1076:	d1 1d       	adc	r29, r1
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	ed 01       	movw	r28, r26
    1084:	08 95       	ret

00001086 <_exit>:
    1086:	f8 94       	cli

00001088 <__stop_program>:
    1088:	ff cf       	rjmp	.-2      	; 0x1088 <__stop_program>
