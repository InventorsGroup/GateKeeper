
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000011cc  00001260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e6  0080013a  0080013a  0000129a  2**0
                  ALLOC
  3 .debug_aranges 000004d0  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d34  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000828f  00000000  00000000  0000249e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021e7  00000000  00000000  0000a72d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000630b  00000000  00000000  0000c914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000760  00000000  00000000  00012c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003406  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003440  00000000  00000000  00016786  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005c0  00000000  00000000  00019bc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	while (*s) 
		USARTWriteChar(*s++);
}

unsigned char USARTReadChar( void ) 
{
       0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       2:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       4:	99 c0       	rjmp	.+306    	; 0x138 <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	c9 c0       	rjmp	.+402    	; 0x19c <__vector_2>
       a:	00 00       	nop
       c:	95 c0       	rjmp	.+298    	; 0x138 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c0       	rjmp	.+294    	; 0x138 <__bad_interrupt>
      12:	00 00       	nop
      14:	91 c0       	rjmp	.+290    	; 0x138 <__bad_interrupt>
      16:	00 00       	nop
      18:	8f c0       	rjmp	.+286    	; 0x138 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8d c0       	rjmp	.+282    	; 0x138 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8b c0       	rjmp	.+278    	; 0x138 <__bad_interrupt>
      22:	00 00       	nop
      24:	89 c0       	rjmp	.+274    	; 0x138 <__bad_interrupt>
      26:	00 00       	nop
      28:	87 c0       	rjmp	.+270    	; 0x138 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cb c4       	rjmp	.+2454   	; 0x9c4 <__vector_11>
      2e:	00 00       	nop
      30:	8e c4       	rjmp	.+2332   	; 0x94e <__vector_12>
      32:	00 00       	nop
      34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
      36:	00 00       	nop
      38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7b c0       	rjmp	.+246    	; 0x138 <__bad_interrupt>
      42:	00 00       	nop
      44:	79 c0       	rjmp	.+242    	; 0x138 <__bad_interrupt>
      46:	00 00       	nop
      48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__vector_19>
      4e:	00 00       	nop
      50:	73 c0       	rjmp	.+230    	; 0x138 <__bad_interrupt>
      52:	00 00       	nop
      54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
      56:	00 00       	nop
      58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d1 c1       	rjmp	.+930    	; 0x400 <__vector_23>
      5e:	00 00       	nop
      60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
      62:	00 00       	nop
      64:	69 c0       	rjmp	.+210    	; 0x138 <__bad_interrupt>
      66:	00 00       	nop
      68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
      6e:	00 00       	nop
      70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      84:	dc 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      96:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      b6:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <ProductString>:
      e2:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      f2:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000100 <__ctors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	d2 e0       	ldi	r29, 0x02	; 2
     108:	de bf       	out	0x3e, r29	; 62
     10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
     10c:	11 e0       	ldi	r17, 0x01	; 1
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	ec ec       	ldi	r30, 0xCC	; 204
     114:	f1 e1       	ldi	r31, 0x11	; 17
     116:	02 c0       	rjmp	.+4      	; 0x11c <.do_copy_data_start>

00000118 <.do_copy_data_loop>:
     118:	05 90       	lpm	r0, Z+
     11a:	0d 92       	st	X+, r0

0000011c <.do_copy_data_start>:
     11c:	aa 33       	cpi	r26, 0x3A	; 58
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <.do_copy_data_loop>

00000122 <__do_clear_bss>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	aa e3       	ldi	r26, 0x3A	; 58
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a0 32       	cpi	r26, 0x20	; 32
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	bf d1       	rcall	.+894    	; 0x4b2 <main>
     134:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <_exit>

00000138 <__bad_interrupt>:
     138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <__vector_19>:


static volatile int8_t tim_cnter = 0;
static volatile int8_t send_ati = 0;
ISR(TIMER0_COMPA_vect)
{
     13a:	1f 92       	push	r1
     13c:	0f 92       	push	r0
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	0f 92       	push	r0
     142:	11 24       	eor	r1, r1
     144:	8f 93       	push	r24
     146:	9f 93       	push	r25
	tim_cnter++;
     148:	80 91 3c 01 	lds	r24, 0x013C
     14c:	8f 5f       	subi	r24, 0xFF	; 255
     14e:	80 93 3c 01 	sts	0x013C, r24
	if(tim_cnter > 100)
     152:	80 91 3c 01 	lds	r24, 0x013C
     156:	85 36       	cpi	r24, 0x65	; 101
     158:	34 f0       	brlt	.+12     	; 0x166 <__vector_19+0x2c>
	{
		PORTB ^= (1 << PB6);
     15a:	85 b1       	in	r24, 0x05	; 5
     15c:	90 e4       	ldi	r25, 0x40	; 64
     15e:	89 27       	eor	r24, r25
     160:	85 b9       	out	0x05, r24	; 5
		tim_cnter = 0;
     162:	10 92 3c 01 	sts	0x013C, r1
			bufferLength = 1;
			send_ati = 0;
		}
	
	}*/
}
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	0f 90       	pop	r0
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	0f 90       	pop	r0
     170:	1f 90       	pop	r1
     172:	18 95       	reti

00000174 <USARTWriteChar>:
{
	PORTB |= (1 << PB5);
	uart_puts("ATI\r");
}
void USARTWriteChar(unsigned char data)
{
     174:	98 2f       	mov	r25, r24
   while(!(UCSR1A & (1<<UDRE1)));
     176:	80 91 c8 00 	lds	r24, 0x00C8
     17a:	85 ff       	sbrs	r24, 5
     17c:	fc cf       	rjmp	.-8      	; 0x176 <USARTWriteChar+0x2>
   UDR1=data;
     17e:	90 93 ce 00 	sts	0x00CE, r25
}
     182:	08 95       	ret

00000184 <uart_puts>:

void uart_puts(const char *s )
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ec 01       	movw	r28, r24
     18a:	02 c0       	rjmp	.+4      	; 0x190 <uart_puts+0xc>
	while (*s) 
		USARTWriteChar(*s++);
     18c:	21 96       	adiw	r28, 0x01	; 1
     18e:	f2 df       	rcall	.-28     	; 0x174 <USARTWriteChar>
   UDR1=data;
}

void uart_puts(const char *s )
{
	while (*s) 
     190:	88 81       	ld	r24, Y
     192:	88 23       	and	r24, r24
     194:	d9 f7       	brne	.-10     	; 0x18c <uart_puts+0x8>
		USARTWriteChar(*s++);
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <__vector_2>:
	
	}*/
}

ISR(INT1_vect)
{
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	2f 93       	push	r18
     1a8:	3f 93       	push	r19
     1aa:	4f 93       	push	r20
     1ac:	5f 93       	push	r21
     1ae:	6f 93       	push	r22
     1b0:	7f 93       	push	r23
     1b2:	8f 93       	push	r24
     1b4:	9f 93       	push	r25
     1b6:	af 93       	push	r26
     1b8:	bf 93       	push	r27
     1ba:	ef 93       	push	r30
     1bc:	ff 93       	push	r31
	PORTB |= (1 << PB5);
     1be:	2d 9a       	sbi	0x05, 5	; 5
	uart_puts("ATI\r");
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	df df       	rcall	.-66     	; 0x184 <uart_puts>
}
     1c6:	ff 91       	pop	r31
     1c8:	ef 91       	pop	r30
     1ca:	bf 91       	pop	r27
     1cc:	af 91       	pop	r26
     1ce:	9f 91       	pop	r25
     1d0:	8f 91       	pop	r24
     1d2:	7f 91       	pop	r23
     1d4:	6f 91       	pop	r22
     1d6:	5f 91       	pop	r21
     1d8:	4f 91       	pop	r20
     1da:	3f 91       	pop	r19
     1dc:	2f 91       	pop	r18
     1de:	0f 90       	pop	r0
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	0f 90       	pop	r0
     1e4:	1f 90       	pop	r1
     1e6:	18 95       	reti

000001e8 <openGate>:
	return UDR1;
}

void openGate()
{
	PORTC |= (1 << PC7);
     1e8:	47 9a       	sbi	0x08, 7	; 8
     1ea:	80 e3       	ldi	r24, 0x30	; 48
     1ec:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ee:	28 ec       	ldi	r18, 0xC8	; 200
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	f9 01       	movw	r30, r18
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <openGate+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <openGate+0xa>
	_delay_ms(3000);
	PORTC &= ~(1 << PC7);
     1fc:	47 98       	cbi	0x08, 7	; 8
}
     1fe:	08 95       	ret

00000200 <stringCheck>:
}

static volatile int8_t stringBuffer[100];
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
     200:	dc 01       	movw	r26, r24
	int i = 1;
	
	while(*s != phoneBuffer[i])
     202:	8c 91       	ld	r24, X
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0b c0       	rjmp	.+22     	; 0x224 <stringCheck+0x24>
	{
		i++;
     20e:	4f 5f       	subi	r20, 0xFF	; 255
     210:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
     212:	80 91 39 01 	lds	r24, 0x0139
     216:	99 27       	eor	r25, r25
     218:	87 fd       	sbrc	r24, 7
     21a:	90 95       	com	r25
     21c:	48 17       	cp	r20, r24
     21e:	59 07       	cpc	r21, r25
     220:	0c f0       	brlt	.+2      	; 0x224 <stringCheck+0x24>
     222:	45 c0       	rjmp	.+138    	; 0x2ae <stringCheck+0xae>
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
	int i = 1;
	
	while(*s != phoneBuffer[i])
     224:	fa 01       	movw	r30, r20
     226:	e5 5b       	subi	r30, 0xB5	; 181
     228:	fe 4f       	sbci	r31, 0xFE	; 254
     22a:	80 81       	ld	r24, Z
     22c:	99 27       	eor	r25, r25
     22e:	87 fd       	sbrc	r24, 7
     230:	90 95       	com	r25
     232:	28 17       	cp	r18, r24
     234:	39 07       	cpc	r19, r25
     236:	59 f7       	brne	.-42     	; 0x20e <stringCheck+0xe>
     238:	16 c0       	rjmp	.+44     	; 0x266 <stringCheck+0x66>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     23a:	fa 01       	movw	r30, r20
     23c:	e5 5b       	subi	r30, 0xB5	; 181
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	80 81       	ld	r24, Z
     242:	99 27       	eor	r25, r25
     244:	87 fd       	sbrc	r24, 7
     246:	90 95       	com	r25
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	82 17       	cp	r24, r18
     24c:	93 07       	cpc	r25, r19
     24e:	79 f5       	brne	.+94     	; 0x2ae <stringCheck+0xae>
			return 0;
		i++;			
     250:	4f 5f       	subi	r20, 0xFF	; 255
     252:	5f 4f       	sbci	r21, 0xFF	; 255
		
		if(i > bufferLength-1)
     254:	80 91 39 01 	lds	r24, 0x0139
     258:	99 27       	eor	r25, r25
     25a:	87 fd       	sbrc	r24, 7
     25c:	90 95       	com	r25
     25e:	48 17       	cp	r20, r24
     260:	59 07       	cpc	r21, r25
     262:	2c f5       	brge	.+74     	; 0x2ae <stringCheck+0xae>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     264:	11 96       	adiw	r26, 0x01	; 1
	{
		i++;
		if(i > bufferLength-1)
			return 0;
	}
	while (*s)
     266:	2c 91       	ld	r18, X
     268:	22 23       	and	r18, r18
     26a:	39 f7       	brne	.-50     	; 0x23a <stringCheck+0x3a>
		
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
     26c:	10 92 3b 01 	sts	0x013B, r1
     270:	13 c0       	rjmp	.+38     	; 0x298 <stringCheck+0x98>
	while(i < bufferLength -1)
	{
		stringBuffer[stringCnter] = phoneBuffer[i];
     272:	e0 91 3b 01 	lds	r30, 0x013B
     276:	ff 27       	eor	r31, r31
     278:	e7 fd       	sbrc	r30, 7
     27a:	f0 95       	com	r31
     27c:	da 01       	movw	r26, r20
     27e:	a5 5b       	subi	r26, 0xB5	; 181
     280:	be 4f       	sbci	r27, 0xFE	; 254
     282:	8c 91       	ld	r24, X
     284:	e1 55       	subi	r30, 0x51	; 81
     286:	fe 4f       	sbci	r31, 0xFE	; 254
     288:	80 83       	st	Z, r24
		stringCnter++;
     28a:	80 91 3b 01 	lds	r24, 0x013B
     28e:	8f 5f       	subi	r24, 0xFF	; 255
     290:	80 93 3b 01 	sts	0x013B, r24
		i++;
     294:	4f 5f       	subi	r20, 0xFF	; 255
     296:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
	while(i < bufferLength -1)
     298:	80 91 39 01 	lds	r24, 0x0139
     29c:	99 27       	eor	r25, r25
     29e:	87 fd       	sbrc	r24, 7
     2a0:	90 95       	com	r25
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	48 17       	cp	r20, r24
     2a6:	59 07       	cpc	r21, r25
     2a8:	24 f3       	brlt	.-56     	; 0x272 <stringCheck+0x72>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	08 95       	ret
     2ae:	80 e0       	ldi	r24, 0x00	; 0
		stringCnter++;
		i++;
	}
	
	return 1;
}
     2b0:	08 95       	ret

000002b2 <findRinBuff>:

unsigned char findRinBuff()
{

	if(bufferLength < 2)
     2b2:	80 91 39 01 	lds	r24, 0x0139
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	94 f0       	brlt	.+36     	; 0x2de <findRinBuff+0x2c>
     2ba:	22 e0       	ldi	r18, 0x02	; 2
     2bc:	06 c0       	rjmp	.+12     	; 0x2ca <findRinBuff+0x18>
		return 0;
		
	for(unsigned char i = 2; i < bufferLength; i++)
	{
		if(phoneBuffer[i] == 0x0D)
     2be:	e5 5b       	subi	r30, 0xB5	; 181
     2c0:	fe 4f       	sbci	r31, 0xFE	; 254
     2c2:	80 81       	ld	r24, Z
     2c4:	8d 30       	cpi	r24, 0x0D	; 13
     2c6:	61 f0       	breq	.+24     	; 0x2e0 <findRinBuff+0x2e>
{

	if(bufferLength < 2)
		return 0;
		
	for(unsigned char i = 2; i < bufferLength; i++)
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	e2 2f       	mov	r30, r18
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 91 39 01 	lds	r24, 0x0139
     2d2:	99 27       	eor	r25, r25
     2d4:	87 fd       	sbrc	r24, 7
     2d6:	90 95       	com	r25
     2d8:	e8 17       	cp	r30, r24
     2da:	f9 07       	cpc	r31, r25
     2dc:	84 f3       	brlt	.-32     	; 0x2be <findRinBuff+0xc>
     2de:	20 e0       	ldi	r18, 0x00	; 0
			return i;
	}
	
	return 0;

}
     2e0:	82 2f       	mov	r24, r18
     2e2:	08 95       	ret

000002e4 <bufferCheck>:

void bufferCheck()
{

	if(bufferLength > 1 && phoneBuffer[1] != 0x0D)
     2e4:	80 91 39 01 	lds	r24, 0x0139
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	3c f0       	brlt	.+14     	; 0x2fa <bufferCheck+0x16>
     2ec:	80 91 4c 01 	lds	r24, 0x014C
     2f0:	8d 30       	cpi	r24, 0x0D	; 13
     2f2:	19 f0       	breq	.+6      	; 0x2fa <bufferCheck+0x16>
		bufferLength = 1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 39 01 	sts	0x0139, r24

	if(findRinBuff() > 0)
     2fa:	db df       	rcall	.-74     	; 0x2b2 <findRinBuff>
     2fc:	88 23       	and	r24, r24
     2fe:	f1 f0       	breq	.+60     	; 0x33c <__stack+0x3d>
	{
		if(stringCheck("RING") == 1)
     300:	85 e0       	ldi	r24, 0x05	; 5
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	7d df       	rcall	.-262    	; 0x200 <stringCheck>
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	61 f4       	brne	.+24     	; 0x322 <__stack+0x23>
		{
			uart_puts("ATH\r");
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	3a df       	rcall	.-396    	; 0x184 <uart_puts>
     310:	88 e8       	ldi	r24, 0x88	; 136
     312:	93 e1       	ldi	r25, 0x13	; 19
     314:	28 ec       	ldi	r18, 0xC8	; 200
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	f9 01       	movw	r30, r18
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <__stack+0x1b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     31e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     320:	d9 f7       	brne	.-10     	; 0x318 <__stack+0x19>
			_delay_ms(500);
		}
		
		if(stringCheck("+CLCC: 1,1,6,") == 1)
     322:	8f e0       	ldi	r24, 0x0F	; 15
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	6c df       	rcall	.-296    	; 0x200 <stringCheck>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	29 f4       	brne	.+10     	; 0x336 <__stack+0x37>
		{	
		
			if(stringBuffer[21] != '"') // jeśli jest wpisany opis
     32c:	80 91 c4 01 	lds	r24, 0x01C4
     330:	82 32       	cpi	r24, 0x22	; 34
     332:	09 f0       	breq	.+2      	; 0x336 <__stack+0x37>
			{
				openGate();
     334:	59 df       	rcall	.-334    	; 0x1e8 <openGate>
			}
			
		}
		
		bufferLength = 1;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 39 01 	sts	0x0139, r24
     33c:	08 95       	ret

0000033e <USARTInit>:


void USARTInit(unsigned int ubrr_value)
{
   
   UCSR1A |= (1 << U2X1);
     33e:	e8 ec       	ldi	r30, 0xC8	; 200
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	20 81       	ld	r18, Z
     344:	22 60       	ori	r18, 0x02	; 2
     346:	20 83       	st	Z, r18
   UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
     348:	e9 ec       	ldi	r30, 0xC9	; 201
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	20 81       	ld	r18, Z
     34e:	28 69       	ori	r18, 0x98	; 152
     350:	20 83       	st	Z, r18
   UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     352:	ea ec       	ldi	r30, 0xCA	; 202
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	20 81       	ld	r18, Z
     358:	26 60       	ori	r18, 0x06	; 6
     35a:	20 83       	st	Z, r18
   UBRR1 = ubrr_value;
     35c:	90 93 cd 00 	sts	0x00CD, r25
     360:	80 93 cc 00 	sts	0x00CC, r24
   DDRD |= (1 << PD3);
     364:	53 9a       	sbi	0x0a, 3	; 10
}
     366:	08 95       	ret

00000368 <EVENT_USB_Device_Connect>:
}

void EVENT_USB_Device_Connect(void)
{

}
     368:	08 95       	ret

0000036a <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{

}
     36a:	08 95       	ret

0000036c <EVENT_USB_Device_ControlRequest>:
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
}

void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     36c:	8d e1       	ldi	r24, 0x1D	; 29
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	3b c6       	rjmp	.+3190   	; 0xfe8 <CDC_Device_ProcessControlRequest>

00000372 <EVENT_USB_Device_ConfigurationChanged>:
{

}

void EVENT_USB_Device_ConfigurationChanged(void)
{
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     376:	00 91 38 01 	lds	r16, 0x0138
     37a:	8d e1       	ldi	r24, 0x1D	; 29
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0d d6       	rcall	.+3098   	; 0xf9a <CDC_Device_ConfigureEndpoints>
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	80 23       	and	r24, r16
     388:	91 23       	and	r25, r17
     38a:	89 2b       	or	r24, r25
     38c:	09 f0       	breq	.+2      	; 0x390 <EVENT_USB_Device_ConfigurationChanged+0x1e>
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	20 93 38 01 	sts	0x0138, r18
}
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	08 95       	ret

0000039a <SetupHardware>:
   DDRD |= (1 << PD3);
}

void SetupHardware(void)
{
	MCUSR &= ~(1 << WDRF);
     39a:	84 b7       	in	r24, 0x34	; 52
     39c:	87 7f       	andi	r24, 0xF7	; 247
     39e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3a0:	88 e1       	ldi	r24, 0x18	; 24
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	80 93 60 00 	sts	0x0060, r24
     3aa:	10 92 60 00 	sts	0x0060, r1
     3ae:	0f be       	out	0x3f, r0	; 63
	
	DDRB = (1 << PB5) | (1 << PB6) | (1 << PB4);	
     3b0:	80 e7       	ldi	r24, 0x70	; 112
     3b2:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << PC7);
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC2);
     3b8:	42 9a       	sbi	0x08, 2	; 8
	
	
	clock_prescale_set(0);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	20 93 61 00 	sts	0x0061, r18
     3c8:	80 93 61 00 	sts	0x0061, r24
     3cc:	0f be       	out	0x3f, r0	; 63

	USB_Init();	
     3ce:	b0 d2       	rcall	.+1376   	; 0x930 <USB_Init>
	USARTInit(25);
     3d0:	89 e1       	ldi	r24, 0x19	; 25
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	b4 df       	rcall	.-152    	; 0x33e <USARTInit>
	
	TCCR0A |= (1 << WGM01);
     3d6:	84 b5       	in	r24, 0x24	; 36
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02);
     3dc:	85 b5       	in	r24, 0x25	; 37
     3de:	85 60       	ori	r24, 0x05	; 5
     3e0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
     3e2:	ee e6       	ldi	r30, 0x6E	; 110
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	80 83       	st	Z, r24
	OCR0A = 255;
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	87 bd       	out	0x27, r24	; 39
	
	DDRD &= ~(1 << PD1);
     3f0:	51 98       	cbi	0x0a, 1	; 10
	EICRA |= (1 << ISC11) | (1 << ISC10);
     3f2:	e9 e6       	ldi	r30, 0x69	; 105
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	8c 60       	ori	r24, 0x0C	; 12
     3fa:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
     3fc:	e9 9a       	sbi	0x1d, 1	; 29
}
     3fe:	08 95       	ret

00000400 <__vector_23>:
	PORTC &= ~(1 << PC7);
}


SIGNAL(USART1_RX_vect)
{
     400:	1f 92       	push	r1
     402:	0f 92       	push	r0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	0f 92       	push	r0
     408:	11 24       	eor	r1, r1
     40a:	1f 93       	push	r17
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	00 d0       	rcall	.+0      	; 0x42a <__vector_23+0x2a>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
	int8_t c = UDR1;
     42e:	10 91 ce 00 	lds	r17, 0x00CE
	int16_t c2 = c;
	if(ConfigSuccess && bDebug)
     432:	80 91 38 01 	lds	r24, 0x0138
     436:	88 23       	and	r24, r24
     438:	79 f0       	breq	.+30     	; 0x458 <__vector_23+0x58>
     43a:	80 91 3a 01 	lds	r24, 0x013A
     43e:	88 23       	and	r24, r24
     440:	59 f0       	breq	.+22     	; 0x458 <__vector_23+0x58>


SIGNAL(USART1_RX_vect)
{
	int8_t c = UDR1;
	int16_t c2 = c;
     442:	81 2f       	mov	r24, r17
     444:	99 27       	eor	r25, r25
     446:	87 fd       	sbrc	r24, 7
     448:	90 95       	com	r25
     44a:	9a 83       	std	Y+2, r25	; 0x02
     44c:	89 83       	std	Y+1, r24	; 0x01
	if(ConfigSuccess && bDebug)
		fputs(&c2, &USBSerialStream); // do debugu
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	6d e3       	ldi	r22, 0x3D	; 61
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	75 d6       	rcall	.+3306   	; 0x1142 <fputs>
	
		
	if(bufferLength == 1 && c != 0x0D || bufferLength > 98)
     458:	80 91 39 01 	lds	r24, 0x0139
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	11 f4       	brne	.+4      	; 0x464 <__vector_23+0x64>
     460:	1d 30       	cpi	r17, 0x0D	; 13
     462:	89 f4       	brne	.+34     	; 0x486 <__vector_23+0x86>
     464:	80 91 39 01 	lds	r24, 0x0139
     468:	83 36       	cpi	r24, 0x63	; 99
     46a:	6c f4       	brge	.+26     	; 0x486 <__vector_23+0x86>
		return;
	
	phoneBuffer[bufferLength] = c;
     46c:	e0 91 39 01 	lds	r30, 0x0139
     470:	ff 27       	eor	r31, r31
     472:	e7 fd       	sbrc	r30, 7
     474:	f0 95       	com	r31
     476:	e5 5b       	subi	r30, 0xB5	; 181
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	10 83       	st	Z, r17
	bufferLength++;		
     47c:	80 91 39 01 	lds	r24, 0x0139
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	80 93 39 01 	sts	0x0139, r24
}
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	cf 91       	pop	r28
     48c:	df 91       	pop	r29
     48e:	ff 91       	pop	r31
     490:	ef 91       	pop	r30
     492:	bf 91       	pop	r27
     494:	af 91       	pop	r26
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	7f 91       	pop	r23
     49c:	6f 91       	pop	r22
     49e:	5f 91       	pop	r21
     4a0:	4f 91       	pop	r20
     4a2:	3f 91       	pop	r19
     4a4:	2f 91       	pop	r18
     4a6:	1f 91       	pop	r17
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <main>:
		bufferLength = 1;
	}
}

int main(void)
{
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
	int16_t b;
	
	SetupHardware();    
     4b8:	70 df       	rcall	.-288    	; 0x39a <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);	
     4ba:	8d e1       	ldi	r24, 0x1D	; 29
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	6d e3       	ldi	r22, 0x3D	; 61
     4c0:	71 e0       	ldi	r23, 0x01	; 1
     4c2:	d2 d4       	rcall	.+2468   	; 0xe68 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4c4:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     4c6:	80 e5       	ldi	r24, 0x50	; 80
     4c8:	93 ec       	ldi	r25, 0xC3	; 195
     4ca:	28 ec       	ldi	r18, 0xC8	; 200
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	f9 01       	movw	r30, r18
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <main+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d6:	d9 f7       	brne	.-10     	; 0x4ce <main+0x1c>
	GlobalInterruptEnable();
	
	_delay_ms(5000);
	uart_puts("ATI\r");
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	53 de       	rcall	.-858    	; 0x184 <uart_puts>
     4de:	88 e8       	ldi	r24, 0x88	; 136
     4e0:	93 e1       	ldi	r25, 0x13	; 19
     4e2:	28 ec       	ldi	r18, 0xC8	; 200
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	31 97       	sbiw	r30, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ee:	d9 f7       	brne	.-10     	; 0x4e6 <main+0x34>
			
			if(b > -1)
			{
			//	fputs(&b, &USBSerialStream);
				if(b == 'd')
					bDebug = !bDebug;
     4f0:	11 e0       	ldi	r17, 0x01	; 1
	uart_puts("ATI\r");
	_delay_ms(500);

	for (;;)
	{
		if(ConfigSuccess)
     4f2:	80 91 38 01 	lds	r24, 0x0138
     4f6:	88 23       	and	r24, r24
     4f8:	69 f1       	breq	.+90     	; 0x554 <main+0xa2>
		{
			b = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     4fa:	8d e1       	ldi	r24, 0x1D	; 29
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	86 d4       	rcall	.+2316   	; 0xe0c <CDC_Device_ReceiveByte>
			
			if(b > -1)
     500:	97 fd       	sbrc	r25, 7
     502:	24 c0       	rjmp	.+72     	; 0x54c <main+0x9a>
			{
			//	fputs(&b, &USBSerialStream);
				if(b == 'd')
     504:	84 36       	cpi	r24, 0x64	; 100
     506:	91 05       	cpc	r25, r1
     508:	31 f4       	brne	.+12     	; 0x516 <main+0x64>
					bDebug = !bDebug;
     50a:	80 91 3a 01 	lds	r24, 0x013A
     50e:	81 27       	eor	r24, r17
     510:	80 93 3a 01 	sts	0x013A, r24
     514:	1b c0       	rjmp	.+54     	; 0x54c <main+0x9a>
				else
				if(b == 'c')
     516:	83 36       	cpi	r24, 0x63	; 99
     518:	91 05       	cpc	r25, r1
     51a:	b9 f4       	brne	.+46     	; 0x54a <main+0x98>
     51c:	c1 e0       	ldi	r28, 0x01	; 1
     51e:	d0 e0       	ldi	r29, 0x00	; 0
     520:	0b c0       	rjmp	.+22     	; 0x538 <main+0x86>
				{
					for(int e = 1; e < bufferLength; e++)
						fputs(((int16_t)phoneBuffer[e]), &USBSerialStream);
     522:	fe 01       	movw	r30, r28
     524:	e5 5b       	subi	r30, 0xB5	; 181
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	80 81       	ld	r24, Z
     52a:	99 27       	eor	r25, r25
     52c:	87 fd       	sbrc	r24, 7
     52e:	90 95       	com	r25
     530:	6d e3       	ldi	r22, 0x3D	; 61
     532:	71 e0       	ldi	r23, 0x01	; 1
     534:	06 d6       	rcall	.+3084   	; 0x1142 <fputs>
				if(b == 'd')
					bDebug = !bDebug;
				else
				if(b == 'c')
				{
					for(int e = 1; e < bufferLength; e++)
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	80 91 39 01 	lds	r24, 0x0139
     53c:	99 27       	eor	r25, r25
     53e:	87 fd       	sbrc	r24, 7
     540:	90 95       	com	r25
     542:	c8 17       	cp	r28, r24
     544:	d9 07       	cpc	r29, r25
     546:	6c f3       	brlt	.-38     	; 0x522 <main+0x70>
     548:	01 c0       	rjmp	.+2      	; 0x54c <main+0x9a>
						fputs(((int16_t)phoneBuffer[e]), &USBSerialStream);
				}
				else
					USARTWriteChar(b);	
     54a:	14 de       	rcall	.-984    	; 0x174 <USARTWriteChar>
			}
			
			CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     54c:	8d e1       	ldi	r24, 0x1D	; 29
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	d7 d4       	rcall	.+2478   	; 0xf00 <CDC_Device_USBTask>
			USB_USBTask();
     552:	47 d4       	rcall	.+2190   	; 0xde2 <USB_USBTask>
		}
		bufferCheck();
     554:	c7 de       	rcall	.-626    	; 0x2e4 <bufferCheck>
     556:	cd cf       	rjmp	.-102    	; 0x4f2 <main+0x40>

00000558 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     558:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     55a:	92 30       	cpi	r25, 0x02	; 2
     55c:	49 f0       	breq	.+18     	; 0x570 <CALLBACK_USB_GetDescriptor+0x18>
     55e:	93 30       	cpi	r25, 0x03	; 3
     560:	61 f0       	breq	.+24     	; 0x57a <CALLBACK_USB_GetDescriptor+0x22>
     562:	91 30       	cpi	r25, 0x01	; 1
     564:	f9 f4       	brne	.+62     	; 0x5a4 <CALLBACK_USB_GetDescriptor+0x4c>
     566:	e4 e7       	ldi	r30, 0x74	; 116
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	22 e1       	ldi	r18, 0x12	; 18
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	1e c0       	rjmp	.+60     	; 0x5ac <CALLBACK_USB_GetDescriptor+0x54>
     570:	e6 e8       	ldi	r30, 0x86	; 134
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	2e e3       	ldi	r18, 0x3E	; 62
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	19 c0       	rjmp	.+50     	; 0x5ac <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	49 f0       	breq	.+18     	; 0x590 <CALLBACK_USB_GetDescriptor+0x38>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	18 f0       	brcs	.+6      	; 0x588 <CALLBACK_USB_GetDescriptor+0x30>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	79 f4       	brne	.+30     	; 0x5a4 <CALLBACK_USB_GetDescriptor+0x4c>
     586:	08 c0       	rjmp	.+16     	; 0x598 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     588:	e4 ec       	ldi	r30, 0xC4	; 196
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	84 91       	lpm	r24, Z+
     58e:	07 c0       	rjmp	.+14     	; 0x59e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     590:	e8 ec       	ldi	r30, 0xC8	; 200
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	84 91       	lpm	r24, Z+
     596:	03 c0       	rjmp	.+6      	; 0x59e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     598:	e2 ee       	ldi	r30, 0xE2	; 226
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	84 91       	lpm	r24, Z+
     59e:	28 2f       	mov	r18, r24
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <CALLBACK_USB_GetDescriptor+0x54>
     5a4:	e0 e0       	ldi	r30, 0x00	; 0
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     5ac:	ed 93       	st	X+, r30
     5ae:	fc 93       	st	X, r31
	return Size;
}
     5b0:	c9 01       	movw	r24, r18
     5b2:	08 95       	ret

000005b4 <Endpoint_Write_Control_Stream_LE>:
     5b4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5b6:	40 91 1e 02 	lds	r20, 0x021E
     5ba:	50 91 1f 02 	lds	r21, 0x021F
     5be:	46 17       	cp	r20, r22
     5c0:	57 07       	cpc	r21, r23
     5c2:	18 f4       	brcc	.+6      	; 0x5ca <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     5c4:	f9 01       	movw	r30, r18
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	3d c0       	rjmp	.+122    	; 0x644 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <Endpoint_Write_Control_Stream_LE+0x20>
     5d0:	ab 01       	movw	r20, r22
     5d2:	f8 cf       	rjmp	.-16     	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5d4:	80 91 e8 00 	lds	r24, 0x00E8
     5d8:	8e 77       	andi	r24, 0x7E	; 126
     5da:	80 93 e8 00 	sts	0x00E8, r24
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	f0 cf       	rjmp	.-32     	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5e4:	80 91 17 02 	lds	r24, 0x0217

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5e8:	88 23       	and	r24, r24
     5ea:	f1 f1       	breq	.+124    	; 0x668 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5ec:	85 30       	cpi	r24, 0x05	; 5
     5ee:	f1 f1       	breq	.+124    	; 0x66c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5f0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5f4:	83 ff       	sbrs	r24, 3
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <Endpoint_Write_Control_Stream_LE+0x48>
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     600:	82 fd       	sbrc	r24, 2
     602:	2c c0       	rjmp	.+88     	; 0x65c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     604:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     608:	80 ff       	sbrs	r24, 0
     60a:	1c c0       	rjmp	.+56     	; 0x644 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     60c:	80 91 f2 00 	lds	r24, 0x00F2
     610:	28 2f       	mov	r18, r24
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	07 c0       	rjmp	.+14     	; 0x624 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     616:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     618:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     61c:	41 50       	subi	r20, 0x01	; 1
     61e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     620:	2f 5f       	subi	r18, 0xFF	; 255
     622:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     624:	41 15       	cp	r20, r1
     626:	51 05       	cpc	r21, r1
     628:	19 f0       	breq	.+6      	; 0x630 <Endpoint_Write_Control_Stream_LE+0x7c>
     62a:	28 30       	cpi	r18, 0x08	; 8
     62c:	31 05       	cpc	r19, r1
     62e:	98 f3       	brcs	.-26     	; 0x616 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	28 30       	cpi	r18, 0x08	; 8
     634:	31 05       	cpc	r19, r1
     636:	09 f4       	brne	.+2      	; 0x63a <Endpoint_Write_Control_Stream_LE+0x86>
     638:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     63a:	80 91 e8 00 	lds	r24, 0x00E8
     63e:	8e 77       	andi	r24, 0x7E	; 126
     640:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     644:	41 15       	cp	r20, r1
     646:	51 05       	cpc	r21, r1
     648:	69 f6       	brne	.-102    	; 0x5e4 <Endpoint_Write_Control_Stream_LE+0x30>
     64a:	99 23       	and	r25, r25
     64c:	59 f6       	brne	.-106    	; 0x5e4 <Endpoint_Write_Control_Stream_LE+0x30>
     64e:	06 c0       	rjmp	.+12     	; 0x65c <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     650:	80 91 17 02 	lds	r24, 0x0217

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     654:	88 23       	and	r24, r24
     656:	41 f0       	breq	.+16     	; 0x668 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     658:	85 30       	cpi	r24, 0x05	; 5
     65a:	41 f0       	breq	.+16     	; 0x66c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     65c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     660:	82 ff       	sbrs	r24, 2
     662:	f6 cf       	rjmp	.-20     	; 0x650 <Endpoint_Write_Control_Stream_LE+0x9c>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	08 95       	ret
     66c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     66e:	08 95       	ret

00000670 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     670:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     672:	40 91 1e 02 	lds	r20, 0x021E
     676:	50 91 1f 02 	lds	r21, 0x021F
     67a:	46 17       	cp	r20, r22
     67c:	57 07       	cpc	r21, r23
     67e:	18 f4       	brcc	.+6      	; 0x686 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     680:	f9 01       	movw	r30, r18
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	40 c0       	rjmp	.+128    	; 0x706 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     686:	61 15       	cp	r22, r1
     688:	71 05       	cpc	r23, r1
     68a:	11 f0       	breq	.+4      	; 0x690 <Endpoint_Write_Control_PStream_LE+0x20>
     68c:	ab 01       	movw	r20, r22
     68e:	f8 cf       	rjmp	.-16     	; 0x680 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     690:	80 91 e8 00 	lds	r24, 0x00E8
     694:	8e 77       	andi	r24, 0x7E	; 126
     696:	80 93 e8 00 	sts	0x00E8, r24
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	f0 cf       	rjmp	.-32     	; 0x680 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6a0:	80 91 17 02 	lds	r24, 0x0217

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6a4:	88 23       	and	r24, r24
     6a6:	09 f4       	brne	.+2      	; 0x6aa <Endpoint_Write_Control_PStream_LE+0x3a>
     6a8:	40 c0       	rjmp	.+128    	; 0x72a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <Endpoint_Write_Control_PStream_LE+0x40>
     6ae:	3f c0       	rjmp	.+126    	; 0x72e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6b0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     6b4:	83 ff       	sbrs	r24, 3
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <Endpoint_Write_Control_PStream_LE+0x4c>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6bc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     6c0:	82 fd       	sbrc	r24, 2
     6c2:	2d c0       	rjmp	.+90     	; 0x71e <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6c4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     6c8:	80 ff       	sbrs	r24, 0
     6ca:	1d c0       	rjmp	.+58     	; 0x706 <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     6cc:	80 91 f2 00 	lds	r24, 0x00F2
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6d6:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6d8:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6dc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6de:	41 50       	subi	r20, 0x01	; 1
     6e0:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     6e2:	2f 5f       	subi	r18, 0xFF	; 255
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6e6:	41 15       	cp	r20, r1
     6e8:	51 05       	cpc	r21, r1
     6ea:	19 f0       	breq	.+6      	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0x82>
     6ec:	28 30       	cpi	r18, 0x08	; 8
     6ee:	31 05       	cpc	r19, r1
     6f0:	90 f3       	brcs	.-28     	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	28 30       	cpi	r18, 0x08	; 8
     6f6:	31 05       	cpc	r19, r1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <Endpoint_Write_Control_PStream_LE+0x8c>
     6fa:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6fc:	80 91 e8 00 	lds	r24, 0x00E8
     700:	8e 77       	andi	r24, 0x7E	; 126
     702:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     706:	41 15       	cp	r20, r1
     708:	51 05       	cpc	r21, r1
     70a:	51 f6       	brne	.-108    	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x30>
     70c:	99 23       	and	r25, r25
     70e:	41 f6       	brne	.-112    	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x30>
     710:	06 c0       	rjmp	.+12     	; 0x71e <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     712:	80 91 17 02 	lds	r24, 0x0217

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     716:	88 23       	and	r24, r24
     718:	41 f0       	breq	.+16     	; 0x72a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     71a:	85 30       	cpi	r24, 0x05	; 5
     71c:	41 f0       	breq	.+16     	; 0x72e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     71e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     722:	82 ff       	sbrs	r24, 2
     724:	f6 cf       	rjmp	.-20     	; 0x712 <Endpoint_Write_Control_PStream_LE+0xa2>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	08 95       	ret
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	08 95       	ret
     72e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     730:	08 95       	ret

00000732 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     732:	38 2f       	mov	r19, r24
     734:	28 2f       	mov	r18, r24
     736:	2e c0       	rjmp	.+92     	; 0x794 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     738:	82 2f       	mov	r24, r18
     73a:	8f 70       	andi	r24, 0x0F	; 15
     73c:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     740:	23 17       	cp	r18, r19
     742:	21 f4       	brne	.+8      	; 0x74c <Endpoint_ConfigureEndpoint_Prv+0x1a>
     744:	76 2f       	mov	r23, r22
     746:	94 2f       	mov	r25, r20
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	06 c0       	rjmp	.+12     	; 0x758 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     74c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     750:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     754:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     758:	91 ff       	sbrs	r25, 1
     75a:	1b c0       	rjmp	.+54     	; 0x792 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     75c:	80 91 eb 00 	lds	r24, 0x00EB
     760:	8e 7f       	andi	r24, 0xFE	; 254
     762:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     766:	80 91 ed 00 	lds	r24, 0x00ED
     76a:	8d 7f       	andi	r24, 0xFD	; 253
     76c:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     770:	80 91 eb 00 	lds	r24, 0x00EB
     774:	81 60       	ori	r24, 0x01	; 1
     776:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     77a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     77e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     782:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     786:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     78a:	87 fd       	sbrc	r24, 7
     78c:	02 c0       	rjmp	.+4      	; 0x792 <Endpoint_ConfigureEndpoint_Prv+0x60>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     792:	2f 5f       	subi	r18, 0xFF	; 255
     794:	25 30       	cpi	r18, 0x05	; 5
     796:	80 f2       	brcs	.-96     	; 0x738 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     798:	3f 70       	andi	r19, 0x0F	; 15
     79a:	30 93 e9 00 	sts	0x00E9, r19
     79e:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     7a0:	08 95       	ret

000007a2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	06 2f       	mov	r16, r22
     7ac:	ec 01       	movw	r28, r24
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	2a c0       	rjmp	.+84     	; 0x806 <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     7b2:	98 81       	ld	r25, Y
     7b4:	99 23       	and	r25, r25
     7b6:	29 f1       	breq	.+74     	; 0x802 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     7b8:	6b 81       	ldd	r22, Y+3	; 0x03
     7ba:	e9 81       	ldd	r30, Y+1	; 0x01
     7bc:	fa 81       	ldd	r31, Y+2	; 0x02
     7be:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     7c0:	89 2f       	mov	r24, r25
     7c2:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     7c4:	85 30       	cpi	r24, 0x05	; 5
     7c6:	18 f5       	brcc	.+70     	; 0x80e <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7c8:	22 30       	cpi	r18, 0x02	; 2
     7ca:	10 f4       	brcc	.+4      	; 0x7d0 <Endpoint_ConfigureEndpointTable+0x2e>
     7cc:	52 e0       	ldi	r21, 0x02	; 2
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <Endpoint_ConfigureEndpointTable+0x30>
     7d0:	56 e0       	ldi	r21, 0x06	; 6
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	28 e0       	ldi	r18, 0x08	; 8
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     7da:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     7dc:	22 0f       	add	r18, r18
     7de:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7e0:	2e 17       	cp	r18, r30
     7e2:	3f 07       	cpc	r19, r31
     7e4:	d0 f3       	brcs	.-12     	; 0x7da <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7e6:	62 95       	swap	r22
     7e8:	66 0f       	add	r22, r22
     7ea:	66 0f       	add	r22, r22
     7ec:	60 7c       	andi	r22, 0xC0	; 192
     7ee:	99 1f       	adc	r25, r25
     7f0:	99 27       	eor	r25, r25
     7f2:	99 1f       	adc	r25, r25
     7f4:	69 2b       	or	r22, r25
     7f6:	42 95       	swap	r20
     7f8:	40 7f       	andi	r20, 0xF0	; 240
     7fa:	45 2b       	or	r20, r21
     7fc:	9a df       	rcall	.-204    	; 0x732 <Endpoint_ConfigureEndpoint_Prv>
     7fe:	88 23       	and	r24, r24
     800:	31 f0       	breq	.+12     	; 0x80e <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     802:	1f 5f       	subi	r17, 0xFF	; 255
     804:	25 96       	adiw	r28, 0x05	; 5
     806:	10 17       	cp	r17, r16
     808:	a0 f2       	brcs	.-88     	; 0x7b2 <Endpoint_ConfigureEndpointTable+0x10>
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	01 c0       	rjmp	.+2      	; 0x810 <Endpoint_ConfigureEndpointTable+0x6e>
     80e:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     81a:	80 91 18 02 	lds	r24, 0x0218
     81e:	88 23       	and	r24, r24
     820:	9c f4       	brge	.+38     	; 0x848 <Endpoint_ClearStatusStage+0x2e>
     822:	04 c0       	rjmp	.+8      	; 0x82c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     824:	80 91 17 02 	lds	r24, 0x0217
     828:	88 23       	and	r24, r24
     82a:	b9 f0       	breq	.+46     	; 0x85a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     82c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     830:	82 ff       	sbrs	r24, 2
     832:	f8 cf       	rjmp	.-16     	; 0x824 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     834:	80 91 e8 00 	lds	r24, 0x00E8
     838:	8b 77       	andi	r24, 0x7B	; 123
     83a:	80 93 e8 00 	sts	0x00E8, r24
     83e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     840:	80 91 17 02 	lds	r24, 0x0217
     844:	88 23       	and	r24, r24
     846:	49 f0       	breq	.+18     	; 0x85a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     848:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     84c:	80 ff       	sbrs	r24, 0
     84e:	f8 cf       	rjmp	.-16     	; 0x840 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     850:	80 91 e8 00 	lds	r24, 0x00E8
     854:	8e 77       	andi	r24, 0x7E	; 126
     856:	80 93 e8 00 	sts	0x00E8, r24
     85a:	08 95       	ret

0000085c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     85c:	40 91 e4 00 	lds	r20, 0x00E4
     860:	50 91 e5 00 	lds	r21, 0x00E5
     864:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     866:	80 91 ec 00 	lds	r24, 0x00EC
     86a:	80 ff       	sbrs	r24, 0
     86c:	24 c0       	rjmp	.+72     	; 0x8b6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     86e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     872:	80 fd       	sbrc	r24, 0
     874:	1e c0       	rjmp	.+60     	; 0x8b2 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     876:	80 91 17 02 	lds	r24, 0x0217

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     87a:	88 23       	and	r24, r24
     87c:	11 f4       	brne	.+4      	; 0x882 <Endpoint_WaitUntilReady+0x26>
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     882:	85 30       	cpi	r24, 0x05	; 5
     884:	11 f4       	brne	.+4      	; 0x88a <Endpoint_WaitUntilReady+0x2e>
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     88a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     88e:	85 ff       	sbrs	r24, 5
     890:	02 c0       	rjmp	.+4      	; 0x896 <Endpoint_WaitUntilReady+0x3a>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	08 95       	ret
     896:	80 91 e4 00 	lds	r24, 0x00E4
     89a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     89e:	84 17       	cp	r24, r20
     8a0:	95 07       	cpc	r25, r21
     8a2:	09 f3       	breq	.-62     	; 0x866 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     8a4:	22 23       	and	r18, r18
     8a6:	11 f4       	brne	.+4      	; 0x8ac <Endpoint_WaitUntilReady+0x50>
     8a8:	84 e0       	ldi	r24, 0x04	; 4
     8aa:	08 95       	ret
     8ac:	21 50       	subi	r18, 0x01	; 1
     8ae:	ac 01       	movw	r20, r24
     8b0:	da cf       	rjmp	.-76     	; 0x866 <Endpoint_WaitUntilReady+0xa>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     8b4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8b6:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     8ba:	82 ff       	sbrs	r24, 2
     8bc:	dc cf       	rjmp	.-72     	; 0x876 <Endpoint_WaitUntilReady+0x1a>
     8be:	f9 cf       	rjmp	.-14     	; 0x8b2 <Endpoint_WaitUntilReady+0x56>

000008c0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     8c0:	40 d0       	rcall	.+128    	; 0x942 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8c2:	42 d0       	rcall	.+132    	; 0x948 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8c4:	80 91 d8 00 	lds	r24, 0x00D8
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     8ce:	80 91 d8 00 	lds	r24, 0x00D8
     8d2:	80 68       	ori	r24, 0x80	; 128
     8d4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8d8:	80 91 d8 00 	lds	r24, 0x00D8
     8dc:	8f 7d       	andi	r24, 0xDF	; 223
     8de:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8e2:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8e8:	09 b4       	in	r0, 0x29	; 41
     8ea:	00 fe       	sbrs	r0, 0
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     8ee:	10 92 17 02 	sts	0x0217, r1
	USB_Device_ConfigurationNumber  = 0;
     8f2:	10 92 13 02 	sts	0x0213, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8f6:	10 92 15 02 	sts	0x0215, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8fa:	10 92 14 02 	sts	0x0214, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	42 e0       	ldi	r20, 0x02	; 2
     904:	16 df       	rcall	.-468    	; 0x732 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     906:	80 91 e1 00 	lds	r24, 0x00E1
     90a:	8e 7f       	andi	r24, 0xFE	; 254
     90c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     910:	80 91 e2 00 	lds	r24, 0x00E2
     914:	81 60       	ori	r24, 0x01	; 1
     916:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     91a:	80 91 e2 00 	lds	r24, 0x00E2
     91e:	88 60       	ori	r24, 0x08	; 8
     920:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     924:	80 91 e0 00 	lds	r24, 0x00E0
     928:	8e 7f       	andi	r24, 0xFE	; 254
     92a:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     92e:	08 95       	ret

00000930 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     930:	e3 e6       	ldi	r30, 0x63	; 99
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 16 02 	sts	0x0216, r24

	USB_ResetInterface();
}
     940:	bf cf       	rjmp	.-130    	; 0x8c0 <USB_ResetInterface>

00000942 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     942:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     946:	08 95       	ret

00000948 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     948:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     94c:	08 95       	ret

0000094e <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	1f 93       	push	r17
     95a:	2f 93       	push	r18
     95c:	3f 93       	push	r19
     95e:	4f 93       	push	r20
     960:	5f 93       	push	r21
     962:	6f 93       	push	r22
     964:	7f 93       	push	r23
     966:	8f 93       	push	r24
     968:	9f 93       	push	r25
     96a:	af 93       	push	r26
     96c:	bf 93       	push	r27
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     972:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     976:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     97a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     97e:	80 91 f0 00 	lds	r24, 0x00F0
     982:	87 7f       	andi	r24, 0xF7	; 247
     984:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     988:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     98a:	c2 d0       	rcall	.+388    	; 0xb10 <USB_Device_ProcessControlRequest>
     98c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     990:	80 91 f0 00 	lds	r24, 0x00F0
     994:	88 60       	ori	r24, 0x08	; 8
     996:	80 93 f0 00 	sts	0x00F0, r24
     99a:	1f 70       	andi	r17, 0x0F	; 15
     99c:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	1f 91       	pop	r17
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     9e6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     9ea:	82 ff       	sbrs	r24, 2
     9ec:	0a c0       	rjmp	.+20     	; 0xa02 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     9ee:	80 91 e2 00 	lds	r24, 0x00E2
     9f2:	82 ff       	sbrs	r24, 2
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     9f6:	80 91 e1 00 	lds	r24, 0x00E1
     9fa:	8b 7f       	andi	r24, 0xFB	; 251
     9fc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     a00:	ef d1       	rcall	.+990    	; 0xde0 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a02:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a06:	80 ff       	sbrs	r24, 0
     a08:	17 c0       	rjmp	.+46     	; 0xa38 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a0a:	80 91 e2 00 	lds	r24, 0x00E2
     a0e:	80 ff       	sbrs	r24, 0
     a10:	13 c0       	rjmp	.+38     	; 0xa38 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a12:	80 91 e2 00 	lds	r24, 0x00E2
     a16:	8e 7f       	andi	r24, 0xFE	; 254
     a18:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a1c:	80 91 e2 00 	lds	r24, 0x00E2
     a20:	80 61       	ori	r24, 0x10	; 16
     a22:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     a26:	80 91 d8 00 	lds	r24, 0x00D8
     a2a:	80 62       	ori	r24, 0x20	; 32
     a2c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a30:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     a32:	10 92 17 02 	sts	0x0217, r1
		EVENT_USB_Device_Disconnect();
     a36:	99 dc       	rcall	.-1742   	; 0x36a <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a38:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a3c:	84 ff       	sbrs	r24, 4
     a3e:	2c c0       	rjmp	.+88     	; 0xa98 <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a40:	80 91 e2 00 	lds	r24, 0x00E2
     a44:	84 ff       	sbrs	r24, 4
     a46:	28 c0       	rjmp	.+80     	; 0xa98 <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a48:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a4e:	09 b4       	in	r0, 0x29	; 41
     a50:	00 fe       	sbrs	r0, 0
     a52:	fd cf       	rjmp	.-6      	; 0xa4e <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a54:	80 91 d8 00 	lds	r24, 0x00D8
     a58:	8f 7d       	andi	r24, 0xDF	; 223
     a5a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a5e:	80 91 e1 00 	lds	r24, 0x00E1
     a62:	8f 7e       	andi	r24, 0xEF	; 239
     a64:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a68:	80 91 e2 00 	lds	r24, 0x00E2
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
     a6e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a72:	80 91 e2 00 	lds	r24, 0x00E2
     a76:	81 60       	ori	r24, 0x01	; 1
     a78:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a7c:	80 91 13 02 	lds	r24, 0x0213
     a80:	88 23       	and	r24, r24
     a82:	31 f4       	brne	.+12     	; 0xa90 <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a84:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a88:	87 fd       	sbrc	r24, 7
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__vector_11+0xcc>
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <__vector_11+0xce>
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	80 93 17 02 	sts	0x0217, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     a96:	68 dc       	rcall	.-1840   	; 0x368 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a98:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a9c:	83 ff       	sbrs	r24, 3
     a9e:	27 c0       	rjmp	.+78     	; 0xaee <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     aa0:	80 91 e2 00 	lds	r24, 0x00E2
     aa4:	83 ff       	sbrs	r24, 3
     aa6:	23 c0       	rjmp	.+70     	; 0xaee <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     aa8:	80 91 e1 00 	lds	r24, 0x00E1
     aac:	87 7f       	andi	r24, 0xF7	; 247
     aae:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	80 93 17 02 	sts	0x0217, r24
		USB_Device_ConfigurationNumber = 0;
     ab8:	10 92 13 02 	sts	0x0213, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     abc:	80 91 e1 00 	lds	r24, 0x00E1
     ac0:	8e 7f       	andi	r24, 0xFE	; 254
     ac2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ac6:	80 91 e2 00 	lds	r24, 0x00E2
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ad0:	80 91 e2 00 	lds	r24, 0x00E2
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	42 e0       	ldi	r20, 0x02	; 2
     ae0:	28 de       	rcall	.-944    	; 0x732 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ae2:	80 91 f0 00 	lds	r24, 0x00F0
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     aec:	79 d1       	rcall	.+754    	; 0xde0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     aee:	ff 91       	pop	r31
     af0:	ef 91       	pop	r30
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b10:	1f 93       	push	r17
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	ac 97       	sbiw	r28, 0x2c	; 44
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	e8 e1       	ldi	r30, 0x18	; 24
     b28:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b2a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b2e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b30:	22 e0       	ldi	r18, 0x02	; 2
     b32:	e0 32       	cpi	r30, 0x20	; 32
     b34:	f2 07       	cpc	r31, r18
     b36:	c9 f7       	brne	.-14     	; 0xb2a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b38:	19 dc       	rcall	.-1998   	; 0x36c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b3a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     b3e:	83 ff       	sbrs	r24, 3
     b40:	37 c1       	rjmp	.+622    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b42:	80 91 18 02 	lds	r24, 0x0218

		switch (USB_ControlRequest.bRequest)
     b46:	30 91 19 02 	lds	r19, 0x0219
     b4a:	35 30       	cpi	r19, 0x05	; 5
     b4c:	09 f4       	brne	.+2      	; 0xb50 <USB_Device_ProcessControlRequest+0x40>
     b4e:	87 c0       	rjmp	.+270    	; 0xc5e <USB_Device_ProcessControlRequest+0x14e>
     b50:	36 30       	cpi	r19, 0x06	; 6
     b52:	40 f4       	brcc	.+16     	; 0xb64 <USB_Device_ProcessControlRequest+0x54>
     b54:	31 30       	cpi	r19, 0x01	; 1
     b56:	c9 f1       	breq	.+114    	; 0xbca <USB_Device_ProcessControlRequest+0xba>
     b58:	31 30       	cpi	r19, 0x01	; 1
     b5a:	70 f0       	brcs	.+28     	; 0xb78 <USB_Device_ProcessControlRequest+0x68>
     b5c:	33 30       	cpi	r19, 0x03	; 3
     b5e:	09 f0       	breq	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x52>
     b60:	27 c1       	rjmp	.+590    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
     b62:	33 c0       	rjmp	.+102    	; 0xbca <USB_Device_ProcessControlRequest+0xba>
     b64:	38 30       	cpi	r19, 0x08	; 8
     b66:	09 f4       	brne	.+2      	; 0xb6a <USB_Device_ProcessControlRequest+0x5a>
     b68:	f5 c0       	rjmp	.+490    	; 0xd54 <USB_Device_ProcessControlRequest+0x244>
     b6a:	39 30       	cpi	r19, 0x09	; 9
     b6c:	09 f4       	brne	.+2      	; 0xb70 <USB_Device_ProcessControlRequest+0x60>
     b6e:	04 c1       	rjmp	.+520    	; 0xd78 <USB_Device_ProcessControlRequest+0x268>
     b70:	36 30       	cpi	r19, 0x06	; 6
     b72:	09 f0       	breq	.+2      	; 0xb76 <USB_Device_ProcessControlRequest+0x66>
     b74:	1d c1       	rjmp	.+570    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
     b76:	96 c0       	rjmp	.+300    	; 0xca4 <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b78:	80 38       	cpi	r24, 0x80	; 128
     b7a:	21 f0       	breq	.+8      	; 0xb84 <USB_Device_ProcessControlRequest+0x74>
     b7c:	82 38       	cpi	r24, 0x82	; 130
     b7e:	09 f0       	breq	.+2      	; 0xb82 <USB_Device_ProcessControlRequest+0x72>
     b80:	17 c1       	rjmp	.+558    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
     b82:	08 c0       	rjmp	.+16     	; 0xb94 <USB_Device_ProcessControlRequest+0x84>
     b84:	90 91 14 02 	lds	r25, 0x0214
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b88:	80 91 15 02 	lds	r24, 0x0215
     b8c:	88 23       	and	r24, r24
     b8e:	99 f0       	breq	.+38     	; 0xbb6 <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b90:	92 60       	ori	r25, 0x02	; 2
     b92:	11 c0       	rjmp	.+34     	; 0xbb6 <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b94:	80 91 1c 02 	lds	r24, 0x021C
     b98:	8f 70       	andi	r24, 0x0F	; 15
     b9a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b9e:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	25 e0       	ldi	r18, 0x05	; 5
     ba6:	96 95       	lsr	r25
     ba8:	87 95       	ror	r24
     baa:	2a 95       	dec	r18
     bac:	e1 f7       	brne	.-8      	; 0xba6 <USB_Device_ProcessControlRequest+0x96>
     bae:	98 2f       	mov	r25, r24
     bb0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bb2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bb6:	80 91 e8 00 	lds	r24, 0x00E8
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     bc0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     bc4:	10 92 f1 00 	sts	0x00F1, r1
     bc8:	d0 c0       	rjmp	.+416    	; 0xd6a <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bca:	88 23       	and	r24, r24
     bcc:	19 f0       	breq	.+6      	; 0xbd4 <USB_Device_ProcessControlRequest+0xc4>
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0xc4>
     bd2:	ee c0       	rjmp	.+476    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	8f 71       	andi	r24, 0x1F	; 31
     bd8:	90 70       	andi	r25, 0x00	; 0
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <USB_Device_ProcessControlRequest+0xd6>
     bde:	02 97       	sbiw	r24, 0x02	; 2
     be0:	09 f0       	breq	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0xd4>
     be2:	e6 c0       	rjmp	.+460    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
     be4:	0c c0       	rjmp	.+24     	; 0xbfe <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     be6:	80 91 1a 02 	lds	r24, 0x021A
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	09 f0       	breq	.+2      	; 0xbf0 <USB_Device_ProcessControlRequest+0xe0>
     bee:	e0 c0       	rjmp	.+448    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     bf0:	10 92 15 02 	sts	0x0215, r1
     bf4:	33 30       	cpi	r19, 0x03	; 3
     bf6:	69 f5       	brne	.+90     	; 0xc52 <USB_Device_ProcessControlRequest+0x142>
     bf8:	80 93 15 02 	sts	0x0215, r24
     bfc:	2a c0       	rjmp	.+84     	; 0xc52 <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     bfe:	80 91 1a 02 	lds	r24, 0x021A
     c02:	88 23       	and	r24, r24
     c04:	31 f5       	brne	.+76     	; 0xc52 <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c06:	20 91 1c 02 	lds	r18, 0x021C
     c0a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c0c:	09 f4       	brne	.+2      	; 0xc10 <USB_Device_ProcessControlRequest+0x100>
     c0e:	d0 c0       	rjmp	.+416    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c10:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c14:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c18:	80 ff       	sbrs	r24, 0
     c1a:	1b c0       	rjmp	.+54     	; 0xc52 <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c1c:	33 30       	cpi	r19, 0x03	; 3
     c1e:	21 f4       	brne	.+8      	; 0xc28 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c20:	80 91 eb 00 	lds	r24, 0x00EB
     c24:	80 62       	ori	r24, 0x20	; 32
     c26:	13 c0       	rjmp	.+38     	; 0xc4e <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c28:	80 91 eb 00 	lds	r24, 0x00EB
     c2c:	80 61       	ori	r24, 0x10	; 16
     c2e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <USB_Device_ProcessControlRequest+0x12c>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	2a 95       	dec	r18
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <USB_Device_ProcessControlRequest+0x128>
     c40:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     c44:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c48:	80 91 eb 00 	lds	r24, 0x00EB
     c4c:	88 60       	ori	r24, 0x08	; 8
     c4e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c52:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c56:	80 91 e8 00 	lds	r24, 0x00E8
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	89 c0       	rjmp	.+274    	; 0xd70 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c5e:	88 23       	and	r24, r24
     c60:	09 f0       	breq	.+2      	; 0xc64 <USB_Device_ProcessControlRequest+0x154>
     c62:	a6 c0       	rjmp	.+332    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c64:	10 91 1a 02 	lds	r17, 0x021A
     c68:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c6a:	80 91 e3 00 	lds	r24, 0x00E3
     c6e:	80 78       	andi	r24, 0x80	; 128
     c70:	81 2b       	or	r24, r17
     c72:	80 93 e3 00 	sts	0x00E3, r24
     c76:	80 91 e8 00 	lds	r24, 0x00E8
     c7a:	87 7f       	andi	r24, 0xF7	; 247
     c7c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c80:	cc dd       	rcall	.-1128   	; 0x81a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c82:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     c86:	80 ff       	sbrs	r24, 0
     c88:	fc cf       	rjmp	.-8      	; 0xc82 <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     c8a:	80 91 e3 00 	lds	r24, 0x00E3
     c8e:	80 68       	ori	r24, 0x80	; 128
     c90:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c94:	11 23       	and	r17, r17
     c96:	11 f4       	brne	.+4      	; 0xc9c <USB_Device_ProcessControlRequest+0x18c>
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <USB_Device_ProcessControlRequest+0x18e>
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	80 93 17 02 	sts	0x0217, r24
     ca2:	86 c0       	rjmp	.+268    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ca4:	80 58       	subi	r24, 0x80	; 128
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	08 f0       	brcs	.+2      	; 0xcac <USB_Device_ProcessControlRequest+0x19c>
     caa:	82 c0       	rjmp	.+260    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     cac:	80 91 1a 02 	lds	r24, 0x021A
     cb0:	90 91 1b 02 	lds	r25, 0x021B
     cb4:	23 e0       	ldi	r18, 0x03	; 3
     cb6:	8c 3d       	cpi	r24, 0xDC	; 220
     cb8:	92 07       	cpc	r25, r18
     cba:	09 f0       	breq	.+2      	; 0xcbe <USB_Device_ProcessControlRequest+0x1ae>
     cbc:	33 c0       	rjmp	.+102    	; 0xd24 <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     cc2:	8a e2       	ldi	r24, 0x2A	; 42
     cc4:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cc6:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cc8:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     cca:	de 01       	movw	r26, r28
     ccc:	15 96       	adiw	r26, 0x05	; 5
     cce:	6e e0       	ldi	r22, 0x0E	; 14
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     cd4:	11 e2       	ldi	r17, 0x21	; 33
     cd6:	e6 2f       	mov	r30, r22
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	10 93 57 00 	sts	0x0057, r17
     cde:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     ce0:	40 ff       	sbrs	r20, 0
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
     ce4:	82 95       	swap	r24
     ce6:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     ce8:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     cea:	8f 70       	andi	r24, 0x0F	; 15
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     cf0:	8a 30       	cpi	r24, 0x0A	; 10
     cf2:	18 f0       	brcs	.+6      	; 0xcfa <USB_Device_ProcessControlRequest+0x1ea>
     cf4:	c9 01       	movw	r24, r18
     cf6:	c7 96       	adiw	r24, 0x37	; 55
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <USB_Device_ProcessControlRequest+0x1ee>
     cfa:	c9 01       	movw	r24, r18
     cfc:	c0 96       	adiw	r24, 0x30	; 48
     cfe:	8d 93       	st	X+, r24
     d00:	9d 93       	st	X+, r25
     d02:	4f 5f       	subi	r20, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d06:	44 31       	cpi	r20, 0x14	; 20
     d08:	51 05       	cpc	r21, r1
     d0a:	29 f7       	brne	.-54     	; 0xcd6 <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d0c:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d0e:	80 91 e8 00 	lds	r24, 0x00E8
     d12:	87 7f       	andi	r24, 0xF7	; 247
     d14:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d18:	ce 01       	movw	r24, r28
     d1a:	03 96       	adiw	r24, 0x03	; 3
     d1c:	6a e2       	ldi	r22, 0x2A	; 42
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	49 dc       	rcall	.-1902   	; 0x5b4 <Endpoint_Write_Control_Stream_LE>
     d22:	12 c0       	rjmp	.+36     	; 0xd48 <USB_Device_ProcessControlRequest+0x238>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d24:	60 91 1c 02 	lds	r22, 0x021C
     d28:	ae 01       	movw	r20, r28
     d2a:	4f 5f       	subi	r20, 0xFF	; 255
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	14 dc       	rcall	.-2008   	; 0x558 <CALLBACK_USB_GetDescriptor>
     d30:	bc 01       	movw	r22, r24
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	09 f4       	brne	.+2      	; 0xd38 <USB_Device_ProcessControlRequest+0x228>
     d36:	3c c0       	rjmp	.+120    	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
     d38:	80 91 e8 00 	lds	r24, 0x00E8
     d3c:	87 7f       	andi	r24, 0xF7	; 247
     d3e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	94 dc       	rcall	.-1752   	; 0x670 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d48:	80 91 e8 00 	lds	r24, 0x00E8
     d4c:	8b 77       	andi	r24, 0x7B	; 123
     d4e:	80 93 e8 00 	sts	0x00E8, r24
     d52:	2e c0       	rjmp	.+92     	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d54:	80 38       	cpi	r24, 0x80	; 128
     d56:	61 f5       	brne	.+88     	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d58:	80 91 e8 00 	lds	r24, 0x00E8
     d5c:	87 7f       	andi	r24, 0xF7	; 247
     d5e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d62:	80 91 13 02 	lds	r24, 0x0213
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d66:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d6a:	80 91 e8 00 	lds	r24, 0x00E8
     d6e:	8e 77       	andi	r24, 0x7E	; 126
     d70:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d74:	52 dd       	rcall	.-1372   	; 0x81a <Endpoint_ClearStatusStage>
     d76:	1c c0       	rjmp	.+56     	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d78:	88 23       	and	r24, r24
     d7a:	d1 f4       	brne	.+52     	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d7c:	90 91 1a 02 	lds	r25, 0x021A
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	b0 f4       	brcc	.+44     	; 0xdb0 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d84:	80 91 e8 00 	lds	r24, 0x00E8
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d8e:	90 93 13 02 	sts	0x0213, r25

	Endpoint_ClearStatusStage();
     d92:	43 dd       	rcall	.-1402   	; 0x81a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     d94:	80 91 13 02 	lds	r24, 0x0213
     d98:	88 23       	and	r24, r24
     d9a:	31 f4       	brne	.+12     	; 0xda8 <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d9c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     da0:	87 fd       	sbrc	r24, 7
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <USB_Device_ProcessControlRequest+0x298>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <USB_Device_ProcessControlRequest+0x29a>
     da8:	84 e0       	ldi	r24, 0x04	; 4
     daa:	80 93 17 02 	sts	0x0217, r24

	EVENT_USB_Device_ConfigurationChanged();
     dae:	e1 da       	rcall	.-2622   	; 0x372 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     db0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     db4:	83 ff       	sbrs	r24, 3
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <USB_Device_ProcessControlRequest+0x2bc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db8:	80 91 e8 00 	lds	r24, 0x00E8
     dbc:	87 7f       	andi	r24, 0xF7	; 247
     dbe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     dc2:	80 91 eb 00 	lds	r24, 0x00EB
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     dcc:	ac 96       	adiw	r28, 0x2c	; 44
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret

00000de0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     de0:	08 95       	ret

00000de2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     de2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     de4:	80 91 17 02 	lds	r24, 0x0217
     de8:	88 23       	and	r24, r24
     dea:	71 f0       	breq	.+28     	; 0xe08 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     dec:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     df0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     df4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     df8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     dfc:	83 ff       	sbrs	r24, 3
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
     e00:	87 de       	rcall	.-754    	; 0xb10 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e02:	1f 70       	andi	r17, 0x0F	; 15
     e04:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e08:	1f 91       	pop	r17
     e0a:	08 95       	ret

00000e0c <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e0c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e0e:	80 91 17 02 	lds	r24, 0x0217
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	29 f5       	brne	.+74     	; 0xe60 <CDC_Device_ReceiveByte+0x54>
     e16:	84 89       	ldd	r24, Z+20	; 0x14
     e18:	95 89       	ldd	r25, Z+21	; 0x15
     e1a:	a6 89       	ldd	r26, Z+22	; 0x16
     e1c:	b7 89       	ldd	r27, Z+23	; 0x17
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	a1 05       	cpc	r26, r1
     e22:	b1 05       	cpc	r27, r1
     e24:	e9 f0       	breq	.+58     	; 0xe60 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e26:	86 81       	ldd	r24, Z+6	; 0x06
     e28:	8f 70       	andi	r24, 0x0F	; 15
     e2a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e2e:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     e32:	82 ff       	sbrs	r24, 2
     e34:	15 c0       	rjmp	.+42     	; 0xe60 <CDC_Device_ReceiveByte+0x54>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e36:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     e3a:	88 23       	and	r24, r24
     e3c:	19 f4       	brne	.+6      	; 0xe44 <CDC_Device_ReceiveByte+0x38>
     e3e:	2f ef       	ldi	r18, 0xFF	; 255
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e44:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e4c:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     e50:	88 23       	and	r24, r24
     e52:	41 f4       	brne	.+16     	; 0xe64 <CDC_Device_ReceiveByte+0x58>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e54:	80 91 e8 00 	lds	r24, 0x00E8
     e58:	8b 77       	andi	r24, 0x7B	; 123
     e5a:	80 93 e8 00 	sts	0x00E8, r24
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <CDC_Device_ReceiveByte+0x58>
     e60:	2f ef       	ldi	r18, 0xFF	; 255
     e62:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     e64:	c9 01       	movw	r24, r18
     e66:	08 95       	ret

00000e68 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
     e68:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
     e6a:	2e e0       	ldi	r18, 0x0E	; 14
     e6c:	db 01       	movw	r26, r22
     e6e:	1d 92       	st	X+, r1
     e70:	2a 95       	dec	r18
     e72:	e9 f7       	brne	.-6      	; 0xe6e <CDC_Device_CreateStream+0x6>
     e74:	23 e0       	ldi	r18, 0x03	; 3
     e76:	23 83       	std	Z+3, r18	; 0x03
     e78:	2e eb       	ldi	r18, 0xBE	; 190
     e7a:	37 e0       	ldi	r19, 0x07	; 7
     e7c:	31 87       	std	Z+9, r19	; 0x09
     e7e:	20 87       	std	Z+8, r18	; 0x08
     e80:	27 e4       	ldi	r18, 0x47	; 71
     e82:	37 e0       	ldi	r19, 0x07	; 7
     e84:	33 87       	std	Z+11, r19	; 0x0b
     e86:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     e88:	95 87       	std	Z+13, r25	; 0x0d
     e8a:	84 87       	std	Z+12, r24	; 0x0c
}
     e8c:	08 95       	ret

00000e8e <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     e8e:	fc 01       	movw	r30, r24
     e90:	84 85       	ldd	r24, Z+12	; 0x0c
     e92:	95 85       	ldd	r25, Z+13	; 0x0d
     e94:	bb df       	rcall	.-138    	; 0xe0c <CDC_Device_ReceiveByte>
     e96:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
     e98:	97 ff       	sbrs	r25, 7
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <CDC_Device_getchar+0x12>
     e9c:	2e ef       	ldi	r18, 0xFE	; 254
     e9e:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
     ea0:	c9 01       	movw	r24, r18
     ea2:	08 95       	ret

00000ea4 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     ea4:	08 95       	ret

00000ea6 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ea6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ea8:	80 91 17 02 	lds	r24, 0x0217
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	19 f5       	brne	.+70     	; 0xef6 <CDC_Device_Flush+0x50>
     eb0:	84 89       	ldd	r24, Z+20	; 0x14
     eb2:	95 89       	ldd	r25, Z+21	; 0x15
     eb4:	a6 89       	ldd	r26, Z+22	; 0x16
     eb6:	b7 89       	ldd	r27, Z+23	; 0x17
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	a1 05       	cpc	r26, r1
     ebc:	b1 05       	cpc	r27, r1
     ebe:	d9 f0       	breq	.+54     	; 0xef6 <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	8f 70       	andi	r24, 0x0F	; 15
     ec4:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ec8:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     ecc:	88 23       	and	r24, r24
     ece:	a9 f0       	breq	.+42     	; 0xefa <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ed0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
     ed8:	8e 77       	andi	r24, 0x7E	; 126
     eda:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     ede:	95 fd       	sbrc	r25, 5
     ee0:	0c c0       	rjmp	.+24     	; 0xefa <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ee2:	bc dc       	rcall	.-1672   	; 0x85c <Endpoint_WaitUntilReady>
     ee4:	98 2f       	mov	r25, r24
     ee6:	88 23       	and	r24, r24
     ee8:	49 f4       	brne	.+18     	; 0xefc <CDC_Device_Flush+0x56>
     eea:	80 91 e8 00 	lds	r24, 0x00E8
     eee:	8e 77       	andi	r24, 0x7E	; 126
     ef0:	80 93 e8 00 	sts	0x00E8, r24
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <CDC_Device_Flush+0x56>
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <CDC_Device_Flush+0x56>
     efa:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     efc:	89 2f       	mov	r24, r25
     efe:	08 95       	ret

00000f00 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f00:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f02:	80 91 17 02 	lds	r24, 0x0217
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	91 f4       	brne	.+36     	; 0xf2e <CDC_Device_USBTask+0x2e>
     f0a:	84 89       	ldd	r24, Z+20	; 0x14
     f0c:	95 89       	ldd	r25, Z+21	; 0x15
     f0e:	a6 89       	ldd	r26, Z+22	; 0x16
     f10:	b7 89       	ldd	r27, Z+23	; 0x17
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	a1 05       	cpc	r26, r1
     f16:	b1 05       	cpc	r27, r1
     f18:	51 f0       	breq	.+20     	; 0xf2e <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	8f 70       	andi	r24, 0x0F	; 15
     f1e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f22:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     f26:	80 ff       	sbrs	r24, 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
     f2a:	cf 01       	movw	r24, r30
     f2c:	bc cf       	rjmp	.-136    	; 0xea6 <CDC_Device_Flush>
     f2e:	08 95       	ret

00000f30 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     f30:	1f 93       	push	r17
     f32:	fc 01       	movw	r30, r24
     f34:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f36:	80 91 17 02 	lds	r24, 0x0217
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	e1 f4       	brne	.+56     	; 0xf76 <CDC_Device_SendByte+0x46>
     f3e:	84 89       	ldd	r24, Z+20	; 0x14
     f40:	95 89       	ldd	r25, Z+21	; 0x15
     f42:	a6 89       	ldd	r26, Z+22	; 0x16
     f44:	b7 89       	ldd	r27, Z+23	; 0x17
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	a1 05       	cpc	r26, r1
     f4a:	b1 05       	cpc	r27, r1
     f4c:	a1 f0       	breq	.+40     	; 0xf76 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	8f 70       	andi	r24, 0x0F	; 15
     f52:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f56:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     f5a:	85 fd       	sbrc	r24, 5
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f5e:	80 91 e8 00 	lds	r24, 0x00E8
     f62:	8e 77       	andi	r24, 0x7E	; 126
     f64:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f68:	79 dc       	rcall	.-1806   	; 0x85c <Endpoint_WaitUntilReady>
     f6a:	88 23       	and	r24, r24
     f6c:	29 f4       	brne	.+10     	; 0xf78 <CDC_Device_SendByte+0x48>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f6e:	10 93 f1 00 	sts	0x00F1, r17
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <CDC_Device_SendByte+0x48>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f76:	82 e0       	ldi	r24, 0x02	; 2
}
     f78:	1f 91       	pop	r17
     f7a:	08 95       	ret

00000f7c <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
     f7c:	28 2f       	mov	r18, r24
     f7e:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     f80:	84 85       	ldd	r24, Z+12	; 0x0c
     f82:	95 85       	ldd	r25, Z+13	; 0x0d
     f84:	62 2f       	mov	r22, r18
     f86:	d4 df       	rcall	.-88     	; 0xf30 <CDC_Device_SendByte>
     f88:	88 23       	and	r24, r24
     f8a:	19 f4       	brne	.+6      	; 0xf92 <CDC_Device_putchar+0x16>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <CDC_Device_putchar+0x1a>
     f92:	2f ef       	ldi	r18, 0xFF	; 255
     f94:	3f ef       	ldi	r19, 0xFF	; 255
}
     f96:	c9 01       	movw	r24, r18
     f98:	08 95       	ret

00000f9a <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     fa0:	40 96       	adiw	r24, 0x10	; 16
     fa2:	fc 01       	movw	r30, r24
     fa4:	8b e0       	ldi	r24, 0x0B	; 11
     fa6:	df 01       	movw	r26, r30
     fa8:	1d 92       	st	X+, r1
     faa:	8a 95       	dec	r24
     fac:	e9 f7       	brne	.-6      	; 0xfa8 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     fb2:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	f1 db       	rcall	.-2078   	; 0x7a2 <Endpoint_ConfigureEndpointTable>
     fc0:	88 23       	and	r24, r24
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     fc4:	ce 01       	movw	r24, r28
     fc6:	06 96       	adiw	r24, 0x06	; 6
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	eb db       	rcall	.-2090   	; 0x7a2 <Endpoint_ConfigureEndpointTable>
     fcc:	88 23       	and	r24, r24
     fce:	41 f0       	breq	.+16     	; 0xfe0 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     fd0:	ce 01       	movw	r24, r28
     fd2:	0b 96       	adiw	r24, 0x0b	; 11
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	e5 db       	rcall	.-2102   	; 0x7a2 <Endpoint_ConfigureEndpointTable>
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <CDC_Device_ConfigureEndpoints+0x48>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <CDC_Device_ConfigureEndpoints+0x48>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fee:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     ff2:	83 ff       	sbrs	r24, 3
     ff4:	a3 c0       	rjmp	.+326    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     ff6:	88 81       	ld	r24, Y
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	20 91 1c 02 	lds	r18, 0x021C
     ffe:	30 91 1d 02 	lds	r19, 0x021D
    1002:	28 17       	cp	r18, r24
    1004:	39 07       	cpc	r19, r25
    1006:	09 f0       	breq	.+2      	; 0x100a <CDC_Device_ProcessControlRequest+0x22>
    1008:	99 c0       	rjmp	.+306    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    100a:	80 91 19 02 	lds	r24, 0x0219
    100e:	81 32       	cpi	r24, 0x21	; 33
    1010:	69 f0       	breq	.+26     	; 0x102c <CDC_Device_ProcessControlRequest+0x44>
    1012:	82 32       	cpi	r24, 0x22	; 34
    1014:	20 f4       	brcc	.+8      	; 0x101e <CDC_Device_ProcessControlRequest+0x36>
    1016:	80 32       	cpi	r24, 0x20	; 32
    1018:	09 f0       	breq	.+2      	; 0x101c <CDC_Device_ProcessControlRequest+0x34>
    101a:	90 c0       	rjmp	.+288    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
    101c:	3c c0       	rjmp	.+120    	; 0x1096 <CDC_Device_ProcessControlRequest+0xae>
    101e:	82 32       	cpi	r24, 0x22	; 34
    1020:	09 f4       	brne	.+2      	; 0x1024 <CDC_Device_ProcessControlRequest+0x3c>
    1022:	6b c0       	rjmp	.+214    	; 0x10fa <CDC_Device_ProcessControlRequest+0x112>
    1024:	83 32       	cpi	r24, 0x23	; 35
    1026:	09 f0       	breq	.+2      	; 0x102a <CDC_Device_ProcessControlRequest+0x42>
    1028:	89 c0       	rjmp	.+274    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
    102a:	7a c0       	rjmp	.+244    	; 0x1120 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    102c:	80 91 18 02 	lds	r24, 0x0218
    1030:	81 3a       	cpi	r24, 0xA1	; 161
    1032:	09 f0       	breq	.+2      	; 0x1036 <CDC_Device_ProcessControlRequest+0x4e>
    1034:	83 c0       	rjmp	.+262    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1036:	80 91 e8 00 	lds	r24, 0x00E8
    103a:	87 7f       	andi	r24, 0xF7	; 247
    103c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1040:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1044:	80 ff       	sbrs	r24, 0
    1046:	fc cf       	rjmp	.-8      	; 0x1040 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1048:	8c 89       	ldd	r24, Y+20	; 0x14
    104a:	9d 89       	ldd	r25, Y+21	; 0x15
    104c:	ae 89       	ldd	r26, Y+22	; 0x16
    104e:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1050:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1054:	29 2f       	mov	r18, r25
    1056:	3a 2f       	mov	r19, r26
    1058:	4b 2f       	mov	r20, r27
    105a:	55 27       	eor	r21, r21
    105c:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    1060:	9d 01       	movw	r18, r26
    1062:	44 27       	eor	r20, r20
    1064:	55 27       	eor	r21, r21
    1066:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    106a:	8b 2f       	mov	r24, r27
    106c:	99 27       	eor	r25, r25
    106e:	aa 27       	eor	r26, r26
    1070:	bb 27       	eor	r27, r27
    1072:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1076:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1078:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    107c:	89 8d       	ldd	r24, Y+25	; 0x19
    107e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1082:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1084:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1088:	80 91 e8 00 	lds	r24, 0x00E8
    108c:	8e 77       	andi	r24, 0x7E	; 126
    108e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1092:	c3 db       	rcall	.-2170   	; 0x81a <Endpoint_ClearStatusStage>
    1094:	53 c0       	rjmp	.+166    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1096:	80 91 18 02 	lds	r24, 0x0218
    109a:	81 32       	cpi	r24, 0x21	; 33
    109c:	09 f0       	breq	.+2      	; 0x10a0 <CDC_Device_ProcessControlRequest+0xb8>
    109e:	4e c0       	rjmp	.+156    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10a0:	80 91 e8 00 	lds	r24, 0x00E8
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	80 93 e8 00 	sts	0x00E8, r24
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    10ac:	80 91 17 02 	lds	r24, 0x0217
    10b0:	88 23       	and	r24, r24
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <CDC_Device_ProcessControlRequest+0xce>
    10b4:	43 c0       	rjmp	.+134    	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10b6:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    10ba:	82 ff       	sbrs	r24, 2
    10bc:	f7 cf       	rjmp	.-18     	; 0x10ac <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    10be:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    10c2:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    10c6:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    10ca:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    10ce:	8c 8b       	std	Y+20, r24	; 0x14
    10d0:	9d 8b       	std	Y+21, r25	; 0x15
    10d2:	2e 8b       	std	Y+22, r18	; 0x16
    10d4:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10d6:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    10da:	88 8f       	std	Y+24, r24	; 0x18
    10dc:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    10e0:	89 8f       	std	Y+25, r24	; 0x19
    10e2:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    10e6:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10e8:	80 91 e8 00 	lds	r24, 0x00E8
    10ec:	8b 77       	andi	r24, 0x7B	; 123
    10ee:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    10f2:	93 db       	rcall	.-2266   	; 0x81a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    10f4:	ce 01       	movw	r24, r28
    10f6:	d6 de       	rcall	.-596    	; 0xea4 <CDC_Device_Event_Stub>
    10f8:	21 c0       	rjmp	.+66     	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10fa:	80 91 18 02 	lds	r24, 0x0218
    10fe:	81 32       	cpi	r24, 0x21	; 33
    1100:	e9 f4       	brne	.+58     	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1102:	80 91 e8 00 	lds	r24, 0x00E8
    1106:	87 7f       	andi	r24, 0xF7	; 247
    1108:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    110c:	86 db       	rcall	.-2292   	; 0x81a <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    110e:	80 91 1a 02 	lds	r24, 0x021A
    1112:	90 91 1b 02 	lds	r25, 0x021B
    1116:	99 8b       	std	Y+17, r25	; 0x11
    1118:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    111a:	ce 01       	movw	r24, r28
    111c:	c3 de       	rcall	.-634    	; 0xea4 <CDC_Device_Event_Stub>
    111e:	0e c0       	rjmp	.+28     	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1120:	80 91 18 02 	lds	r24, 0x0218
    1124:	81 32       	cpi	r24, 0x21	; 33
    1126:	51 f4       	brne	.+20     	; 0x113c <CDC_Device_ProcessControlRequest+0x154>
    1128:	80 91 e8 00 	lds	r24, 0x00E8
    112c:	87 7f       	andi	r24, 0xF7	; 247
    112e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1132:	73 db       	rcall	.-2330   	; 0x81a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1134:	ce 01       	movw	r24, r28
    1136:	60 91 1a 02 	lds	r22, 0x021A
    113a:	b4 de       	rcall	.-664    	; 0xea4 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <fputs>:
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	7c 01       	movw	r14, r24
    1150:	8b 01       	movw	r16, r22
    1152:	db 01       	movw	r26, r22
    1154:	13 96       	adiw	r26, 0x03	; 3
    1156:	8c 91       	ld	r24, X
    1158:	81 fd       	sbrc	r24, 1
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <fputs+0x20>
    115c:	cf ef       	ldi	r28, 0xFF	; 255
    115e:	df ef       	ldi	r29, 0xFF	; 255
    1160:	13 c0       	rjmp	.+38     	; 0x1188 <fputs+0x46>
    1162:	c0 e0       	ldi	r28, 0x00	; 0
    1164:	d0 e0       	ldi	r29, 0x00	; 0
    1166:	0b c0       	rjmp	.+22     	; 0x117e <fputs+0x3c>
    1168:	d8 01       	movw	r26, r16
    116a:	18 96       	adiw	r26, 0x08	; 8
    116c:	ed 91       	ld	r30, X+
    116e:	fc 91       	ld	r31, X
    1170:	19 97       	sbiw	r26, 0x09	; 9
    1172:	b8 01       	movw	r22, r16
    1174:	09 95       	icall
    1176:	89 2b       	or	r24, r25
    1178:	11 f0       	breq	.+4      	; 0x117e <fputs+0x3c>
    117a:	cf ef       	ldi	r28, 0xFF	; 255
    117c:	df ef       	ldi	r29, 0xFF	; 255
    117e:	f7 01       	movw	r30, r14
    1180:	81 91       	ld	r24, Z+
    1182:	7f 01       	movw	r14, r30
    1184:	88 23       	and	r24, r24
    1186:	81 f7       	brne	.-32     	; 0x1168 <fputs+0x26>
    1188:	ce 01       	movw	r24, r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	e6 e0       	ldi	r30, 0x06	; 6
    1190:	0c c0       	rjmp	.+24     	; 0x11aa <__epilogue_restores__+0x18>

00001192 <__epilogue_restores__>:
    1192:	2a 88       	ldd	r2, Y+18	; 0x12
    1194:	39 88       	ldd	r3, Y+17	; 0x11
    1196:	48 88       	ldd	r4, Y+16	; 0x10
    1198:	5f 84       	ldd	r5, Y+15	; 0x0f
    119a:	6e 84       	ldd	r6, Y+14	; 0x0e
    119c:	7d 84       	ldd	r7, Y+13	; 0x0d
    119e:	8c 84       	ldd	r8, Y+12	; 0x0c
    11a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a4:	b9 84       	ldd	r11, Y+9	; 0x09
    11a6:	c8 84       	ldd	r12, Y+8	; 0x08
    11a8:	df 80       	ldd	r13, Y+7	; 0x07
    11aa:	ee 80       	ldd	r14, Y+6	; 0x06
    11ac:	fd 80       	ldd	r15, Y+5	; 0x05
    11ae:	0c 81       	ldd	r16, Y+4	; 0x04
    11b0:	1b 81       	ldd	r17, Y+3	; 0x03
    11b2:	aa 81       	ldd	r26, Y+2	; 0x02
    11b4:	b9 81       	ldd	r27, Y+1	; 0x01
    11b6:	ce 0f       	add	r28, r30
    11b8:	d1 1d       	adc	r29, r1
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	ed 01       	movw	r28, r26
    11c6:	08 95       	ret

000011c8 <_exit>:
    11c8:	f8 94       	cli

000011ca <__stop_program>:
    11ca:	ff cf       	rjmp	.-2      	; 0x11ca <__stop_program>
