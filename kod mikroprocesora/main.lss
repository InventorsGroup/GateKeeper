
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00001468  000014fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080015a  0080015a  00001556  2**0
                  ALLOC
  3 .debug_aranges 000004d8  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d40  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000083b2  00000000  00000000  0000276e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002212  00000000  00000000  0000ab20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006489  00000000  00000000  0000cd32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000770  00000000  00000000  000131bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000341b  00000000  00000000  0001392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003508  00000000  00000000  00016d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000688  00000000  00000000  0001a24f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    while (*s)
      uart_put(*s++);
}

unsigned char uart_get( void ) 
{
       0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       2:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       4:	99 c0       	rjmp	.+306    	; 0x138 <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	c9 c0       	rjmp	.+402    	; 0x19c <__vector_2>
       a:	00 00       	nop
       c:	95 c0       	rjmp	.+298    	; 0x138 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c0       	rjmp	.+294    	; 0x138 <__bad_interrupt>
      12:	00 00       	nop
      14:	91 c0       	rjmp	.+290    	; 0x138 <__bad_interrupt>
      16:	00 00       	nop
      18:	8f c0       	rjmp	.+286    	; 0x138 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8d c0       	rjmp	.+282    	; 0x138 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8b c0       	rjmp	.+278    	; 0x138 <__bad_interrupt>
      22:	00 00       	nop
      24:	89 c0       	rjmp	.+274    	; 0x138 <__bad_interrupt>
      26:	00 00       	nop
      28:	87 c0       	rjmp	.+270    	; 0x138 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b0 c5       	rjmp	.+2912   	; 0xb8e <__vector_11>
      2e:	00 00       	nop
      30:	73 c5       	rjmp	.+2790   	; 0xb18 <__vector_12>
      32:	00 00       	nop
      34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
      36:	00 00       	nop
      38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7b c0       	rjmp	.+246    	; 0x138 <__bad_interrupt>
      42:	00 00       	nop
      44:	79 c0       	rjmp	.+242    	; 0x138 <__bad_interrupt>
      46:	00 00       	nop
      48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c0       	rjmp	.+276    	; 0x162 <__vector_19>
      4e:	00 00       	nop
      50:	73 c0       	rjmp	.+230    	; 0x138 <__bad_interrupt>
      52:	00 00       	nop
      54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
      56:	00 00       	nop
      58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d5 c1       	rjmp	.+938    	; 0x408 <__vector_23>
      5e:	00 00       	nop
      60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
      62:	00 00       	nop
      64:	69 c0       	rjmp	.+210    	; 0x138 <__bad_interrupt>
      66:	00 00       	nop
      68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
      6e:	00 00       	nop
      70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      84:	dc 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      96:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      b6:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <ProductString>:
      e2:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      f2:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000100 <__ctors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	d2 e0       	ldi	r29, 0x02	; 2
     108:	de bf       	out	0x3e, r29	; 62
     10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
     10c:	11 e0       	ldi	r17, 0x01	; 1
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	e8 e6       	ldi	r30, 0x68	; 104
     114:	f4 e1       	ldi	r31, 0x14	; 20
     116:	02 c0       	rjmp	.+4      	; 0x11c <.do_copy_data_start>

00000118 <.do_copy_data_loop>:
     118:	05 90       	lpm	r0, Z+
     11a:	0d 92       	st	X+, r0

0000011c <.do_copy_data_start>:
     11c:	aa 35       	cpi	r26, 0x5A	; 90
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <.do_copy_data_loop>

00000122 <__do_clear_bss>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	aa e5       	ldi	r26, 0x5A	; 90
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a3 34       	cpi	r26, 0x43	; 67
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	05 d2       	rcall	.+1034   	; 0x53e <main>
     134:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <_exit>

00000138 <__bad_interrupt>:
     138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <uart_put>:
					},
			},
	};
	
void uart_put( unsigned char data )
{
     13a:	98 2f       	mov	r25, r24
	 while(!(UCSR1A & (1<<UDRE1)));
     13c:	80 91 c8 00 	lds	r24, 0x00C8
     140:	85 ff       	sbrs	r24, 5
     142:	fc cf       	rjmp	.-8      	; 0x13c <uart_put+0x2>
		UDR1=data;		        
     144:	90 93 ce 00 	sts	0x00CE, r25
}
     148:	08 95       	ret

0000014a <uart_puts>:

void uart_puts(const char *s )
{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	ec 01       	movw	r28, r24
     150:	02 c0       	rjmp	.+4      	; 0x156 <uart_puts+0xc>
    while (*s)
      uart_put(*s++);
     152:	21 96       	adiw	r28, 0x01	; 1
     154:	f2 df       	rcall	.-28     	; 0x13a <uart_put>
		UDR1=data;		        
}

void uart_puts(const char *s )
{
    while (*s)
     156:	88 81       	ld	r24, Y
     158:	88 23       	and	r24, r24
     15a:	d9 f7       	brne	.-10     	; 0x152 <uart_puts+0x8>
      uart_put(*s++);
}
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <__vector_19>:
volatile static bool bDebug = false;
volatile int16_t iRead = 0;

static volatile int8_t tim_cnter = 0;
ISR(TIMER0_COMPA_vect)
{
     162:	1f 92       	push	r1
     164:	0f 92       	push	r0
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
	tim_cnter++;
     170:	80 91 5f 01 	lds	r24, 0x015F
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	80 93 5f 01 	sts	0x015F, r24
	if(tim_cnter > 100)
     17a:	80 91 5f 01 	lds	r24, 0x015F
     17e:	85 36       	cpi	r24, 0x65	; 101
     180:	34 f0       	brlt	.+12     	; 0x18e <__vector_19+0x2c>
	{
		PORTB ^= (1 << PB6);
     182:	85 b1       	in	r24, 0x05	; 5
     184:	90 e4       	ldi	r25, 0x40	; 64
     186:	89 27       	eor	r24, r25
     188:	85 b9       	out	0x05, r24	; 5
		tim_cnter = 0;
     18a:	10 92 5f 01 	sts	0x015F, r1
	}
}
     18e:	9f 91       	pop	r25
     190:	8f 91       	pop	r24
     192:	0f 90       	pop	r0
     194:	0f be       	out	0x3f, r0	; 63
     196:	0f 90       	pop	r0
     198:	1f 90       	pop	r1
     19a:	18 95       	reti

0000019c <__vector_2>:

ISR(INT1_vect)
{
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	2f 93       	push	r18
     1a8:	3f 93       	push	r19
     1aa:	4f 93       	push	r20
     1ac:	5f 93       	push	r21
     1ae:	6f 93       	push	r22
     1b0:	7f 93       	push	r23
     1b2:	8f 93       	push	r24
     1b4:	9f 93       	push	r25
     1b6:	af 93       	push	r26
     1b8:	bf 93       	push	r27
     1ba:	ef 93       	push	r30
     1bc:	ff 93       	push	r31
	uart_puts("ATI\r");
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	c3 df       	rcall	.-122    	; 0x14a <uart_puts>
}
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	bf 91       	pop	r27
     1ca:	af 91       	pop	r26
     1cc:	9f 91       	pop	r25
     1ce:	8f 91       	pop	r24
     1d0:	7f 91       	pop	r23
     1d2:	6f 91       	pop	r22
     1d4:	5f 91       	pop	r21
     1d6:	4f 91       	pop	r20
     1d8:	3f 91       	pop	r19
     1da:	2f 91       	pop	r18
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <openGate>:

void openGate()
{
	PORTC |= (1 << PC7);
     1e6:	47 9a       	sbi	0x08, 7	; 8
     1e8:	80 e3       	ldi	r24, 0x30	; 48
     1ea:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ec:	28 ec       	ldi	r18, 0xC8	; 200
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <openGate+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <openGate+0xa>
	_delay_ms(3000);
	PORTC &= ~(1 << PC7);
     1fa:	47 98       	cbi	0x08, 7	; 8
}
     1fc:	08 95       	ret

000001fe <stringCheck>:
}

static volatile int8_t stringBuffer[100];
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
     1fe:	dc 01       	movw	r26, r24
	int i = 1;
	
	while(*s != phoneBuffer[i])
     200:	8c 91       	ld	r24, X
     202:	28 2f       	mov	r18, r24
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	41 e0       	ldi	r20, 0x01	; 1
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	0b c0       	rjmp	.+22     	; 0x222 <stringCheck+0x24>
	{
		i++;
     20c:	4f 5f       	subi	r20, 0xFF	; 255
     20e:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
     210:	80 91 58 01 	lds	r24, 0x0158
     214:	99 27       	eor	r25, r25
     216:	87 fd       	sbrc	r24, 7
     218:	90 95       	com	r25
     21a:	48 17       	cp	r20, r24
     21c:	59 07       	cpc	r21, r25
     21e:	0c f0       	brlt	.+2      	; 0x222 <stringCheck+0x24>
     220:	45 c0       	rjmp	.+138    	; 0x2ac <stringCheck+0xae>
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
	int i = 1;
	
	while(*s != phoneBuffer[i])
     222:	fa 01       	movw	r30, r20
     224:	e2 59       	subi	r30, 0x92	; 146
     226:	fe 4f       	sbci	r31, 0xFE	; 254
     228:	80 81       	ld	r24, Z
     22a:	99 27       	eor	r25, r25
     22c:	87 fd       	sbrc	r24, 7
     22e:	90 95       	com	r25
     230:	28 17       	cp	r18, r24
     232:	39 07       	cpc	r19, r25
     234:	59 f7       	brne	.-42     	; 0x20c <stringCheck+0xe>
     236:	16 c0       	rjmp	.+44     	; 0x264 <stringCheck+0x66>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     238:	fa 01       	movw	r30, r20
     23a:	e2 59       	subi	r30, 0x92	; 146
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	80 81       	ld	r24, Z
     240:	99 27       	eor	r25, r25
     242:	87 fd       	sbrc	r24, 7
     244:	90 95       	com	r25
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	82 17       	cp	r24, r18
     24a:	93 07       	cpc	r25, r19
     24c:	79 f5       	brne	.+94     	; 0x2ac <stringCheck+0xae>
			return 0;
		i++;			
     24e:	4f 5f       	subi	r20, 0xFF	; 255
     250:	5f 4f       	sbci	r21, 0xFF	; 255
		
		if(i > bufferLength-1)
     252:	80 91 58 01 	lds	r24, 0x0158
     256:	99 27       	eor	r25, r25
     258:	87 fd       	sbrc	r24, 7
     25a:	90 95       	com	r25
     25c:	48 17       	cp	r20, r24
     25e:	59 07       	cpc	r21, r25
     260:	2c f5       	brge	.+74     	; 0x2ac <stringCheck+0xae>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     262:	11 96       	adiw	r26, 0x01	; 1
	{
		i++;
		if(i > bufferLength-1)
			return 0;
	}
	while (*s)
     264:	2c 91       	ld	r18, X
     266:	22 23       	and	r18, r18
     268:	39 f7       	brne	.-50     	; 0x238 <stringCheck+0x3a>
		
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
     26a:	10 92 5e 01 	sts	0x015E, r1
     26e:	13 c0       	rjmp	.+38     	; 0x296 <stringCheck+0x98>
	while(i < bufferLength -1)
	{
		stringBuffer[stringCnter] = phoneBuffer[i];
     270:	e0 91 5e 01 	lds	r30, 0x015E
     274:	ff 27       	eor	r31, r31
     276:	e7 fd       	sbrc	r30, 7
     278:	f0 95       	com	r31
     27a:	da 01       	movw	r26, r20
     27c:	a2 59       	subi	r26, 0x92	; 146
     27e:	be 4f       	sbci	r27, 0xFE	; 254
     280:	8c 91       	ld	r24, X
     282:	ee 52       	subi	r30, 0x2E	; 46
     284:	fe 4f       	sbci	r31, 0xFE	; 254
     286:	80 83       	st	Z, r24
		stringCnter++;
     288:	80 91 5e 01 	lds	r24, 0x015E
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	80 93 5e 01 	sts	0x015E, r24
		i++;
     292:	4f 5f       	subi	r20, 0xFF	; 255
     294:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
	while(i < bufferLength -1)
     296:	80 91 58 01 	lds	r24, 0x0158
     29a:	99 27       	eor	r25, r25
     29c:	87 fd       	sbrc	r24, 7
     29e:	90 95       	com	r25
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	48 17       	cp	r20, r24
     2a4:	59 07       	cpc	r21, r25
     2a6:	24 f3       	brlt	.-56     	; 0x270 <stringCheck+0x72>
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
		stringCnter++;
		i++;
	}
	
	return 1;
}
     2ae:	08 95       	ret

000002b0 <findRinBuff>:

unsigned char findRinBuff()
{

	if(bufferLength < 2)
     2b0:	80 91 58 01 	lds	r24, 0x0158
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	94 f0       	brlt	.+36     	; 0x2dc <findRinBuff+0x2c>
     2b8:	22 e0       	ldi	r18, 0x02	; 2
     2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <findRinBuff+0x18>
		return 0;
		
	for(unsigned char i = 2; i < bufferLength; i++)
	{
		if(phoneBuffer[i] == 0x0D)
     2bc:	e2 59       	subi	r30, 0x92	; 146
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 30       	cpi	r24, 0x0D	; 13
     2c4:	61 f0       	breq	.+24     	; 0x2de <findRinBuff+0x2e>
{

	if(bufferLength < 2)
		return 0;
		
	for(unsigned char i = 2; i < bufferLength; i++)
     2c6:	2f 5f       	subi	r18, 0xFF	; 255
     2c8:	e2 2f       	mov	r30, r18
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 91 58 01 	lds	r24, 0x0158
     2d0:	99 27       	eor	r25, r25
     2d2:	87 fd       	sbrc	r24, 7
     2d4:	90 95       	com	r25
     2d6:	e8 17       	cp	r30, r24
     2d8:	f9 07       	cpc	r31, r25
     2da:	84 f3       	brlt	.-32     	; 0x2bc <findRinBuff+0xc>
     2dc:	20 e0       	ldi	r18, 0x00	; 0
			return i;
	}
	
	return 0;

}
     2de:	82 2f       	mov	r24, r18
     2e0:	08 95       	ret

000002e2 <bufferCheck>:

void bufferCheck()
{

	if(bufferLength > 1 && phoneBuffer[1] != 0x0D)
     2e2:	80 91 58 01 	lds	r24, 0x0158
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	3c f0       	brlt	.+14     	; 0x2f8 <bufferCheck+0x16>
     2ea:	80 91 6f 01 	lds	r24, 0x016F
     2ee:	8d 30       	cpi	r24, 0x0D	; 13
     2f0:	19 f0       	breq	.+6      	; 0x2f8 <bufferCheck+0x16>
		bufferLength = 1;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	80 93 58 01 	sts	0x0158, r24

	if(findRinBuff() > 0)
     2f8:	db df       	rcall	.-74     	; 0x2b0 <findRinBuff>
     2fa:	88 23       	and	r24, r24
     2fc:	09 f1       	breq	.+66     	; 0x340 <__stack+0x41>
	{
		if(stringCheck("RING") == 1)
     2fe:	85 e0       	ldi	r24, 0x05	; 5
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	7d df       	rcall	.-262    	; 0x1fe <stringCheck>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	61 f4       	brne	.+24     	; 0x320 <__stack+0x21>
		{
			uart_puts("ATH\r");
     308:	8a e0       	ldi	r24, 0x0A	; 10
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	1e df       	rcall	.-452    	; 0x14a <uart_puts>
     30e:	88 e8       	ldi	r24, 0x88	; 136
     310:	93 e1       	ldi	r25, 0x13	; 19
     312:	28 ec       	ldi	r18, 0xC8	; 200
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	f9 01       	movw	r30, r18
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <__stack+0x19>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     31c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     31e:	d9 f7       	brne	.-10     	; 0x316 <__stack+0x17>
			_delay_ms(500);
		}
		
		if(stringCheck("+CLCC: 1,1,6,") == 1)
     320:	8f e0       	ldi	r24, 0x0F	; 15
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	6c df       	rcall	.-296    	; 0x1fe <stringCheck>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	41 f4       	brne	.+16     	; 0x33a <__stack+0x3b>
		{	
		
			if(!(PINC && (1 << PC2)) || stringBuffer[21] != '"') // jeśli jest wpisany opis albo tryb wpuszczaj wszystkich
     32a:	86 b1       	in	r24, 0x06	; 6
     32c:	88 23       	and	r24, r24
     32e:	21 f0       	breq	.+8      	; 0x338 <__stack+0x39>
     330:	80 91 e7 01 	lds	r24, 0x01E7
     334:	82 32       	cpi	r24, 0x22	; 34
     336:	09 f0       	breq	.+2      	; 0x33a <__stack+0x3b>
			{
				openGate();
     338:	56 df       	rcall	.-340    	; 0x1e6 <openGate>
			}
			
		}
		
		bufferLength = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	80 93 58 01 	sts	0x0158, r24
     340:	08 95       	ret

00000342 <USARTInit>:


void USARTInit(unsigned int ubrr_value)
{
   
   UCSR1A |= (1 << U2X1);
     342:	e8 ec       	ldi	r30, 0xC8	; 200
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	20 81       	ld	r18, Z
     348:	22 60       	ori	r18, 0x02	; 2
     34a:	20 83       	st	Z, r18
   UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
     34c:	e9 ec       	ldi	r30, 0xC9	; 201
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	20 81       	ld	r18, Z
     352:	28 69       	ori	r18, 0x98	; 152
     354:	20 83       	st	Z, r18
   UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     356:	ea ec       	ldi	r30, 0xCA	; 202
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	20 81       	ld	r18, Z
     35c:	26 60       	ori	r18, 0x06	; 6
     35e:	20 83       	st	Z, r18
   UBRR1 = ubrr_value;
     360:	90 93 cd 00 	sts	0x00CD, r25
     364:	80 93 cc 00 	sts	0x00CC, r24
   DDRD |= (1 << PD3);
     368:	53 9a       	sbi	0x0a, 3	; 10
}
     36a:	08 95       	ret

0000036c <EVENT_USB_Device_Connect>:
}

void EVENT_USB_Device_Connect(void)
{

}
     36c:	08 95       	ret

0000036e <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{

}
     36e:	08 95       	ret

00000370 <EVENT_USB_Device_ControlRequest>:
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
}

void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     370:	8c e3       	ldi	r24, 0x3C	; 60
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	1e c7       	rjmp	.+3644   	; 0x11b2 <CDC_Device_ProcessControlRequest>

00000376 <EVENT_USB_Device_ConfigurationChanged>:
{

}

void EVENT_USB_Device_ConfigurationChanged(void)
{
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     37a:	00 91 57 01 	lds	r16, 0x0157
     37e:	8c e3       	ldi	r24, 0x3C	; 60
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	f0 d6       	rcall	.+3552   	; 0x1164 <CDC_Device_ConfigureEndpoints>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	80 23       	and	r24, r16
     38c:	91 23       	and	r25, r17
     38e:	89 2b       	or	r24, r25
     390:	09 f0       	breq	.+2      	; 0x394 <EVENT_USB_Device_ConfigurationChanged+0x1e>
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	20 93 57 01 	sts	0x0157, r18
}
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <SetupHardware>:
   DDRD |= (1 << PD3);
}

void SetupHardware(void)
{
	MCUSR &= ~(1 << WDRF);
     39e:	84 b7       	in	r24, 0x34	; 52
     3a0:	87 7f       	andi	r24, 0xF7	; 247
     3a2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3a4:	88 e1       	ldi	r24, 0x18	; 24
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	80 93 60 00 	sts	0x0060, r24
     3ae:	10 92 60 00 	sts	0x0060, r1
     3b2:	0f be       	out	0x3f, r0	; 63
	
	DDRB = (1 << PB5) | (1 << PB6) | (1 << PB4);	
     3b4:	80 e7       	ldi	r24, 0x70	; 112
     3b6:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << PC7);
     3b8:	80 e8       	ldi	r24, 0x80	; 128
     3ba:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC2);
     3bc:	42 9a       	sbi	0x08, 2	; 8
	
	
	clock_prescale_set(0);
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	20 e8       	ldi	r18, 0x80	; 128
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	20 93 61 00 	sts	0x0061, r18
     3cc:	80 93 61 00 	sts	0x0061, r24
     3d0:	0f be       	out	0x3f, r0	; 63

	USB_Init();	
     3d2:	93 d3       	rcall	.+1830   	; 0xafa <USB_Init>
	USARTInit(25);
     3d4:	89 e1       	ldi	r24, 0x19	; 25
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	b4 df       	rcall	.-152    	; 0x342 <USARTInit>
	
	TCCR0A |= (1 << WGM01);
     3da:	84 b5       	in	r24, 0x24	; 36
     3dc:	82 60       	ori	r24, 0x02	; 2
     3de:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02);
     3e0:	85 b5       	in	r24, 0x25	; 37
     3e2:	85 60       	ori	r24, 0x05	; 5
     3e4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
     3e6:	ee e6       	ldi	r30, 0x6E	; 110
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	82 60       	ori	r24, 0x02	; 2
     3ee:	80 83       	st	Z, r24
	OCR0A = 255;
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	87 bd       	out	0x27, r24	; 39
	
	DDRD &= ~(1 << PD1);
     3f4:	51 98       	cbi	0x0a, 1	; 10
	EICRA |= (1 << ISC11) | (1 << ISC10);
     3f6:	e9 e6       	ldi	r30, 0x69	; 105
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	8c 60       	ori	r24, 0x0C	; 12
     3fe:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
     400:	e9 9a       	sbi	0x1d, 1	; 29
	
	DDRC &= ~(1 << PC2);
     402:	3a 98       	cbi	0x07, 2	; 7
	PORTC |= (1 << PC2);
     404:	42 9a       	sbi	0x08, 2	; 8
}
     406:	08 95       	ret

00000408 <__vector_23>:
	PORTC &= ~(1 << PC7);
}


SIGNAL(USART1_RX_vect)
{
     408:	1f 92       	push	r1
     40a:	0f 92       	push	r0
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	0f 92       	push	r0
     410:	11 24       	eor	r1, r1
     412:	1f 93       	push	r17
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
     42c:	df 93       	push	r29
     42e:	cf 93       	push	r28
     430:	00 d0       	rcall	.+0      	; 0x432 <__vector_23+0x2a>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
	int8_t c = UDR1;
     436:	10 91 ce 00 	lds	r17, 0x00CE
	int16_t c2 = c;
	if(ConfigSuccess && bDebug)
     43a:	80 91 57 01 	lds	r24, 0x0157
     43e:	88 23       	and	r24, r24
     440:	79 f0       	breq	.+30     	; 0x460 <__vector_23+0x58>
     442:	80 91 5d 01 	lds	r24, 0x015D
     446:	88 23       	and	r24, r24
     448:	59 f0       	breq	.+22     	; 0x460 <__vector_23+0x58>


SIGNAL(USART1_RX_vect)
{
	int8_t c = UDR1;
	int16_t c2 = c;
     44a:	81 2f       	mov	r24, r17
     44c:	99 27       	eor	r25, r25
     44e:	87 fd       	sbrc	r24, 7
     450:	90 95       	com	r25
     452:	9a 83       	std	Y+2, r25	; 0x02
     454:	89 83       	std	Y+1, r24	; 0x01
	if(ConfigSuccess && bDebug)
		fputs(&c2, &USBSerialStream); // do debugu
     456:	ce 01       	movw	r24, r28
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	60 e6       	ldi	r22, 0x60	; 96
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	75 d7       	rcall	.+3818   	; 0x134a <fputs>
	
		
	if((bufferLength == 1 && c != 0x0D) || bufferLength > 98)
     460:	80 91 58 01 	lds	r24, 0x0158
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	11 f4       	brne	.+4      	; 0x46c <__vector_23+0x64>
     468:	1d 30       	cpi	r17, 0x0D	; 13
     46a:	89 f4       	brne	.+34     	; 0x48e <__vector_23+0x86>
     46c:	80 91 58 01 	lds	r24, 0x0158
     470:	83 36       	cpi	r24, 0x63	; 99
     472:	6c f4       	brge	.+26     	; 0x48e <__vector_23+0x86>
		return;
	
	phoneBuffer[bufferLength] = c;
     474:	e0 91 58 01 	lds	r30, 0x0158
     478:	ff 27       	eor	r31, r31
     47a:	e7 fd       	sbrc	r30, 7
     47c:	f0 95       	com	r31
     47e:	e2 59       	subi	r30, 0x92	; 146
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	10 83       	st	Z, r17
	bufferLength++;		
     484:	80 91 58 01 	lds	r24, 0x0158
     488:	8f 5f       	subi	r24, 0xFF	; 255
     48a:	80 93 58 01 	sts	0x0158, r24
}
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	cf 91       	pop	r28
     494:	df 91       	pop	r29
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	bf 91       	pop	r27
     49c:	af 91       	pop	r26
     49e:	9f 91       	pop	r25
     4a0:	8f 91       	pop	r24
     4a2:	7f 91       	pop	r23
     4a4:	6f 91       	pop	r22
     4a6:	5f 91       	pop	r21
     4a8:	4f 91       	pop	r20
     4aa:	3f 91       	pop	r19
     4ac:	2f 91       	pop	r18
     4ae:	1f 91       	pop	r17
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <pb_clear>:
		bufferLength = 1;
	}
}

void pb_clear(int from, int to)
{
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	df 93       	push	r29
     4cc:	cf 93       	push	r28
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <pb_clear+0x16>
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <pb_clear+0x18>
     4d2:	0f 92       	push	r0
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	6b 01       	movw	r12, r22
     4da:	8c 01       	movw	r16, r24
	char buffer[5];
	for (int i = from; i < to+1; i++)
	{
		uart_puts("AT+CPBW=");
		itoa(i, buffer, 10);
     4dc:	7e 01       	movw	r14, r28
     4de:	08 94       	sec
     4e0:	e1 1c       	adc	r14, r1
     4e2:	f1 1c       	adc	r15, r1
     4e4:	88 ec       	ldi	r24, 0xC8	; 200
     4e6:	a8 2e       	mov	r10, r24
     4e8:	b1 2c       	mov	r11, r1
     4ea:	16 c0       	rjmp	.+44     	; 0x518 <pb_clear+0x5e>
void pb_clear(int from, int to)
{
	char buffer[5];
	for (int i = from; i < to+1; i++)
	{
		uart_puts("AT+CPBW=");
     4ec:	8d e1       	ldi	r24, 0x1D	; 29
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	2c de       	rcall	.-936    	; 0x14a <uart_puts>
		itoa(i, buffer, 10);
     4f2:	c8 01       	movw	r24, r16
     4f4:	b7 01       	movw	r22, r14
     4f6:	4a e0       	ldi	r20, 0x0A	; 10
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	08 d7       	rcall	.+3600   	; 0x130c <itoa>
		uart_puts(buffer);
     4fc:	c7 01       	movw	r24, r14
     4fe:	25 de       	rcall	.-950    	; 0x14a <uart_puts>
		uart_puts("\r");
     500:	86 e2       	ldi	r24, 0x26	; 38
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	22 de       	rcall	.-956    	; 0x14a <uart_puts>
     506:	88 eb       	ldi	r24, 0xB8	; 184
     508:	9b e0       	ldi	r25, 0x0B	; 11
     50a:	f5 01       	movw	r30, r10
     50c:	31 97       	sbiw	r30, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <pb_clear+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     510:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     512:	d9 f7       	brne	.-10     	; 0x50a <pb_clear+0x50>
}

void pb_clear(int from, int to)
{
	char buffer[5];
	for (int i = from; i < to+1; i++)
     514:	0f 5f       	subi	r16, 0xFF	; 255
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	c0 16       	cp	r12, r16
     51a:	d1 06       	cpc	r13, r17
     51c:	3c f7       	brge	.-50     	; 0x4ec <pb_clear+0x32>
		itoa(i, buffer, 10);
		uart_puts(buffer);
		uart_puts("\r");
		_delay_ms(300);
	}
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	cf 91       	pop	r28
     52a:	df 91       	pop	r29
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	bf 90       	pop	r11
     53a:	af 90       	pop	r10
     53c:	08 95       	ret

0000053e <main>:


int main(void)
{	
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	df 93       	push	r29
     556:	cf 93       	push	r28
     558:	00 d0       	rcall	.+0      	; 0x55a <main+0x1c>
     55a:	00 d0       	rcall	.+0      	; 0x55c <main+0x1e>
     55c:	0f 92       	push	r0
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();    
     562:	1d df       	rcall	.-454    	; 0x39e <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);	
     564:	8c e3       	ldi	r24, 0x3C	; 60
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	60 e6       	ldi	r22, 0x60	; 96
     56a:	71 e0       	ldi	r23, 0x01	; 1
     56c:	62 d5       	rcall	.+2756   	; 0x1032 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     56e:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     570:	80 e5       	ldi	r24, 0x50	; 80
     572:	93 ec       	ldi	r25, 0xC3	; 195
     574:	28 ec       	ldi	r18, 0xC8	; 200
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	f9 01       	movw	r30, r18
     57a:	31 97       	sbiw	r30, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     57e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     580:	d9 f7       	brne	.-10     	; 0x578 <main+0x3a>
	GlobalInterruptEnable();
	
	_delay_ms(5000);
	uart_puts("ATI\r");
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	e1 dd       	rcall	.-1086   	; 0x14a <uart_puts>
     588:	88 e8       	ldi	r24, 0x88	; 136
     58a:	93 e1       	ldi	r25, 0x13	; 19
     58c:	28 ec       	ldi	r18, 0xC8	; 200
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	f9 01       	movw	r30, r18
     592:	31 97       	sbiw	r30, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     596:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     598:	d9 f7       	brne	.-10     	; 0x590 <main+0x52>
	_delay_ms(500);

	numbers = eeprom_read_word(( uint16_t *)1);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	fd d6       	rcall	.+3578   	; 0x139a <__eerd_word_usb162>
     5a0:	80 93 5c 01 	sts	0x015C, r24
				
				if(b == 0x1B)
					openGate();
					
				if(b == 'd')
					bDebug = !bDebug;
     5a4:	77 24       	eor	r7, r7
     5a6:	73 94       	inc	r7
				{
					iRead++;
					uart_puts("AT+CPBW=");
					
					char buff[5];
					itoa(iRead, buff, 10);
     5a8:	5e 01       	movw	r10, r28
     5aa:	08 94       	sec
     5ac:	a1 1c       	adc	r10, r1
     5ae:	b1 1c       	adc	r11, r1
     5b0:	38 ec       	ldi	r19, 0xC8	; 200
     5b2:	83 2e       	mov	r8, r19
     5b4:	91 2c       	mov	r9, r1

	numbers = eeprom_read_word(( uint16_t *)1);
	
	for (;;)
	{
		if(ConfigSuccess)
     5b6:	80 91 57 01 	lds	r24, 0x0157
     5ba:	88 23       	and	r24, r24
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <main+0x82>
     5be:	a9 c0       	rjmp	.+338    	; 0x712 <main+0x1d4>
		{
			int16_t b = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     5c0:	8c e3       	ldi	r24, 0x3C	; 60
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	08 d5       	rcall	.+2576   	; 0xfd6 <CDC_Device_ReceiveByte>
     5c6:	6c 01       	movw	r12, r24
			
			if(b > -1)
     5c8:	97 fd       	sbrc	r25, 7
     5ca:	9f c0       	rjmp	.+318    	; 0x70a <main+0x1cc>
			{
					
				if(b == '*')
     5cc:	8a e2       	ldi	r24, 0x2A	; 42
     5ce:	c8 16       	cp	r12, r24
     5d0:	d1 04       	cpc	r13, r1
     5d2:	29 f4       	brne	.+10     	; 0x5de <main+0xa0>
				{
					iRead = 0;					
     5d4:	10 92 5b 01 	sts	0x015B, r1
     5d8:	10 92 5a 01 	sts	0x015A, r1
     5dc:	48 c0       	rjmp	.+144    	; 0x66e <main+0x130>
				}	
				
				if(b == '\r' || b == 0x1A)
     5de:	8d e0       	ldi	r24, 0x0D	; 13
     5e0:	c8 16       	cp	r12, r24
     5e2:	d1 04       	cpc	r13, r1
     5e4:	29 f0       	breq	.+10     	; 0x5f0 <main+0xb2>
     5e6:	8a e1       	ldi	r24, 0x1A	; 26
     5e8:	c8 16       	cp	r12, r24
     5ea:	d1 04       	cpc	r13, r1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <main+0xb2>
     5ee:	3b c0       	rjmp	.+118    	; 0x666 <main+0x128>
				{
					uart_puts("\",129,\"aa\"\r");
     5f0:	88 e2       	ldi	r24, 0x28	; 40
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	aa dd       	rcall	.-1196   	; 0x14a <uart_puts>
     5f6:	88 eb       	ldi	r24, 0xB8	; 184
     5f8:	9b e0       	ldi	r25, 0x0B	; 11
     5fa:	f4 01       	movw	r30, r8
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <main+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     600:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     602:	d9 f7       	brne	.-10     	; 0x5fa <main+0xbc>
					_delay_ms(300);
					bufferLength = 1;
     604:	70 92 58 01 	sts	0x0158, r7
					
					fputs("ok\r\n", &USBSerialStream);
     608:	84 e3       	ldi	r24, 0x34	; 52
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	60 e6       	ldi	r22, 0x60	; 96
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	9c d6       	rcall	.+3384   	; 0x134a <fputs>
				}
				
				if(b == 0x1A)
     612:	8a e1       	ldi	r24, 0x1A	; 26
     614:	c8 16       	cp	r12, r24
     616:	d1 04       	cpc	r13, r1
     618:	31 f5       	brne	.+76     	; 0x666 <main+0x128>
				{
					if(numbers > iRead)
     61a:	80 91 5c 01 	lds	r24, 0x015C
     61e:	20 91 5a 01 	lds	r18, 0x015A
     622:	30 91 5b 01 	lds	r19, 0x015B
     626:	99 27       	eor	r25, r25
     628:	87 fd       	sbrc	r24, 7
     62a:	90 95       	com	r25
     62c:	28 17       	cp	r18, r24
     62e:	39 07       	cpc	r19, r25
     630:	5c f4       	brge	.+22     	; 0x648 <main+0x10a>
						pb_clear(iRead +1, numbers);
     632:	80 91 5a 01 	lds	r24, 0x015A
     636:	90 91 5b 01 	lds	r25, 0x015B
     63a:	60 91 5c 01 	lds	r22, 0x015C
     63e:	77 27       	eor	r23, r23
     640:	67 fd       	sbrc	r22, 7
     642:	70 95       	com	r23
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	39 df       	rcall	.-398    	; 0x4ba <pb_clear>
					
					numbers = iRead;
     648:	80 91 5a 01 	lds	r24, 0x015A
     64c:	90 91 5b 01 	lds	r25, 0x015B
     650:	80 93 5c 01 	sts	0x015C, r24
					eeprom_write_word((uint16_t*)1, (uint16_t)numbers);
     654:	60 91 5c 01 	lds	r22, 0x015C
     658:	77 27       	eor	r23, r23
     65a:	67 fd       	sbrc	r22, 7
     65c:	70 95       	com	r23
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 d6       	rcall	.+3392   	; 0x13a4 <__eewr_word_usb162>
     664:	3d c0       	rjmp	.+122    	; 0x6e0 <main+0x1a2>
				}		
								
				if(b == '*' || b == '\r')
     666:	8d e0       	ldi	r24, 0x0D	; 13
     668:	c8 16       	cp	r12, r24
     66a:	d1 04       	cpc	r13, r1
     66c:	c9 f5       	brne	.+114    	; 0x6e0 <main+0x1a2>
				{
					iRead++;
     66e:	80 91 5a 01 	lds	r24, 0x015A
     672:	90 91 5b 01 	lds	r25, 0x015B
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	90 93 5b 01 	sts	0x015B, r25
     67c:	80 93 5a 01 	sts	0x015A, r24
					uart_puts("AT+CPBW=");
     680:	8d e1       	ldi	r24, 0x1D	; 29
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	62 dd       	rcall	.-1340   	; 0x14a <uart_puts>
					
					char buff[5];
					itoa(iRead, buff, 10);
     686:	80 91 5a 01 	lds	r24, 0x015A
     68a:	90 91 5b 01 	lds	r25, 0x015B
     68e:	b5 01       	movw	r22, r10
     690:	4a e0       	ldi	r20, 0x0A	; 10
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	3b d6       	rcall	.+3190   	; 0x130c <itoa>
					
					int korekcja = 0;				
					if(iRead > 99)
     696:	80 91 5a 01 	lds	r24, 0x015A
     69a:	90 91 5b 01 	lds	r25, 0x015B
     69e:	84 36       	cpi	r24, 0x64	; 100
     6a0:	91 05       	cpc	r25, r1
     6a2:	24 f0       	brlt	.+8      	; 0x6ac <main+0x16e>
     6a4:	22 e0       	ldi	r18, 0x02	; 2
     6a6:	e2 2e       	mov	r14, r18
     6a8:	f1 2c       	mov	r15, r1
     6aa:	0b c0       	rjmp	.+22     	; 0x6c2 <main+0x184>
					{
						korekcja = 2;
					}
					else if(iRead > 9)
     6ac:	80 91 5a 01 	lds	r24, 0x015A
     6b0:	90 91 5b 01 	lds	r25, 0x015B
     6b4:	ee 24       	eor	r14, r14
     6b6:	ff 24       	eor	r15, r15
     6b8:	0a 97       	sbiw	r24, 0x0a	; 10
     6ba:	1c f0       	brlt	.+6      	; 0x6c2 <main+0x184>
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	e9 2e       	mov	r14, r25
     6c0:	f1 2c       	mov	r15, r1
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
					{
						korekcja = 1;
					}
					
					for(int i = 0; i < korekcja+1; i++)
						uart_put(buff[i]);
     6c6:	f5 01       	movw	r30, r10
     6c8:	e0 0f       	add	r30, r16
     6ca:	f1 1f       	adc	r31, r17
     6cc:	80 81       	ld	r24, Z
     6ce:	35 dd       	rcall	.-1430   	; 0x13a <uart_put>
					else if(iRead > 9)
					{
						korekcja = 1;
					}
					
					for(int i = 0; i < korekcja+1; i++)
     6d0:	0f 5f       	subi	r16, 0xFF	; 255
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	e0 16       	cp	r14, r16
     6d6:	f1 06       	cpc	r15, r17
     6d8:	b4 f7       	brge	.-20     	; 0x6c6 <main+0x188>
						uart_put(buff[i]);
						
					uart_puts(",\"");
     6da:	89 e3       	ldi	r24, 0x39	; 57
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	35 dd       	rcall	.-1430   	; 0x14a <uart_puts>
				}

				if(b > 47 && b < 58)
     6e0:	c6 01       	movw	r24, r12
     6e2:	c0 97       	sbiw	r24, 0x30	; 48
     6e4:	0a 97       	sbiw	r24, 0x0a	; 10
     6e6:	10 f4       	brcc	.+4      	; 0x6ec <main+0x1ae>
				{
					uart_put(b);			
     6e8:	8c 2d       	mov	r24, r12
     6ea:	27 dd       	rcall	.-1458   	; 0x13a <uart_put>
				}
				
				if(b == 0x1B)
     6ec:	8b e1       	ldi	r24, 0x1B	; 27
     6ee:	c8 16       	cp	r12, r24
     6f0:	d1 04       	cpc	r13, r1
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <main+0x1ba>
					openGate();
     6f4:	78 dd       	rcall	.-1296   	; 0x1e6 <openGate>
     6f6:	09 c0       	rjmp	.+18     	; 0x70a <main+0x1cc>
					
				if(b == 'd')
     6f8:	84 e6       	ldi	r24, 0x64	; 100
     6fa:	c8 16       	cp	r12, r24
     6fc:	d1 04       	cpc	r13, r1
     6fe:	29 f4       	brne	.+10     	; 0x70a <main+0x1cc>
					bDebug = !bDebug;
     700:	80 91 5d 01 	lds	r24, 0x015D
     704:	87 25       	eor	r24, r7
     706:	80 93 5d 01 	sts	0x015D, r24
									
			}
			
			CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     70a:	8c e3       	ldi	r24, 0x3C	; 60
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	dd d4       	rcall	.+2490   	; 0x10ca <CDC_Device_USBTask>
			USB_USBTask();
     710:	4d d4       	rcall	.+2202   	; 0xfac <USB_USBTask>
		}
		bufferCheck();
     712:	e7 dd       	rcall	.-1074   	; 0x2e2 <bufferCheck>
		
		if(!(PINC && (1 << PC2)))
     714:	86 b1       	in	r24, 0x06	; 6
     716:	88 23       	and	r24, r24
     718:	11 f4       	brne	.+4      	; 0x71e <main+0x1e0>
			PORTB |= (1 << PB5);
     71a:	2d 9a       	sbi	0x05, 5	; 5
     71c:	4c cf       	rjmp	.-360    	; 0x5b6 <main+0x78>
		else
			PORTB &= ~(1 << PB5);
     71e:	2d 98       	cbi	0x05, 5	; 5
     720:	4a cf       	rjmp	.-364    	; 0x5b6 <main+0x78>

00000722 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     722:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     724:	92 30       	cpi	r25, 0x02	; 2
     726:	49 f0       	breq	.+18     	; 0x73a <CALLBACK_USB_GetDescriptor+0x18>
     728:	93 30       	cpi	r25, 0x03	; 3
     72a:	61 f0       	breq	.+24     	; 0x744 <CALLBACK_USB_GetDescriptor+0x22>
     72c:	91 30       	cpi	r25, 0x01	; 1
     72e:	f9 f4       	brne	.+62     	; 0x76e <CALLBACK_USB_GetDescriptor+0x4c>
     730:	e4 e7       	ldi	r30, 0x74	; 116
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	22 e1       	ldi	r18, 0x12	; 18
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	1e c0       	rjmp	.+60     	; 0x776 <CALLBACK_USB_GetDescriptor+0x54>
     73a:	e6 e8       	ldi	r30, 0x86	; 134
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	2e e3       	ldi	r18, 0x3E	; 62
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	19 c0       	rjmp	.+50     	; 0x776 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	49 f0       	breq	.+18     	; 0x75a <CALLBACK_USB_GetDescriptor+0x38>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	18 f0       	brcs	.+6      	; 0x752 <CALLBACK_USB_GetDescriptor+0x30>
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	79 f4       	brne	.+30     	; 0x76e <CALLBACK_USB_GetDescriptor+0x4c>
     750:	08 c0       	rjmp	.+16     	; 0x762 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     752:	e4 ec       	ldi	r30, 0xC4	; 196
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	84 91       	lpm	r24, Z+
     758:	07 c0       	rjmp	.+14     	; 0x768 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     75a:	e8 ec       	ldi	r30, 0xC8	; 200
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	84 91       	lpm	r24, Z+
     760:	03 c0       	rjmp	.+6      	; 0x768 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     762:	e2 ee       	ldi	r30, 0xE2	; 226
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	84 91       	lpm	r24, Z+
     768:	28 2f       	mov	r18, r24
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	04 c0       	rjmp	.+8      	; 0x776 <CALLBACK_USB_GetDescriptor+0x54>
     76e:	e0 e0       	ldi	r30, 0x00	; 0
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     776:	ed 93       	st	X+, r30
     778:	fc 93       	st	X, r31
	return Size;
}
     77a:	c9 01       	movw	r24, r18
     77c:	08 95       	ret

0000077e <Endpoint_Write_Control_Stream_LE>:
     77e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     780:	40 91 41 02 	lds	r20, 0x0241
     784:	50 91 42 02 	lds	r21, 0x0242
     788:	46 17       	cp	r20, r22
     78a:	57 07       	cpc	r21, r23
     78c:	18 f4       	brcc	.+6      	; 0x794 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     78e:	f9 01       	movw	r30, r18
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	3d c0       	rjmp	.+122    	; 0x80e <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     794:	61 15       	cp	r22, r1
     796:	71 05       	cpc	r23, r1
     798:	11 f0       	breq	.+4      	; 0x79e <Endpoint_Write_Control_Stream_LE+0x20>
     79a:	ab 01       	movw	r20, r22
     79c:	f8 cf       	rjmp	.-16     	; 0x78e <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     79e:	80 91 e8 00 	lds	r24, 0x00E8
     7a2:	8e 77       	andi	r24, 0x7E	; 126
     7a4:	80 93 e8 00 	sts	0x00E8, r24
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	f0 cf       	rjmp	.-32     	; 0x78e <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7ae:	80 91 3a 02 	lds	r24, 0x023A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7b2:	88 23       	and	r24, r24
     7b4:	f1 f1       	breq	.+124    	; 0x832 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7b6:	85 30       	cpi	r24, 0x05	; 5
     7b8:	f1 f1       	breq	.+124    	; 0x836 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7ba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7be:	83 ff       	sbrs	r24, 3
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0x48>
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7ca:	82 fd       	sbrc	r24, 2
     7cc:	2c c0       	rjmp	.+88     	; 0x826 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ce:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     7d2:	80 ff       	sbrs	r24, 0
     7d4:	1c c0       	rjmp	.+56     	; 0x80e <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     7d6:	80 91 f2 00 	lds	r24, 0x00F2
     7da:	28 2f       	mov	r18, r24
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	07 c0       	rjmp	.+14     	; 0x7ee <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7e0:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7e2:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     7e6:	41 50       	subi	r20, 0x01	; 1
     7e8:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     7ea:	2f 5f       	subi	r18, 0xFF	; 255
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7ee:	41 15       	cp	r20, r1
     7f0:	51 05       	cpc	r21, r1
     7f2:	19 f0       	breq	.+6      	; 0x7fa <Endpoint_Write_Control_Stream_LE+0x7c>
     7f4:	28 30       	cpi	r18, 0x08	; 8
     7f6:	31 05       	cpc	r19, r1
     7f8:	98 f3       	brcs	.-26     	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	28 30       	cpi	r18, 0x08	; 8
     7fe:	31 05       	cpc	r19, r1
     800:	09 f4       	brne	.+2      	; 0x804 <Endpoint_Write_Control_Stream_LE+0x86>
     802:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     804:	80 91 e8 00 	lds	r24, 0x00E8
     808:	8e 77       	andi	r24, 0x7E	; 126
     80a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     80e:	41 15       	cp	r20, r1
     810:	51 05       	cpc	r21, r1
     812:	69 f6       	brne	.-102    	; 0x7ae <Endpoint_Write_Control_Stream_LE+0x30>
     814:	99 23       	and	r25, r25
     816:	59 f6       	brne	.-106    	; 0x7ae <Endpoint_Write_Control_Stream_LE+0x30>
     818:	06 c0       	rjmp	.+12     	; 0x826 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     81a:	80 91 3a 02 	lds	r24, 0x023A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     81e:	88 23       	and	r24, r24
     820:	41 f0       	breq	.+16     	; 0x832 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     822:	85 30       	cpi	r24, 0x05	; 5
     824:	41 f0       	breq	.+16     	; 0x836 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     826:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     82a:	82 ff       	sbrs	r24, 2
     82c:	f6 cf       	rjmp	.-20     	; 0x81a <Endpoint_Write_Control_Stream_LE+0x9c>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	08 95       	ret
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	08 95       	ret
     836:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     838:	08 95       	ret

0000083a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     83a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     83c:	40 91 41 02 	lds	r20, 0x0241
     840:	50 91 42 02 	lds	r21, 0x0242
     844:	46 17       	cp	r20, r22
     846:	57 07       	cpc	r21, r23
     848:	18 f4       	brcc	.+6      	; 0x850 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     84a:	f9 01       	movw	r30, r18
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	40 c0       	rjmp	.+128    	; 0x8d0 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     850:	61 15       	cp	r22, r1
     852:	71 05       	cpc	r23, r1
     854:	11 f0       	breq	.+4      	; 0x85a <Endpoint_Write_Control_PStream_LE+0x20>
     856:	ab 01       	movw	r20, r22
     858:	f8 cf       	rjmp	.-16     	; 0x84a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     85a:	80 91 e8 00 	lds	r24, 0x00E8
     85e:	8e 77       	andi	r24, 0x7E	; 126
     860:	80 93 e8 00 	sts	0x00E8, r24
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	f0 cf       	rjmp	.-32     	; 0x84a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     86a:	80 91 3a 02 	lds	r24, 0x023A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     86e:	88 23       	and	r24, r24
     870:	09 f4       	brne	.+2      	; 0x874 <Endpoint_Write_Control_PStream_LE+0x3a>
     872:	40 c0       	rjmp	.+128    	; 0x8f4 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	09 f4       	brne	.+2      	; 0x87a <Endpoint_Write_Control_PStream_LE+0x40>
     878:	3f c0       	rjmp	.+126    	; 0x8f8 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     87a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     87e:	83 ff       	sbrs	r24, 3
     880:	02 c0       	rjmp	.+4      	; 0x886 <Endpoint_Write_Control_PStream_LE+0x4c>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     886:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     88a:	82 fd       	sbrc	r24, 2
     88c:	2d c0       	rjmp	.+90     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     88e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     892:	80 ff       	sbrs	r24, 0
     894:	1d c0       	rjmp	.+58     	; 0x8d0 <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     896:	80 91 f2 00 	lds	r24, 0x00F2
     89a:	28 2f       	mov	r18, r24
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	08 c0       	rjmp	.+16     	; 0x8b0 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8a0:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8a2:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     8a6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     8a8:	41 50       	subi	r20, 0x01	; 1
     8aa:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     8b0:	41 15       	cp	r20, r1
     8b2:	51 05       	cpc	r21, r1
     8b4:	19 f0       	breq	.+6      	; 0x8bc <Endpoint_Write_Control_PStream_LE+0x82>
     8b6:	28 30       	cpi	r18, 0x08	; 8
     8b8:	31 05       	cpc	r19, r1
     8ba:	90 f3       	brcs	.-28     	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	28 30       	cpi	r18, 0x08	; 8
     8c0:	31 05       	cpc	r19, r1
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <Endpoint_Write_Control_PStream_LE+0x8c>
     8c4:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8c6:	80 91 e8 00 	lds	r24, 0x00E8
     8ca:	8e 77       	andi	r24, 0x7E	; 126
     8cc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8d0:	41 15       	cp	r20, r1
     8d2:	51 05       	cpc	r21, r1
     8d4:	51 f6       	brne	.-108    	; 0x86a <Endpoint_Write_Control_PStream_LE+0x30>
     8d6:	99 23       	and	r25, r25
     8d8:	41 f6       	brne	.-112    	; 0x86a <Endpoint_Write_Control_PStream_LE+0x30>
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8dc:	80 91 3a 02 	lds	r24, 0x023A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8e0:	88 23       	and	r24, r24
     8e2:	41 f0       	breq	.+16     	; 0x8f4 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8e4:	85 30       	cpi	r24, 0x05	; 5
     8e6:	41 f0       	breq	.+16     	; 0x8f8 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8e8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     8ec:	82 ff       	sbrs	r24, 2
     8ee:	f6 cf       	rjmp	.-20     	; 0x8dc <Endpoint_Write_Control_PStream_LE+0xa2>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	08 95       	ret
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	08 95       	ret
     8f8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8fa:	08 95       	ret

000008fc <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     8fc:	38 2f       	mov	r19, r24
     8fe:	28 2f       	mov	r18, r24
     900:	2e c0       	rjmp	.+92     	; 0x95e <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     902:	82 2f       	mov	r24, r18
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     90a:	23 17       	cp	r18, r19
     90c:	21 f4       	brne	.+8      	; 0x916 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     90e:	76 2f       	mov	r23, r22
     910:	94 2f       	mov	r25, r20
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	06 c0       	rjmp	.+12     	; 0x922 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     916:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     91a:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     91e:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     922:	91 ff       	sbrs	r25, 1
     924:	1b c0       	rjmp	.+54     	; 0x95c <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     926:	80 91 eb 00 	lds	r24, 0x00EB
     92a:	8e 7f       	andi	r24, 0xFE	; 254
     92c:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     930:	80 91 ed 00 	lds	r24, 0x00ED
     934:	8d 7f       	andi	r24, 0xFD	; 253
     936:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     93a:	80 91 eb 00 	lds	r24, 0x00EB
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     944:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     948:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     94c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     950:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     954:	87 fd       	sbrc	r24, 7
     956:	02 c0       	rjmp	.+4      	; 0x95c <Endpoint_ConfigureEndpoint_Prv+0x60>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     95c:	2f 5f       	subi	r18, 0xFF	; 255
     95e:	25 30       	cpi	r18, 0x05	; 5
     960:	80 f2       	brcs	.-96     	; 0x902 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     962:	3f 70       	andi	r19, 0x0F	; 15
     964:	30 93 e9 00 	sts	0x00E9, r19
     968:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     96a:	08 95       	ret

0000096c <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	06 2f       	mov	r16, r22
     976:	ec 01       	movw	r28, r24
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	2a c0       	rjmp	.+84     	; 0x9d0 <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     97c:	98 81       	ld	r25, Y
     97e:	99 23       	and	r25, r25
     980:	29 f1       	breq	.+74     	; 0x9cc <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     982:	6b 81       	ldd	r22, Y+3	; 0x03
     984:	e9 81       	ldd	r30, Y+1	; 0x01
     986:	fa 81       	ldd	r31, Y+2	; 0x02
     988:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     98a:	89 2f       	mov	r24, r25
     98c:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     98e:	85 30       	cpi	r24, 0x05	; 5
     990:	18 f5       	brcc	.+70     	; 0x9d8 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     992:	22 30       	cpi	r18, 0x02	; 2
     994:	10 f4       	brcc	.+4      	; 0x99a <Endpoint_ConfigureEndpointTable+0x2e>
     996:	52 e0       	ldi	r21, 0x02	; 2
     998:	01 c0       	rjmp	.+2      	; 0x99c <Endpoint_ConfigureEndpointTable+0x30>
     99a:	56 e0       	ldi	r21, 0x06	; 6
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	28 e0       	ldi	r18, 0x08	; 8
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	03 c0       	rjmp	.+6      	; 0x9aa <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     9a4:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     9a6:	22 0f       	add	r18, r18
     9a8:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     9aa:	2e 17       	cp	r18, r30
     9ac:	3f 07       	cpc	r19, r31
     9ae:	d0 f3       	brcs	.-12     	; 0x9a4 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9b0:	62 95       	swap	r22
     9b2:	66 0f       	add	r22, r22
     9b4:	66 0f       	add	r22, r22
     9b6:	60 7c       	andi	r22, 0xC0	; 192
     9b8:	99 1f       	adc	r25, r25
     9ba:	99 27       	eor	r25, r25
     9bc:	99 1f       	adc	r25, r25
     9be:	69 2b       	or	r22, r25
     9c0:	42 95       	swap	r20
     9c2:	40 7f       	andi	r20, 0xF0	; 240
     9c4:	45 2b       	or	r20, r21
     9c6:	9a df       	rcall	.-204    	; 0x8fc <Endpoint_ConfigureEndpoint_Prv>
     9c8:	88 23       	and	r24, r24
     9ca:	31 f0       	breq	.+12     	; 0x9d8 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     9cc:	1f 5f       	subi	r17, 0xFF	; 255
     9ce:	25 96       	adiw	r28, 0x05	; 5
     9d0:	10 17       	cp	r17, r16
     9d2:	a0 f2       	brcs	.-88     	; 0x97c <Endpoint_ConfigureEndpointTable+0x10>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <Endpoint_ConfigureEndpointTable+0x6e>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     9e4:	80 91 3b 02 	lds	r24, 0x023B
     9e8:	88 23       	and	r24, r24
     9ea:	9c f4       	brge	.+38     	; 0xa12 <Endpoint_ClearStatusStage+0x2e>
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9ee:	80 91 3a 02 	lds	r24, 0x023A
     9f2:	88 23       	and	r24, r24
     9f4:	b9 f0       	breq	.+46     	; 0xa24 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9f6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     9fa:	82 ff       	sbrs	r24, 2
     9fc:	f8 cf       	rjmp	.-16     	; 0x9ee <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9fe:	80 91 e8 00 	lds	r24, 0x00E8
     a02:	8b 77       	andi	r24, 0x7B	; 123
     a04:	80 93 e8 00 	sts	0x00E8, r24
     a08:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a0a:	80 91 3a 02 	lds	r24, 0x023A
     a0e:	88 23       	and	r24, r24
     a10:	49 f0       	breq	.+18     	; 0xa24 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a12:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a16:	80 ff       	sbrs	r24, 0
     a18:	f8 cf       	rjmp	.-16     	; 0xa0a <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a1a:	80 91 e8 00 	lds	r24, 0x00E8
     a1e:	8e 77       	andi	r24, 0x7E	; 126
     a20:	80 93 e8 00 	sts	0x00E8, r24
     a24:	08 95       	ret

00000a26 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     a26:	40 91 e4 00 	lds	r20, 0x00E4
     a2a:	50 91 e5 00 	lds	r21, 0x00E5
     a2e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a30:	80 91 ec 00 	lds	r24, 0x00EC
     a34:	80 ff       	sbrs	r24, 0
     a36:	24 c0       	rjmp	.+72     	; 0xa80 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a38:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     a3c:	80 fd       	sbrc	r24, 0
     a3e:	1e c0       	rjmp	.+60     	; 0xa7c <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a40:	80 91 3a 02 	lds	r24, 0x023A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a44:	88 23       	and	r24, r24
     a46:	11 f4       	brne	.+4      	; 0xa4c <Endpoint_WaitUntilReady+0x26>
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a4c:	85 30       	cpi	r24, 0x05	; 5
     a4e:	11 f4       	brne	.+4      	; 0xa54 <Endpoint_WaitUntilReady+0x2e>
     a50:	83 e0       	ldi	r24, 0x03	; 3
     a52:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a54:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     a58:	85 ff       	sbrs	r24, 5
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <Endpoint_WaitUntilReady+0x3a>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	08 95       	ret
     a60:	80 91 e4 00 	lds	r24, 0x00E4
     a64:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a68:	84 17       	cp	r24, r20
     a6a:	95 07       	cpc	r25, r21
     a6c:	09 f3       	breq	.-62     	; 0xa30 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a6e:	22 23       	and	r18, r18
     a70:	11 f4       	brne	.+4      	; 0xa76 <Endpoint_WaitUntilReady+0x50>
     a72:	84 e0       	ldi	r24, 0x04	; 4
     a74:	08 95       	ret
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	ac 01       	movw	r20, r24
     a7a:	da cf       	rjmp	.-76     	; 0xa30 <Endpoint_WaitUntilReady+0xa>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     a7e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a80:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     a84:	82 ff       	sbrs	r24, 2
     a86:	dc cf       	rjmp	.-72     	; 0xa40 <Endpoint_WaitUntilReady+0x1a>
     a88:	f9 cf       	rjmp	.-14     	; 0xa7c <Endpoint_WaitUntilReady+0x56>

00000a8a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a8a:	40 d0       	rcall	.+128    	; 0xb0c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a8c:	42 d0       	rcall	.+132    	; 0xb12 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a8e:	80 91 d8 00 	lds	r24, 0x00D8
     a92:	8f 77       	andi	r24, 0x7F	; 127
     a94:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     a98:	80 91 d8 00 	lds	r24, 0x00D8
     a9c:	80 68       	ori	r24, 0x80	; 128
     a9e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     aa2:	80 91 d8 00 	lds	r24, 0x00D8
     aa6:	8f 7d       	andi	r24, 0xDF	; 223
     aa8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     aac:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ab2:	09 b4       	in	r0, 0x29	; 41
     ab4:	00 fe       	sbrs	r0, 0
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     ab8:	10 92 3a 02 	sts	0x023A, r1
	USB_Device_ConfigurationNumber  = 0;
     abc:	10 92 36 02 	sts	0x0236, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     ac0:	10 92 38 02 	sts	0x0238, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     ac4:	10 92 37 02 	sts	0x0237, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	42 e0       	ldi	r20, 0x02	; 2
     ace:	16 df       	rcall	.-468    	; 0x8fc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ad0:	80 91 e1 00 	lds	r24, 0x00E1
     ad4:	8e 7f       	andi	r24, 0xFE	; 254
     ad6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ada:	80 91 e2 00 	lds	r24, 0x00E2
     ade:	81 60       	ori	r24, 0x01	; 1
     ae0:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     ae4:	80 91 e2 00 	lds	r24, 0x00E2
     ae8:	88 60       	ori	r24, 0x08	; 8
     aea:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     aee:	80 91 e0 00 	lds	r24, 0x00E0
     af2:	8e 7f       	andi	r24, 0xFE	; 254
     af4:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     af8:	08 95       	ret

00000afa <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     afa:	e3 e6       	ldi	r30, 0x63	; 99
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	8e 7f       	andi	r24, 0xFE	; 254
     b02:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	80 93 39 02 	sts	0x0239, r24

	USB_ResetInterface();
}
     b0a:	bf cf       	rjmp	.-130    	; 0xa8a <USB_ResetInterface>

00000b0c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     b0c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     b10:	08 95       	ret

00000b12 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     b12:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     b16:	08 95       	ret

00000b18 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	1f 93       	push	r17
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b3c:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b40:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b44:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     b48:	80 91 f0 00 	lds	r24, 0x00F0
     b4c:	87 7f       	andi	r24, 0xF7	; 247
     b4e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b52:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     b54:	c2 d0       	rcall	.+388    	; 0xcda <USB_Device_ProcessControlRequest>
     b56:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b5a:	80 91 f0 00 	lds	r24, 0x00F0
     b5e:	88 60       	ori	r24, 0x08	; 8
     b60:	80 93 f0 00 	sts	0x00F0, r24
     b64:	1f 70       	andi	r17, 0x0F	; 15
     b66:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	1f 91       	pop	r17
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	4f 93       	push	r20
     b9e:	5f 93       	push	r21
     ba0:	6f 93       	push	r22
     ba2:	7f 93       	push	r23
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     bb0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     bb4:	82 ff       	sbrs	r24, 2
     bb6:	0a c0       	rjmp	.+20     	; 0xbcc <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     bb8:	80 91 e2 00 	lds	r24, 0x00E2
     bbc:	82 ff       	sbrs	r24, 2
     bbe:	06 c0       	rjmp	.+12     	; 0xbcc <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     bc0:	80 91 e1 00 	lds	r24, 0x00E1
     bc4:	8b 7f       	andi	r24, 0xFB	; 251
     bc6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     bca:	ef d1       	rcall	.+990    	; 0xfaa <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     bcc:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     bd0:	80 ff       	sbrs	r24, 0
     bd2:	17 c0       	rjmp	.+46     	; 0xc02 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     bd4:	80 91 e2 00 	lds	r24, 0x00E2
     bd8:	80 ff       	sbrs	r24, 0
     bda:	13 c0       	rjmp	.+38     	; 0xc02 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     bdc:	80 91 e2 00 	lds	r24, 0x00E2
     be0:	8e 7f       	andi	r24, 0xFE	; 254
     be2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     be6:	80 91 e2 00 	lds	r24, 0x00E2
     bea:	80 61       	ori	r24, 0x10	; 16
     bec:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     bf0:	80 91 d8 00 	lds	r24, 0x00D8
     bf4:	80 62       	ori	r24, 0x20	; 32
     bf6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bfa:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     bfc:	10 92 3a 02 	sts	0x023A, r1
		EVENT_USB_Device_Disconnect();
     c00:	b6 db       	rcall	.-2196   	; 0x36e <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     c02:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     c06:	84 ff       	sbrs	r24, 4
     c08:	2c c0       	rjmp	.+88     	; 0xc62 <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     c0a:	80 91 e2 00 	lds	r24, 0x00E2
     c0e:	84 ff       	sbrs	r24, 4
     c10:	28 c0       	rjmp	.+80     	; 0xc62 <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c12:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c18:	09 b4       	in	r0, 0x29	; 41
     c1a:	00 fe       	sbrs	r0, 0
     c1c:	fd cf       	rjmp	.-6      	; 0xc18 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c1e:	80 91 d8 00 	lds	r24, 0x00D8
     c22:	8f 7d       	andi	r24, 0xDF	; 223
     c24:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     c28:	80 91 e1 00 	lds	r24, 0x00E1
     c2c:	8f 7e       	andi	r24, 0xEF	; 239
     c2e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     c32:	80 91 e2 00 	lds	r24, 0x00E2
     c36:	8f 7e       	andi	r24, 0xEF	; 239
     c38:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c3c:	80 91 e2 00 	lds	r24, 0x00E2
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     c46:	80 91 36 02 	lds	r24, 0x0236
     c4a:	88 23       	and	r24, r24
     c4c:	31 f4       	brne	.+12     	; 0xc5a <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c4e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c52:	87 fd       	sbrc	r24, 7
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <__vector_11+0xcc>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <__vector_11+0xce>
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	80 93 3a 02 	sts	0x023A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     c60:	85 db       	rcall	.-2294   	; 0x36c <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     c62:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     c66:	83 ff       	sbrs	r24, 3
     c68:	27 c0       	rjmp	.+78     	; 0xcb8 <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     c6a:	80 91 e2 00 	lds	r24, 0x00E2
     c6e:	83 ff       	sbrs	r24, 3
     c70:	23 c0       	rjmp	.+70     	; 0xcb8 <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     c72:	80 91 e1 00 	lds	r24, 0x00E1
     c76:	87 7f       	andi	r24, 0xF7	; 247
     c78:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	80 93 3a 02 	sts	0x023A, r24
		USB_Device_ConfigurationNumber = 0;
     c82:	10 92 36 02 	sts	0x0236, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c86:	80 91 e1 00 	lds	r24, 0x00E1
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c90:	80 91 e2 00 	lds	r24, 0x00E2
     c94:	8e 7f       	andi	r24, 0xFE	; 254
     c96:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c9a:	80 91 e2 00 	lds	r24, 0x00E2
     c9e:	80 61       	ori	r24, 0x10	; 16
     ca0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	42 e0       	ldi	r20, 0x02	; 2
     caa:	28 de       	rcall	.-944    	; 0x8fc <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     cac:	80 91 f0 00 	lds	r24, 0x00F0
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     cb6:	79 d1       	rcall	.+754    	; 0xfaa <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cb8:	ff 91       	pop	r31
     cba:	ef 91       	pop	r30
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	7f 91       	pop	r23
     cc6:	6f 91       	pop	r22
     cc8:	5f 91       	pop	r21
     cca:	4f 91       	pop	r20
     ccc:	3f 91       	pop	r19
     cce:	2f 91       	pop	r18
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     cda:	1f 93       	push	r17
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	ac 97       	sbiw	r28, 0x2c	; 44
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	eb e3       	ldi	r30, 0x3B	; 59
     cf2:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     cf4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     cf8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     cfa:	22 e0       	ldi	r18, 0x02	; 2
     cfc:	e3 34       	cpi	r30, 0x43	; 67
     cfe:	f2 07       	cpc	r31, r18
     d00:	c9 f7       	brne	.-14     	; 0xcf4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     d02:	36 db       	rcall	.-2452   	; 0x370 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d04:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     d08:	83 ff       	sbrs	r24, 3
     d0a:	37 c1       	rjmp	.+622    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     d0c:	80 91 3b 02 	lds	r24, 0x023B

		switch (USB_ControlRequest.bRequest)
     d10:	30 91 3c 02 	lds	r19, 0x023C
     d14:	35 30       	cpi	r19, 0x05	; 5
     d16:	09 f4       	brne	.+2      	; 0xd1a <USB_Device_ProcessControlRequest+0x40>
     d18:	87 c0       	rjmp	.+270    	; 0xe28 <USB_Device_ProcessControlRequest+0x14e>
     d1a:	36 30       	cpi	r19, 0x06	; 6
     d1c:	40 f4       	brcc	.+16     	; 0xd2e <USB_Device_ProcessControlRequest+0x54>
     d1e:	31 30       	cpi	r19, 0x01	; 1
     d20:	c9 f1       	breq	.+114    	; 0xd94 <USB_Device_ProcessControlRequest+0xba>
     d22:	31 30       	cpi	r19, 0x01	; 1
     d24:	70 f0       	brcs	.+28     	; 0xd42 <USB_Device_ProcessControlRequest+0x68>
     d26:	33 30       	cpi	r19, 0x03	; 3
     d28:	09 f0       	breq	.+2      	; 0xd2c <USB_Device_ProcessControlRequest+0x52>
     d2a:	27 c1       	rjmp	.+590    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
     d2c:	33 c0       	rjmp	.+102    	; 0xd94 <USB_Device_ProcessControlRequest+0xba>
     d2e:	38 30       	cpi	r19, 0x08	; 8
     d30:	09 f4       	brne	.+2      	; 0xd34 <USB_Device_ProcessControlRequest+0x5a>
     d32:	f5 c0       	rjmp	.+490    	; 0xf1e <USB_Device_ProcessControlRequest+0x244>
     d34:	39 30       	cpi	r19, 0x09	; 9
     d36:	09 f4       	brne	.+2      	; 0xd3a <USB_Device_ProcessControlRequest+0x60>
     d38:	04 c1       	rjmp	.+520    	; 0xf42 <USB_Device_ProcessControlRequest+0x268>
     d3a:	36 30       	cpi	r19, 0x06	; 6
     d3c:	09 f0       	breq	.+2      	; 0xd40 <USB_Device_ProcessControlRequest+0x66>
     d3e:	1d c1       	rjmp	.+570    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
     d40:	96 c0       	rjmp	.+300    	; 0xe6e <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d42:	80 38       	cpi	r24, 0x80	; 128
     d44:	21 f0       	breq	.+8      	; 0xd4e <USB_Device_ProcessControlRequest+0x74>
     d46:	82 38       	cpi	r24, 0x82	; 130
     d48:	09 f0       	breq	.+2      	; 0xd4c <USB_Device_ProcessControlRequest+0x72>
     d4a:	17 c1       	rjmp	.+558    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
     d4c:	08 c0       	rjmp	.+16     	; 0xd5e <USB_Device_ProcessControlRequest+0x84>
     d4e:	90 91 37 02 	lds	r25, 0x0237
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     d52:	80 91 38 02 	lds	r24, 0x0238
     d56:	88 23       	and	r24, r24
     d58:	99 f0       	breq	.+38     	; 0xd80 <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     d5a:	92 60       	ori	r25, 0x02	; 2
     d5c:	11 c0       	rjmp	.+34     	; 0xd80 <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d5e:	80 91 3f 02 	lds	r24, 0x023F
     d62:	8f 70       	andi	r24, 0x0F	; 15
     d64:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d68:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	25 e0       	ldi	r18, 0x05	; 5
     d70:	96 95       	lsr	r25
     d72:	87 95       	ror	r24
     d74:	2a 95       	dec	r18
     d76:	e1 f7       	brne	.-8      	; 0xd70 <USB_Device_ProcessControlRequest+0x96>
     d78:	98 2f       	mov	r25, r24
     d7a:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d7c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d80:	80 91 e8 00 	lds	r24, 0x00E8
     d84:	87 7f       	andi	r24, 0xF7	; 247
     d86:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d8a:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     d8e:	10 92 f1 00 	sts	0x00F1, r1
     d92:	d0 c0       	rjmp	.+416    	; 0xf34 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d94:	88 23       	and	r24, r24
     d96:	19 f0       	breq	.+6      	; 0xd9e <USB_Device_ProcessControlRequest+0xc4>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	09 f0       	breq	.+2      	; 0xd9e <USB_Device_ProcessControlRequest+0xc4>
     d9c:	ee c0       	rjmp	.+476    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8f 71       	andi	r24, 0x1F	; 31
     da2:	90 70       	andi	r25, 0x00	; 0
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	21 f0       	breq	.+8      	; 0xdb0 <USB_Device_ProcessControlRequest+0xd6>
     da8:	02 97       	sbiw	r24, 0x02	; 2
     daa:	09 f0       	breq	.+2      	; 0xdae <USB_Device_ProcessControlRequest+0xd4>
     dac:	e6 c0       	rjmp	.+460    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
     dae:	0c c0       	rjmp	.+24     	; 0xdc8 <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     db0:	80 91 3d 02 	lds	r24, 0x023D
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	09 f0       	breq	.+2      	; 0xdba <USB_Device_ProcessControlRequest+0xe0>
     db8:	e0 c0       	rjmp	.+448    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     dba:	10 92 38 02 	sts	0x0238, r1
     dbe:	33 30       	cpi	r19, 0x03	; 3
     dc0:	69 f5       	brne	.+90     	; 0xe1c <USB_Device_ProcessControlRequest+0x142>
     dc2:	80 93 38 02 	sts	0x0238, r24
     dc6:	2a c0       	rjmp	.+84     	; 0xe1c <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     dc8:	80 91 3d 02 	lds	r24, 0x023D
     dcc:	88 23       	and	r24, r24
     dce:	31 f5       	brne	.+76     	; 0xe1c <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     dd0:	20 91 3f 02 	lds	r18, 0x023F
     dd4:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     dd6:	09 f4       	brne	.+2      	; 0xdda <USB_Device_ProcessControlRequest+0x100>
     dd8:	d0 c0       	rjmp	.+416    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dda:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     dde:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     de2:	80 ff       	sbrs	r24, 0
     de4:	1b c0       	rjmp	.+54     	; 0xe1c <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     de6:	33 30       	cpi	r19, 0x03	; 3
     de8:	21 f4       	brne	.+8      	; 0xdf2 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     dea:	80 91 eb 00 	lds	r24, 0x00EB
     dee:	80 62       	ori	r24, 0x20	; 32
     df0:	13 c0       	rjmp	.+38     	; 0xe18 <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     df2:	80 91 eb 00 	lds	r24, 0x00EB
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <USB_Device_ProcessControlRequest+0x12c>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	2a 95       	dec	r18
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <USB_Device_ProcessControlRequest+0x128>
     e0a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     e0e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     e12:	80 91 eb 00 	lds	r24, 0x00EB
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e1c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e20:	80 91 e8 00 	lds	r24, 0x00E8
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	89 c0       	rjmp	.+274    	; 0xf3a <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e28:	88 23       	and	r24, r24
     e2a:	09 f0       	breq	.+2      	; 0xe2e <USB_Device_ProcessControlRequest+0x154>
     e2c:	a6 c0       	rjmp	.+332    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     e2e:	10 91 3d 02 	lds	r17, 0x023D
     e32:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     e34:	80 91 e3 00 	lds	r24, 0x00E3
     e38:	80 78       	andi	r24, 0x80	; 128
     e3a:	81 2b       	or	r24, r17
     e3c:	80 93 e3 00 	sts	0x00E3, r24
     e40:	80 91 e8 00 	lds	r24, 0x00E8
     e44:	87 7f       	andi	r24, 0xF7	; 247
     e46:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     e4a:	cc dd       	rcall	.-1128   	; 0x9e4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e4c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     e50:	80 ff       	sbrs	r24, 0
     e52:	fc cf       	rjmp	.-8      	; 0xe4c <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     e54:	80 91 e3 00 	lds	r24, 0x00E3
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     e5e:	11 23       	and	r17, r17
     e60:	11 f4       	brne	.+4      	; 0xe66 <USB_Device_ProcessControlRequest+0x18c>
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <USB_Device_ProcessControlRequest+0x18e>
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	80 93 3a 02 	sts	0x023A, r24
     e6c:	86 c0       	rjmp	.+268    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e6e:	80 58       	subi	r24, 0x80	; 128
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	08 f0       	brcs	.+2      	; 0xe76 <USB_Device_ProcessControlRequest+0x19c>
     e74:	82 c0       	rjmp	.+260    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     e76:	80 91 3d 02 	lds	r24, 0x023D
     e7a:	90 91 3e 02 	lds	r25, 0x023E
     e7e:	23 e0       	ldi	r18, 0x03	; 3
     e80:	8c 3d       	cpi	r24, 0xDC	; 220
     e82:	92 07       	cpc	r25, r18
     e84:	09 f0       	breq	.+2      	; 0xe88 <USB_Device_ProcessControlRequest+0x1ae>
     e86:	33 c0       	rjmp	.+102    	; 0xeee <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     e8c:	8a e2       	ldi	r24, 0x2A	; 42
     e8e:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e90:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e92:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e94:	de 01       	movw	r26, r28
     e96:	15 96       	adiw	r26, 0x05	; 5
     e98:	6e e0       	ldi	r22, 0x0E	; 14
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e9e:	11 e2       	ldi	r17, 0x21	; 33
     ea0:	e6 2f       	mov	r30, r22
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	10 93 57 00 	sts	0x0057, r17
     ea8:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     eaa:	40 ff       	sbrs	r20, 0
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
     eae:	82 95       	swap	r24
     eb0:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     eb4:	8f 70       	andi	r24, 0x0F	; 15
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	18 f0       	brcs	.+6      	; 0xec4 <USB_Device_ProcessControlRequest+0x1ea>
     ebe:	c9 01       	movw	r24, r18
     ec0:	c7 96       	adiw	r24, 0x37	; 55
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <USB_Device_ProcessControlRequest+0x1ee>
     ec4:	c9 01       	movw	r24, r18
     ec6:	c0 96       	adiw	r24, 0x30	; 48
     ec8:	8d 93       	st	X+, r24
     eca:	9d 93       	st	X+, r25
     ecc:	4f 5f       	subi	r20, 0xFF	; 255
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ed0:	44 31       	cpi	r20, 0x14	; 20
     ed2:	51 05       	cpc	r21, r1
     ed4:	29 f7       	brne	.-54     	; 0xea0 <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ed6:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ed8:	80 91 e8 00 	lds	r24, 0x00E8
     edc:	87 7f       	andi	r24, 0xF7	; 247
     ede:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ee2:	ce 01       	movw	r24, r28
     ee4:	03 96       	adiw	r24, 0x03	; 3
     ee6:	6a e2       	ldi	r22, 0x2A	; 42
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	49 dc       	rcall	.-1902   	; 0x77e <Endpoint_Write_Control_Stream_LE>
     eec:	12 c0       	rjmp	.+36     	; 0xf12 <USB_Device_ProcessControlRequest+0x238>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     eee:	60 91 3f 02 	lds	r22, 0x023F
     ef2:	ae 01       	movw	r20, r28
     ef4:	4f 5f       	subi	r20, 0xFF	; 255
     ef6:	5f 4f       	sbci	r21, 0xFF	; 255
     ef8:	14 dc       	rcall	.-2008   	; 0x722 <CALLBACK_USB_GetDescriptor>
     efa:	bc 01       	movw	r22, r24
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	09 f4       	brne	.+2      	; 0xf02 <USB_Device_ProcessControlRequest+0x228>
     f00:	3c c0       	rjmp	.+120    	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
     f02:	80 91 e8 00 	lds	r24, 0x00E8
     f06:	87 7f       	andi	r24, 0xF7	; 247
     f08:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	94 dc       	rcall	.-1752   	; 0x83a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f12:	80 91 e8 00 	lds	r24, 0x00E8
     f16:	8b 77       	andi	r24, 0x7B	; 123
     f18:	80 93 e8 00 	sts	0x00E8, r24
     f1c:	2e c0       	rjmp	.+92     	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f1e:	80 38       	cpi	r24, 0x80	; 128
     f20:	61 f5       	brne	.+88     	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f22:	80 91 e8 00 	lds	r24, 0x00E8
     f26:	87 7f       	andi	r24, 0xF7	; 247
     f28:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     f2c:	80 91 36 02 	lds	r24, 0x0236
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f30:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f34:	80 91 e8 00 	lds	r24, 0x00E8
     f38:	8e 77       	andi	r24, 0x7E	; 126
     f3a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f3e:	52 dd       	rcall	.-1372   	; 0x9e4 <Endpoint_ClearStatusStage>
     f40:	1c c0       	rjmp	.+56     	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f42:	88 23       	and	r24, r24
     f44:	d1 f4       	brne	.+52     	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     f46:	90 91 3d 02 	lds	r25, 0x023D
     f4a:	92 30       	cpi	r25, 0x02	; 2
     f4c:	b0 f4       	brcc	.+44     	; 0xf7a <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f4e:	80 91 e8 00 	lds	r24, 0x00E8
     f52:	87 7f       	andi	r24, 0xF7	; 247
     f54:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     f58:	90 93 36 02 	sts	0x0236, r25

	Endpoint_ClearStatusStage();
     f5c:	43 dd       	rcall	.-1402   	; 0x9e4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     f5e:	80 91 36 02 	lds	r24, 0x0236
     f62:	88 23       	and	r24, r24
     f64:	31 f4       	brne	.+12     	; 0xf72 <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f66:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f6a:	87 fd       	sbrc	r24, 7
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <USB_Device_ProcessControlRequest+0x298>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <USB_Device_ProcessControlRequest+0x29a>
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	80 93 3a 02 	sts	0x023A, r24

	EVENT_USB_Device_ConfigurationChanged();
     f78:	fe d9       	rcall	.-3076   	; 0x376 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f7a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     f7e:	83 ff       	sbrs	r24, 3
     f80:	0a c0       	rjmp	.+20     	; 0xf96 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f82:	80 91 e8 00 	lds	r24, 0x00E8
     f86:	87 7f       	andi	r24, 0xF7	; 247
     f88:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f8c:	80 91 eb 00 	lds	r24, 0x00EB
     f90:	80 62       	ori	r24, 0x20	; 32
     f92:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f96:	ac 96       	adiw	r28, 0x2c	; 44
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     faa:	08 95       	ret

00000fac <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     fac:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     fae:	80 91 3a 02 	lds	r24, 0x023A
     fb2:	88 23       	and	r24, r24
     fb4:	71 f0       	breq	.+28     	; 0xfd2 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fb6:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     fba:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fbe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fc2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     fc6:	83 ff       	sbrs	r24, 3
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
     fca:	87 de       	rcall	.-754    	; 0xcda <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fcc:	1f 70       	andi	r17, 0x0F	; 15
     fce:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     fd2:	1f 91       	pop	r17
     fd4:	08 95       	ret

00000fd6 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fd6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fd8:	80 91 3a 02 	lds	r24, 0x023A
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	29 f5       	brne	.+74     	; 0x102a <CDC_Device_ReceiveByte+0x54>
     fe0:	84 89       	ldd	r24, Z+20	; 0x14
     fe2:	95 89       	ldd	r25, Z+21	; 0x15
     fe4:	a6 89       	ldd	r26, Z+22	; 0x16
     fe6:	b7 89       	ldd	r27, Z+23	; 0x17
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	a1 05       	cpc	r26, r1
     fec:	b1 05       	cpc	r27, r1
     fee:	e9 f0       	breq	.+58     	; 0x102a <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ff0:	86 81       	ldd	r24, Z+6	; 0x06
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ff8:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     ffc:	82 ff       	sbrs	r24, 2
     ffe:	15 c0       	rjmp	.+42     	; 0x102a <CDC_Device_ReceiveByte+0x54>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1000:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1004:	88 23       	and	r24, r24
    1006:	19 f4       	brne	.+6      	; 0x100e <CDC_Device_ReceiveByte+0x38>
    1008:	2f ef       	ldi	r18, 0xFF	; 255
    100a:	3f ef       	ldi	r19, 0xFF	; 255
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    100e:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1016:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
    101a:	88 23       	and	r24, r24
    101c:	41 f4       	brne	.+16     	; 0x102e <CDC_Device_ReceiveByte+0x58>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    101e:	80 91 e8 00 	lds	r24, 0x00E8
    1022:	8b 77       	andi	r24, 0x7B	; 123
    1024:	80 93 e8 00 	sts	0x00E8, r24
    1028:	02 c0       	rjmp	.+4      	; 0x102e <CDC_Device_ReceiveByte+0x58>
    102a:	2f ef       	ldi	r18, 0xFF	; 255
    102c:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    102e:	c9 01       	movw	r24, r18
    1030:	08 95       	ret

00001032 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    1032:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1034:	2e e0       	ldi	r18, 0x0E	; 14
    1036:	db 01       	movw	r26, r22
    1038:	1d 92       	st	X+, r1
    103a:	2a 95       	dec	r18
    103c:	e9 f7       	brne	.-6      	; 0x1038 <CDC_Device_CreateStream+0x6>
    103e:	23 e0       	ldi	r18, 0x03	; 3
    1040:	23 83       	std	Z+3, r18	; 0x03
    1042:	23 ea       	ldi	r18, 0xA3	; 163
    1044:	38 e0       	ldi	r19, 0x08	; 8
    1046:	31 87       	std	Z+9, r19	; 0x09
    1048:	20 87       	std	Z+8, r18	; 0x08
    104a:	2c e2       	ldi	r18, 0x2C	; 44
    104c:	38 e0       	ldi	r19, 0x08	; 8
    104e:	33 87       	std	Z+11, r19	; 0x0b
    1050:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1052:	95 87       	std	Z+13, r25	; 0x0d
    1054:	84 87       	std	Z+12, r24	; 0x0c
}
    1056:	08 95       	ret

00001058 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1058:	fc 01       	movw	r30, r24
    105a:	84 85       	ldd	r24, Z+12	; 0x0c
    105c:	95 85       	ldd	r25, Z+13	; 0x0d
    105e:	bb df       	rcall	.-138    	; 0xfd6 <CDC_Device_ReceiveByte>
    1060:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    1062:	97 ff       	sbrs	r25, 7
    1064:	02 c0       	rjmp	.+4      	; 0x106a <CDC_Device_getchar+0x12>
    1066:	2e ef       	ldi	r18, 0xFE	; 254
    1068:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
    106a:	c9 01       	movw	r24, r18
    106c:	08 95       	ret

0000106e <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    106e:	08 95       	ret

00001070 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1070:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1072:	80 91 3a 02 	lds	r24, 0x023A
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	19 f5       	brne	.+70     	; 0x10c0 <CDC_Device_Flush+0x50>
    107a:	84 89       	ldd	r24, Z+20	; 0x14
    107c:	95 89       	ldd	r25, Z+21	; 0x15
    107e:	a6 89       	ldd	r26, Z+22	; 0x16
    1080:	b7 89       	ldd	r27, Z+23	; 0x17
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	a1 05       	cpc	r26, r1
    1086:	b1 05       	cpc	r27, r1
    1088:	d9 f0       	breq	.+54     	; 0x10c0 <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    108a:	81 81       	ldd	r24, Z+1	; 0x01
    108c:	8f 70       	andi	r24, 0x0F	; 15
    108e:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1092:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1096:	88 23       	and	r24, r24
    1098:	a9 f0       	breq	.+42     	; 0x10c4 <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    109a:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    109e:	80 91 e8 00 	lds	r24, 0x00E8
    10a2:	8e 77       	andi	r24, 0x7E	; 126
    10a4:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    10a8:	95 fd       	sbrc	r25, 5
    10aa:	0c c0       	rjmp	.+24     	; 0x10c4 <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    10ac:	bc dc       	rcall	.-1672   	; 0xa26 <Endpoint_WaitUntilReady>
    10ae:	98 2f       	mov	r25, r24
    10b0:	88 23       	and	r24, r24
    10b2:	49 f4       	brne	.+18     	; 0x10c6 <CDC_Device_Flush+0x56>
    10b4:	80 91 e8 00 	lds	r24, 0x00E8
    10b8:	8e 77       	andi	r24, 0x7E	; 126
    10ba:	80 93 e8 00 	sts	0x00E8, r24
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <CDC_Device_Flush+0x56>
    10c0:	92 e0       	ldi	r25, 0x02	; 2
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <CDC_Device_Flush+0x56>
    10c4:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    10c6:	89 2f       	mov	r24, r25
    10c8:	08 95       	ret

000010ca <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10ca:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10cc:	80 91 3a 02 	lds	r24, 0x023A
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	91 f4       	brne	.+36     	; 0x10f8 <CDC_Device_USBTask+0x2e>
    10d4:	84 89       	ldd	r24, Z+20	; 0x14
    10d6:	95 89       	ldd	r25, Z+21	; 0x15
    10d8:	a6 89       	ldd	r26, Z+22	; 0x16
    10da:	b7 89       	ldd	r27, Z+23	; 0x17
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	a1 05       	cpc	r26, r1
    10e0:	b1 05       	cpc	r27, r1
    10e2:	51 f0       	breq	.+20     	; 0x10f8 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10e4:	81 81       	ldd	r24, Z+1	; 0x01
    10e6:	8f 70       	andi	r24, 0x0F	; 15
    10e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10ec:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    10f0:	80 ff       	sbrs	r24, 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    10f4:	cf 01       	movw	r24, r30
    10f6:	bc cf       	rjmp	.-136    	; 0x1070 <CDC_Device_Flush>
    10f8:	08 95       	ret

000010fa <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    10fa:	1f 93       	push	r17
    10fc:	fc 01       	movw	r30, r24
    10fe:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1100:	80 91 3a 02 	lds	r24, 0x023A
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	e1 f4       	brne	.+56     	; 0x1140 <CDC_Device_SendByte+0x46>
    1108:	84 89       	ldd	r24, Z+20	; 0x14
    110a:	95 89       	ldd	r25, Z+21	; 0x15
    110c:	a6 89       	ldd	r26, Z+22	; 0x16
    110e:	b7 89       	ldd	r27, Z+23	; 0x17
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	a1 05       	cpc	r26, r1
    1114:	b1 05       	cpc	r27, r1
    1116:	a1 f0       	breq	.+40     	; 0x1140 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1118:	81 81       	ldd	r24, Z+1	; 0x01
    111a:	8f 70       	andi	r24, 0x0F	; 15
    111c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1120:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1124:	85 fd       	sbrc	r24, 5
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1128:	80 91 e8 00 	lds	r24, 0x00E8
    112c:	8e 77       	andi	r24, 0x7E	; 126
    112e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1132:	79 dc       	rcall	.-1806   	; 0xa26 <Endpoint_WaitUntilReady>
    1134:	88 23       	and	r24, r24
    1136:	29 f4       	brne	.+10     	; 0x1142 <CDC_Device_SendByte+0x48>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1138:	10 93 f1 00 	sts	0x00F1, r17
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <CDC_Device_SendByte+0x48>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1140:	82 e0       	ldi	r24, 0x02	; 2
}
    1142:	1f 91       	pop	r17
    1144:	08 95       	ret

00001146 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    1146:	28 2f       	mov	r18, r24
    1148:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    114a:	84 85       	ldd	r24, Z+12	; 0x0c
    114c:	95 85       	ldd	r25, Z+13	; 0x0d
    114e:	62 2f       	mov	r22, r18
    1150:	d4 df       	rcall	.-88     	; 0x10fa <CDC_Device_SendByte>
    1152:	88 23       	and	r24, r24
    1154:	19 f4       	brne	.+6      	; 0x115c <CDC_Device_putchar+0x16>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <CDC_Device_putchar+0x1a>
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	3f ef       	ldi	r19, 0xFF	; 255
}
    1160:	c9 01       	movw	r24, r18
    1162:	08 95       	ret

00001164 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    116a:	40 96       	adiw	r24, 0x10	; 16
    116c:	fc 01       	movw	r30, r24
    116e:	8b e0       	ldi	r24, 0x0B	; 11
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    117c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	f1 db       	rcall	.-2078   	; 0x96c <Endpoint_ConfigureEndpointTable>
    118a:	88 23       	and	r24, r24
    118c:	71 f0       	breq	.+28     	; 0x11aa <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    118e:	ce 01       	movw	r24, r28
    1190:	06 96       	adiw	r24, 0x06	; 6
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	eb db       	rcall	.-2090   	; 0x96c <Endpoint_ConfigureEndpointTable>
    1196:	88 23       	and	r24, r24
    1198:	41 f0       	breq	.+16     	; 0x11aa <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    119a:	ce 01       	movw	r24, r28
    119c:	0b 96       	adiw	r24, 0x0b	; 11
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	e5 db       	rcall	.-2102   	; 0x96c <Endpoint_ConfigureEndpointTable>
    11a2:	88 23       	and	r24, r24
    11a4:	19 f0       	breq	.+6      	; 0x11ac <CDC_Device_ConfigureEndpoints+0x48>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <CDC_Device_ConfigureEndpoints+0x48>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11b8:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    11bc:	83 ff       	sbrs	r24, 3
    11be:	a3 c0       	rjmp	.+326    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    11c0:	88 81       	ld	r24, Y
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	20 91 3f 02 	lds	r18, 0x023F
    11c8:	30 91 40 02 	lds	r19, 0x0240
    11cc:	28 17       	cp	r18, r24
    11ce:	39 07       	cpc	r19, r25
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <CDC_Device_ProcessControlRequest+0x22>
    11d2:	99 c0       	rjmp	.+306    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    11d4:	80 91 3c 02 	lds	r24, 0x023C
    11d8:	81 32       	cpi	r24, 0x21	; 33
    11da:	69 f0       	breq	.+26     	; 0x11f6 <CDC_Device_ProcessControlRequest+0x44>
    11dc:	82 32       	cpi	r24, 0x22	; 34
    11de:	20 f4       	brcc	.+8      	; 0x11e8 <CDC_Device_ProcessControlRequest+0x36>
    11e0:	80 32       	cpi	r24, 0x20	; 32
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <CDC_Device_ProcessControlRequest+0x34>
    11e4:	90 c0       	rjmp	.+288    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
    11e6:	3c c0       	rjmp	.+120    	; 0x1260 <CDC_Device_ProcessControlRequest+0xae>
    11e8:	82 32       	cpi	r24, 0x22	; 34
    11ea:	09 f4       	brne	.+2      	; 0x11ee <CDC_Device_ProcessControlRequest+0x3c>
    11ec:	6b c0       	rjmp	.+214    	; 0x12c4 <CDC_Device_ProcessControlRequest+0x112>
    11ee:	83 32       	cpi	r24, 0x23	; 35
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <CDC_Device_ProcessControlRequest+0x42>
    11f2:	89 c0       	rjmp	.+274    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
    11f4:	7a c0       	rjmp	.+244    	; 0x12ea <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11f6:	80 91 3b 02 	lds	r24, 0x023B
    11fa:	81 3a       	cpi	r24, 0xA1	; 161
    11fc:	09 f0       	breq	.+2      	; 0x1200 <CDC_Device_ProcessControlRequest+0x4e>
    11fe:	83 c0       	rjmp	.+262    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1200:	80 91 e8 00 	lds	r24, 0x00E8
    1204:	87 7f       	andi	r24, 0xF7	; 247
    1206:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    120a:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    120e:	80 ff       	sbrs	r24, 0
    1210:	fc cf       	rjmp	.-8      	; 0x120a <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1212:	8c 89       	ldd	r24, Y+20	; 0x14
    1214:	9d 89       	ldd	r25, Y+21	; 0x15
    1216:	ae 89       	ldd	r26, Y+22	; 0x16
    1218:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    121a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    121e:	29 2f       	mov	r18, r25
    1220:	3a 2f       	mov	r19, r26
    1222:	4b 2f       	mov	r20, r27
    1224:	55 27       	eor	r21, r21
    1226:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    122a:	9d 01       	movw	r18, r26
    122c:	44 27       	eor	r20, r20
    122e:	55 27       	eor	r21, r21
    1230:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    1234:	8b 2f       	mov	r24, r27
    1236:	99 27       	eor	r25, r25
    1238:	aa 27       	eor	r26, r26
    123a:	bb 27       	eor	r27, r27
    123c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1240:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1242:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1246:	89 8d       	ldd	r24, Y+25	; 0x19
    1248:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    124c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    124e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1252:	80 91 e8 00 	lds	r24, 0x00E8
    1256:	8e 77       	andi	r24, 0x7E	; 126
    1258:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    125c:	c3 db       	rcall	.-2170   	; 0x9e4 <Endpoint_ClearStatusStage>
    125e:	53 c0       	rjmp	.+166    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1260:	80 91 3b 02 	lds	r24, 0x023B
    1264:	81 32       	cpi	r24, 0x21	; 33
    1266:	09 f0       	breq	.+2      	; 0x126a <CDC_Device_ProcessControlRequest+0xb8>
    1268:	4e c0       	rjmp	.+156    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    126a:	80 91 e8 00 	lds	r24, 0x00E8
    126e:	87 7f       	andi	r24, 0xF7	; 247
    1270:	80 93 e8 00 	sts	0x00E8, r24
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1276:	80 91 3a 02 	lds	r24, 0x023A
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <CDC_Device_ProcessControlRequest+0xce>
    127e:	43 c0       	rjmp	.+134    	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1280:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1284:	82 ff       	sbrs	r24, 2
    1286:	f7 cf       	rjmp	.-18     	; 0x1276 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1288:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    128c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1290:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    1294:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1298:	8c 8b       	std	Y+20, r24	; 0x14
    129a:	9d 8b       	std	Y+21, r25	; 0x15
    129c:	2e 8b       	std	Y+22, r18	; 0x16
    129e:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12a0:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    12a4:	88 8f       	std	Y+24, r24	; 0x18
    12a6:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    12aa:	89 8f       	std	Y+25, r24	; 0x19
    12ac:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    12b0:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12b2:	80 91 e8 00 	lds	r24, 0x00E8
    12b6:	8b 77       	andi	r24, 0x7B	; 123
    12b8:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    12bc:	93 db       	rcall	.-2266   	; 0x9e4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    12be:	ce 01       	movw	r24, r28
    12c0:	d6 de       	rcall	.-596    	; 0x106e <CDC_Device_Event_Stub>
    12c2:	21 c0       	rjmp	.+66     	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12c4:	80 91 3b 02 	lds	r24, 0x023B
    12c8:	81 32       	cpi	r24, 0x21	; 33
    12ca:	e9 f4       	brne	.+58     	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12cc:	80 91 e8 00 	lds	r24, 0x00E8
    12d0:	87 7f       	andi	r24, 0xF7	; 247
    12d2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12d6:	86 db       	rcall	.-2292   	; 0x9e4 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    12d8:	80 91 3d 02 	lds	r24, 0x023D
    12dc:	90 91 3e 02 	lds	r25, 0x023E
    12e0:	99 8b       	std	Y+17, r25	; 0x11
    12e2:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    12e4:	ce 01       	movw	r24, r28
    12e6:	c3 de       	rcall	.-634    	; 0x106e <CDC_Device_Event_Stub>
    12e8:	0e c0       	rjmp	.+28     	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12ea:	80 91 3b 02 	lds	r24, 0x023B
    12ee:	81 32       	cpi	r24, 0x21	; 33
    12f0:	51 f4       	brne	.+20     	; 0x1306 <CDC_Device_ProcessControlRequest+0x154>
    12f2:	80 91 e8 00 	lds	r24, 0x00E8
    12f6:	87 7f       	andi	r24, 0xF7	; 247
    12f8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12fc:	73 db       	rcall	.-2330   	; 0x9e4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    12fe:	ce 01       	movw	r24, r28
    1300:	60 91 3d 02 	lds	r22, 0x023D
    1304:	b4 de       	rcall	.-664    	; 0x106e <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <itoa>:
    130c:	fb 01       	movw	r30, r22
    130e:	9f 01       	movw	r18, r30
    1310:	e8 94       	clt
    1312:	42 30       	cpi	r20, 0x02	; 2
    1314:	bc f0       	brlt	.+46     	; 0x1344 <itoa+0x38>
    1316:	45 32       	cpi	r20, 0x25	; 37
    1318:	ac f4       	brge	.+42     	; 0x1344 <itoa+0x38>
    131a:	4a 30       	cpi	r20, 0x0A	; 10
    131c:	29 f4       	brne	.+10     	; 0x1328 <itoa+0x1c>
    131e:	97 fb       	bst	r25, 7
    1320:	1e f4       	brtc	.+6      	; 0x1328 <itoa+0x1c>
    1322:	90 95       	com	r25
    1324:	81 95       	neg	r24
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	64 2f       	mov	r22, r20
    132a:	77 27       	eor	r23, r23
    132c:	6c d0       	rcall	.+216    	; 0x1406 <__udivmodhi4>
    132e:	80 5d       	subi	r24, 0xD0	; 208
    1330:	8a 33       	cpi	r24, 0x3A	; 58
    1332:	0c f0       	brlt	.+2      	; 0x1336 <itoa+0x2a>
    1334:	89 5d       	subi	r24, 0xD9	; 217
    1336:	81 93       	st	Z+, r24
    1338:	cb 01       	movw	r24, r22
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	a9 f7       	brne	.-22     	; 0x1328 <itoa+0x1c>
    133e:	16 f4       	brtc	.+4      	; 0x1344 <itoa+0x38>
    1340:	5d e2       	ldi	r21, 0x2D	; 45
    1342:	51 93       	st	Z+, r21
    1344:	10 82       	st	Z, r1
    1346:	c9 01       	movw	r24, r18
    1348:	30 c0       	rjmp	.+96     	; 0x13aa <strrev>

0000134a <fputs>:
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	7c 01       	movw	r14, r24
    1358:	8b 01       	movw	r16, r22
    135a:	db 01       	movw	r26, r22
    135c:	13 96       	adiw	r26, 0x03	; 3
    135e:	8c 91       	ld	r24, X
    1360:	81 fd       	sbrc	r24, 1
    1362:	03 c0       	rjmp	.+6      	; 0x136a <fputs+0x20>
    1364:	cf ef       	ldi	r28, 0xFF	; 255
    1366:	df ef       	ldi	r29, 0xFF	; 255
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <fputs+0x46>
    136a:	c0 e0       	ldi	r28, 0x00	; 0
    136c:	d0 e0       	ldi	r29, 0x00	; 0
    136e:	0b c0       	rjmp	.+22     	; 0x1386 <fputs+0x3c>
    1370:	d8 01       	movw	r26, r16
    1372:	18 96       	adiw	r26, 0x08	; 8
    1374:	ed 91       	ld	r30, X+
    1376:	fc 91       	ld	r31, X
    1378:	19 97       	sbiw	r26, 0x09	; 9
    137a:	b8 01       	movw	r22, r16
    137c:	09 95       	icall
    137e:	89 2b       	or	r24, r25
    1380:	11 f0       	breq	.+4      	; 0x1386 <fputs+0x3c>
    1382:	cf ef       	ldi	r28, 0xFF	; 255
    1384:	df ef       	ldi	r29, 0xFF	; 255
    1386:	f7 01       	movw	r30, r14
    1388:	81 91       	ld	r24, Z+
    138a:	7f 01       	movw	r14, r30
    138c:	88 23       	and	r24, r24
    138e:	81 f7       	brne	.-32     	; 0x1370 <fputs+0x26>
    1390:	ce 01       	movw	r24, r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	e6 e0       	ldi	r30, 0x06	; 6
    1398:	56 c0       	rjmp	.+172    	; 0x1446 <__epilogue_restores__+0x18>

0000139a <__eerd_word_usb162>:
    139a:	a8 e1       	ldi	r26, 0x18	; 24
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	42 e0       	ldi	r20, 0x02	; 2
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	15 c0       	rjmp	.+42     	; 0x13ce <__eerd_blraw_usb162>

000013a4 <__eewr_word_usb162>:
    13a4:	22 d0       	rcall	.+68     	; 0x13ea <__eewr_byte_usb162>
    13a6:	27 2f       	mov	r18, r23
    13a8:	21 c0       	rjmp	.+66     	; 0x13ec <__eewr_r18_usb162>

000013aa <strrev>:
    13aa:	dc 01       	movw	r26, r24
    13ac:	fc 01       	movw	r30, r24
    13ae:	67 2f       	mov	r22, r23
    13b0:	71 91       	ld	r23, Z+
    13b2:	77 23       	and	r23, r23
    13b4:	e1 f7       	brne	.-8      	; 0x13ae <strrev+0x4>
    13b6:	32 97       	sbiw	r30, 0x02	; 2
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <strrev+0x18>
    13ba:	7c 91       	ld	r23, X
    13bc:	6d 93       	st	X+, r22
    13be:	70 83       	st	Z, r23
    13c0:	62 91       	ld	r22, -Z
    13c2:	ae 17       	cp	r26, r30
    13c4:	bf 07       	cpc	r27, r31
    13c6:	c8 f3       	brcs	.-14     	; 0x13ba <strrev+0x10>
    13c8:	08 95       	ret

000013ca <__eerd_block_usb162>:
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22

000013ce <__eerd_blraw_usb162>:
    13ce:	fc 01       	movw	r30, r24
    13d0:	f9 99       	sbic	0x1f, 1	; 31
    13d2:	fe cf       	rjmp	.-4      	; 0x13d0 <__eerd_blraw_usb162+0x2>
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <__eerd_blraw_usb162+0x14>
    13d6:	f2 bd       	out	0x22, r31	; 34
    13d8:	e1 bd       	out	0x21, r30	; 33
    13da:	f8 9a       	sbi	0x1f, 0	; 31
    13dc:	31 96       	adiw	r30, 0x01	; 1
    13de:	00 b4       	in	r0, 0x20	; 32
    13e0:	0d 92       	st	X+, r0
    13e2:	41 50       	subi	r20, 0x01	; 1
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	b8 f7       	brcc	.-18     	; 0x13d6 <__eerd_blraw_usb162+0x8>
    13e8:	08 95       	ret

000013ea <__eewr_byte_usb162>:
    13ea:	26 2f       	mov	r18, r22

000013ec <__eewr_r18_usb162>:
    13ec:	f9 99       	sbic	0x1f, 1	; 31
    13ee:	fe cf       	rjmp	.-4      	; 0x13ec <__eewr_r18_usb162>
    13f0:	1f ba       	out	0x1f, r1	; 31
    13f2:	92 bd       	out	0x22, r25	; 34
    13f4:	81 bd       	out	0x21, r24	; 33
    13f6:	20 bd       	out	0x20, r18	; 32
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	fa 9a       	sbi	0x1f, 2	; 31
    13fe:	f9 9a       	sbi	0x1f, 1	; 31
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	08 95       	ret

00001406 <__udivmodhi4>:
    1406:	aa 1b       	sub	r26, r26
    1408:	bb 1b       	sub	r27, r27
    140a:	51 e1       	ldi	r21, 0x11	; 17
    140c:	07 c0       	rjmp	.+14     	; 0x141c <__udivmodhi4_ep>

0000140e <__udivmodhi4_loop>:
    140e:	aa 1f       	adc	r26, r26
    1410:	bb 1f       	adc	r27, r27
    1412:	a6 17       	cp	r26, r22
    1414:	b7 07       	cpc	r27, r23
    1416:	10 f0       	brcs	.+4      	; 0x141c <__udivmodhi4_ep>
    1418:	a6 1b       	sub	r26, r22
    141a:	b7 0b       	sbc	r27, r23

0000141c <__udivmodhi4_ep>:
    141c:	88 1f       	adc	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	5a 95       	dec	r21
    1422:	a9 f7       	brne	.-22     	; 0x140e <__udivmodhi4_loop>
    1424:	80 95       	com	r24
    1426:	90 95       	com	r25
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	08 95       	ret

0000142e <__epilogue_restores__>:
    142e:	2a 88       	ldd	r2, Y+18	; 0x12
    1430:	39 88       	ldd	r3, Y+17	; 0x11
    1432:	48 88       	ldd	r4, Y+16	; 0x10
    1434:	5f 84       	ldd	r5, Y+15	; 0x0f
    1436:	6e 84       	ldd	r6, Y+14	; 0x0e
    1438:	7d 84       	ldd	r7, Y+13	; 0x0d
    143a:	8c 84       	ldd	r8, Y+12	; 0x0c
    143c:	9b 84       	ldd	r9, Y+11	; 0x0b
    143e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1440:	b9 84       	ldd	r11, Y+9	; 0x09
    1442:	c8 84       	ldd	r12, Y+8	; 0x08
    1444:	df 80       	ldd	r13, Y+7	; 0x07
    1446:	ee 80       	ldd	r14, Y+6	; 0x06
    1448:	fd 80       	ldd	r15, Y+5	; 0x05
    144a:	0c 81       	ldd	r16, Y+4	; 0x04
    144c:	1b 81       	ldd	r17, Y+3	; 0x03
    144e:	aa 81       	ldd	r26, Y+2	; 0x02
    1450:	b9 81       	ldd	r27, Y+1	; 0x01
    1452:	ce 0f       	add	r28, r30
    1454:	d1 1d       	adc	r29, r1
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	ed 01       	movw	r28, r26
    1462:	08 95       	ret

00001464 <_exit>:
    1464:	f8 94       	cli

00001466 <__stop_program>:
    1466:	ff cf       	rjmp	.-2      	; 0x1466 <__stop_program>
