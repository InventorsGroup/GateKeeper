
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000013fa  0000148e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080015c  0080015c  000014ea  2**0
                  ALLOC
  3 .debug_aranges 000004d8  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d40  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000083d9  00000000  00000000  00002702  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002225  00000000  00000000  0000aadb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006488  00000000  00000000  0000cd00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000770  00000000  00000000  00013188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003444  00000000  00000000  000138f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003538  00000000  00000000  00016d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000688  00000000  00000000  0001a274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    while (*s)
      uart_put(*s++);
}

unsigned char uart_get( void )
{
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
       6:	00 00       	nop
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__vector_2>
       a:	00 00       	nop
       c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
       e:	00 00       	nop
      10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
      12:	00 00       	nop
      14:	93 c0       	rjmp	.+294    	; 0x13c <__bad_interrupt>
      16:	00 00       	nop
      18:	91 c0       	rjmp	.+290    	; 0x13c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
      1e:	00 00       	nop
      20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
      26:	00 00       	nop
      28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c5       	rjmp	.+2802   	; 0xb20 <__vector_11>
      2e:	00 00       	nop
      30:	3c c5       	rjmp	.+2680   	; 0xaaa <__vector_12>
      32:	00 00       	nop
      34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
      36:	00 00       	nop
      38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
      42:	00 00       	nop
      44:	7b c0       	rjmp	.+246    	; 0x13c <__bad_interrupt>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__vector_19>
      4e:	00 00       	nop
      50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
      52:	00 00       	nop
      54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
      56:	00 00       	nop
      58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d3 c1       	rjmp	.+934    	; 0x404 <__vector_23>
      5e:	00 00       	nop
      60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
      66:	00 00       	nop
      68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
      6e:	00 00       	nop
      70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      84:	dc 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      96:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      b6:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
      c8:	20 03 49 00 6e 00 76 00 65 00 6e 00 74 00 6f 00      .I.n.v.e.n.t.o.
      d8:	72 00 73 00 20 00 47 00 72 00 6f 00 75 00 70 00     r.s. .G.r.o.u.p.
      e8:	00 00                                               ..

000000ea <ProductString>:
      ea:	18 03 47 00 61 00 74 00 65 00 20 00 4b 00 65 00     ..G.a.t.e. .K.e.
      fa:	65 00 70 00 65 00 72 00 00 00                       e.p.e.r...

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d2 e0       	ldi	r29, 0x02	; 2
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	11 e0       	ldi	r17, 0x01	; 1
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	ea ef       	ldi	r30, 0xFA	; 250
     118:	f3 e1       	ldi	r31, 0x13	; 19
     11a:	02 c0       	rjmp	.+4      	; 0x120 <.do_copy_data_start>

0000011c <.do_copy_data_loop>:
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0

00000120 <.do_copy_data_start>:
     120:	ac 35       	cpi	r26, 0x5C	; 92
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <.do_copy_data_loop>

00000126 <__do_clear_bss>:
     126:	12 e0       	ldi	r17, 0x02	; 2
     128:	ac e5       	ldi	r26, 0x5C	; 92
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a5 34       	cpi	r26, 0x45	; 69
     132:	b1 07       	cpc	r27, r17
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	f7 d1       	rcall	.+1006   	; 0x526 <main>
     138:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <_exit>

0000013c <__bad_interrupt>:
     13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <uart_put>:
					},
			},
	};

void uart_put( unsigned char data )
{
     13e:	98 2f       	mov	r25, r24
	 while(!(UCSR1A & (1<<UDRE1)));
     140:	80 91 c8 00 	lds	r24, 0x00C8
     144:	85 ff       	sbrs	r24, 5
     146:	fc cf       	rjmp	.-8      	; 0x140 <uart_put+0x2>
		UDR1=data;
     148:	90 93 ce 00 	sts	0x00CE, r25
}
     14c:	08 95       	ret

0000014e <uart_puts>:

void uart_puts(const char *s )
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	ec 01       	movw	r28, r24
     154:	02 c0       	rjmp	.+4      	; 0x15a <uart_puts+0xc>
    while (*s)
      uart_put(*s++);
     156:	21 96       	adiw	r28, 0x01	; 1
     158:	f2 df       	rcall	.-28     	; 0x13e <uart_put>
		UDR1=data;
}

void uart_puts(const char *s )
{
    while (*s)
     15a:	88 81       	ld	r24, Y
     15c:	88 23       	and	r24, r24
     15e:	d9 f7       	brne	.-10     	; 0x156 <uart_puts+0x8>
      uart_put(*s++);
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <__vector_19>:
volatile static bool bDebug = false;
volatile int16_t iRead = 0;

static volatile int8_t tim_cnter = 0;
ISR(TIMER0_COMPA_vect)
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
	tim_cnter++;
     174:	80 91 61 01 	lds	r24, 0x0161
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	80 93 61 01 	sts	0x0161, r24
	if(tim_cnter > 100)
     17e:	80 91 61 01 	lds	r24, 0x0161
     182:	85 36       	cpi	r24, 0x65	; 101
     184:	34 f0       	brlt	.+12     	; 0x192 <__vector_19+0x2c>
	{
		PORTB ^= (1 << PB6);
     186:	85 b1       	in	r24, 0x05	; 5
     188:	90 e4       	ldi	r25, 0x40	; 64
     18a:	89 27       	eor	r24, r25
     18c:	85 b9       	out	0x05, r24	; 5
		tim_cnter = 0;
     18e:	10 92 61 01 	sts	0x0161, r1
	}
}
     192:	9f 91       	pop	r25
     194:	8f 91       	pop	r24
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <__vector_2>:

ISR(INT1_vect)
{
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	2f 93       	push	r18
     1ac:	3f 93       	push	r19
     1ae:	4f 93       	push	r20
     1b0:	5f 93       	push	r21
     1b2:	6f 93       	push	r22
     1b4:	7f 93       	push	r23
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	af 93       	push	r26
     1bc:	bf 93       	push	r27
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
	uart_puts("ATI\r");
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	c3 df       	rcall	.-122    	; 0x14e <uart_puts>
}
     1c8:	ff 91       	pop	r31
     1ca:	ef 91       	pop	r30
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <openGate>:

void openGate()
{
	PORTC |= (1 << PC7);
     1ea:	47 9a       	sbi	0x08, 7	; 8
     1ec:	80 e1       	ldi	r24, 0x10	; 16
     1ee:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	28 ec       	ldi	r18, 0xC8	; 200
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	f9 01       	movw	r30, r18
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <openGate+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <openGate+0xa>
	_delay_ms(1000);
	PORTC &= ~(1 << PC7);
     1fe:	47 98       	cbi	0x08, 7	; 8
     200:	88 e8       	ldi	r24, 0x88	; 136
     202:	93 e1       	ldi	r25, 0x13	; 19
     204:	28 ec       	ldi	r18, 0xC8	; 200
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	f9 01       	movw	r30, r18
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <openGate+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     210:	d9 f7       	brne	.-10     	; 0x208 <openGate+0x1e>
	_delay_ms(500);
	PORTC |= (1 << PC7);
     212:	47 9a       	sbi	0x08, 7	; 8
     214:	80 e1       	ldi	r24, 0x10	; 16
     216:	97 e2       	ldi	r25, 0x27	; 39
     218:	28 ec       	ldi	r18, 0xC8	; 200
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	f9 01       	movw	r30, r18
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <openGate+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     222:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     224:	d9 f7       	brne	.-10     	; 0x21c <openGate+0x32>
	_delay_ms(1000);
	PORTC &= ~(1 << PC7);
     226:	47 98       	cbi	0x08, 7	; 8
}
     228:	08 95       	ret

0000022a <stringCheck>:
}

static volatile int8_t stringBuffer[100];
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
     22a:	dc 01       	movw	r26, r24
	int i = 1;

	while(*s != phoneBuffer[i])
     22c:	8c 91       	ld	r24, X
     22e:	28 2f       	mov	r18, r24
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	0b c0       	rjmp	.+22     	; 0x24e <stringCheck+0x24>
	{
		i++;
     238:	4f 5f       	subi	r20, 0xFF	; 255
     23a:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
     23c:	80 91 5b 01 	lds	r24, 0x015B
     240:	99 27       	eor	r25, r25
     242:	87 fd       	sbrc	r24, 7
     244:	90 95       	com	r25
     246:	48 17       	cp	r20, r24
     248:	59 07       	cpc	r21, r25
     24a:	0c f0       	brlt	.+2      	; 0x24e <stringCheck+0x24>
     24c:	45 c0       	rjmp	.+138    	; 0x2d8 <stringCheck+0xae>
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
	int i = 1;

	while(*s != phoneBuffer[i])
     24e:	fa 01       	movw	r30, r20
     250:	e0 59       	subi	r30, 0x90	; 144
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	80 81       	ld	r24, Z
     256:	99 27       	eor	r25, r25
     258:	87 fd       	sbrc	r24, 7
     25a:	90 95       	com	r25
     25c:	28 17       	cp	r18, r24
     25e:	39 07       	cpc	r19, r25
     260:	59 f7       	brne	.-42     	; 0x238 <stringCheck+0xe>
     262:	16 c0       	rjmp	.+44     	; 0x290 <stringCheck+0x66>
			return 0;
	}
	while (*s)
	{

		if(phoneBuffer[i] != *s++)
     264:	fa 01       	movw	r30, r20
     266:	e0 59       	subi	r30, 0x90	; 144
     268:	fe 4f       	sbci	r31, 0xFE	; 254
     26a:	80 81       	ld	r24, Z
     26c:	99 27       	eor	r25, r25
     26e:	87 fd       	sbrc	r24, 7
     270:	90 95       	com	r25
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	82 17       	cp	r24, r18
     276:	93 07       	cpc	r25, r19
     278:	79 f5       	brne	.+94     	; 0x2d8 <stringCheck+0xae>
			return 0;
		i++;
     27a:	4f 5f       	subi	r20, 0xFF	; 255
     27c:	5f 4f       	sbci	r21, 0xFF	; 255

		if(i > bufferLength-1)
     27e:	80 91 5b 01 	lds	r24, 0x015B
     282:	99 27       	eor	r25, r25
     284:	87 fd       	sbrc	r24, 7
     286:	90 95       	com	r25
     288:	48 17       	cp	r20, r24
     28a:	59 07       	cpc	r21, r25
     28c:	2c f5       	brge	.+74     	; 0x2d8 <stringCheck+0xae>
			return 0;
	}
	while (*s)
	{

		if(phoneBuffer[i] != *s++)
     28e:	11 96       	adiw	r26, 0x01	; 1
	{
		i++;
		if(i > bufferLength-1)
			return 0;
	}
	while (*s)
     290:	2c 91       	ld	r18, X
     292:	22 23       	and	r18, r18
     294:	39 f7       	brne	.-50     	; 0x264 <stringCheck+0x3a>

		if(i > bufferLength-1)
			return 0;
	}

	stringCnter = 0;
     296:	10 92 60 01 	sts	0x0160, r1
     29a:	13 c0       	rjmp	.+38     	; 0x2c2 <stringCheck+0x98>
	while(i < bufferLength -1)
	{
		stringBuffer[stringCnter] = phoneBuffer[i];
     29c:	e0 91 60 01 	lds	r30, 0x0160
     2a0:	ff 27       	eor	r31, r31
     2a2:	e7 fd       	sbrc	r30, 7
     2a4:	f0 95       	com	r31
     2a6:	da 01       	movw	r26, r20
     2a8:	a0 59       	subi	r26, 0x90	; 144
     2aa:	be 4f       	sbci	r27, 0xFE	; 254
     2ac:	8c 91       	ld	r24, X
     2ae:	ec 52       	subi	r30, 0x2C	; 44
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	80 83       	st	Z, r24
		stringCnter++;
     2b4:	80 91 60 01 	lds	r24, 0x0160
     2b8:	8f 5f       	subi	r24, 0xFF	; 255
     2ba:	80 93 60 01 	sts	0x0160, r24
		i++;
     2be:	4f 5f       	subi	r20, 0xFF	; 255
     2c0:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
			return 0;
	}

	stringCnter = 0;
	while(i < bufferLength -1)
     2c2:	80 91 5b 01 	lds	r24, 0x015B
     2c6:	99 27       	eor	r25, r25
     2c8:	87 fd       	sbrc	r24, 7
     2ca:	90 95       	com	r25
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	48 17       	cp	r20, r24
     2d0:	59 07       	cpc	r21, r25
     2d2:	24 f3       	brlt	.-56     	; 0x29c <stringCheck+0x72>
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	08 95       	ret
     2d8:	80 e0       	ldi	r24, 0x00	; 0
		stringCnter++;
		i++;
	}

	return 1;
}
     2da:	08 95       	ret

000002dc <findRinBuff>:

unsigned char findRinBuff()
{
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	06 c0       	rjmp	.+12     	; 0x2ec <findRinBuff+0x10>
	for(unsigned char i = 1; i < bufferLength; i++)
	{
		if(phoneBuffer[i] == 0x0D)
     2e0:	e0 59       	subi	r30, 0x90	; 144
     2e2:	fe 4f       	sbci	r31, 0xFE	; 254
     2e4:	80 81       	ld	r24, Z
     2e6:	8d 30       	cpi	r24, 0x0D	; 13
     2e8:	61 f0       	breq	.+24     	; 0x302 <__stack+0x3>
	return 1;
}

unsigned char findRinBuff()
{
	for(unsigned char i = 1; i < bufferLength; i++)
     2ea:	2f 5f       	subi	r18, 0xFF	; 255
     2ec:	e2 2f       	mov	r30, r18
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 91 5b 01 	lds	r24, 0x015B
     2f4:	99 27       	eor	r25, r25
     2f6:	87 fd       	sbrc	r24, 7
     2f8:	90 95       	com	r25
     2fa:	e8 17       	cp	r30, r24
     2fc:	f9 07       	cpc	r31, r25
     2fe:	84 f3       	brlt	.-32     	; 0x2e0 <findRinBuff+0x4>
     300:	20 e0       	ldi	r18, 0x00	; 0
			return i;
	}

	return 0;

}
     302:	82 2f       	mov	r24, r18
     304:	08 95       	ret

00000306 <bufferCheck>:

void bufferCheck()
{
	if(findRinBuff() > 0)
     306:	ea df       	rcall	.-44     	; 0x2dc <findRinBuff>
     308:	88 23       	and	r24, r24
     30a:	c1 f0       	breq	.+48     	; 0x33c <bufferCheck+0x36>
	{
		if(stringCheck("RING") == 1)
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	8c df       	rcall	.-232    	; 0x22a <stringCheck>
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	19 f4       	brne	.+6      	; 0x31c <bufferCheck+0x16>
		{
			uart_puts("ATH\r");
     316:	8a e0       	ldi	r24, 0x0A	; 10
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	19 df       	rcall	.-462    	; 0x14e <uart_puts>
		}

		if(stringCheck("+CLCC: 1,1,6,") == 1)
     31c:	8f e0       	ldi	r24, 0x0F	; 15
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	84 df       	rcall	.-248    	; 0x22a <stringCheck>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	41 f4       	brne	.+16     	; 0x336 <bufferCheck+0x30>
		{

			if(!(PINC && (1 << PC2)) || stringBuffer[24] != '"') // jeśli jest wpisany opis albo tryb wpuszczaj wszystkich
     326:	86 b1       	in	r24, 0x06	; 6
     328:	88 23       	and	r24, r24
     32a:	21 f0       	breq	.+8      	; 0x334 <bufferCheck+0x2e>
     32c:	80 91 ec 01 	lds	r24, 0x01EC
     330:	82 32       	cpi	r24, 0x22	; 34
     332:	09 f0       	breq	.+2      	; 0x336 <bufferCheck+0x30>
			{
				openGate();
     334:	5a df       	rcall	.-332    	; 0x1ea <openGate>
			}

		}

		bufferLength = 1;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 5b 01 	sts	0x015B, r24
     33c:	08 95       	ret

0000033e <USARTInit>:
}


void USARTInit(unsigned int ubrr_value)
{
   UCSR1A |= (1 << U2X1);
     33e:	e8 ec       	ldi	r30, 0xC8	; 200
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	20 81       	ld	r18, Z
     344:	22 60       	ori	r18, 0x02	; 2
     346:	20 83       	st	Z, r18
   UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
     348:	e9 ec       	ldi	r30, 0xC9	; 201
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	20 81       	ld	r18, Z
     34e:	28 69       	ori	r18, 0x98	; 152
     350:	20 83       	st	Z, r18
   UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     352:	ea ec       	ldi	r30, 0xCA	; 202
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	20 81       	ld	r18, Z
     358:	26 60       	ori	r18, 0x06	; 6
     35a:	20 83       	st	Z, r18
   UBRR1 = ubrr_value;
     35c:	90 93 cd 00 	sts	0x00CD, r25
     360:	80 93 cc 00 	sts	0x00CC, r24
   DDRD |= (1 << PD3);
     364:	53 9a       	sbi	0x0a, 3	; 10
}
     366:	08 95       	ret

00000368 <EVENT_USB_Device_Connect>:
}

void EVENT_USB_Device_Connect(void)
{

}
     368:	08 95       	ret

0000036a <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{

}
     36a:	08 95       	ret

0000036c <EVENT_USB_Device_ControlRequest>:
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
}

void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     36c:	8f e3       	ldi	r24, 0x3F	; 63
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	e9 c6       	rjmp	.+3538   	; 0x1144 <CDC_Device_ProcessControlRequest>

00000372 <EVENT_USB_Device_ConfigurationChanged>:
{

}

void EVENT_USB_Device_ConfigurationChanged(void)
{
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     376:	00 91 5a 01 	lds	r16, 0x015A
     37a:	8f e3       	ldi	r24, 0x3F	; 63
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	bb d6       	rcall	.+3446   	; 0x10f6 <CDC_Device_ConfigureEndpoints>
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	80 23       	and	r24, r16
     388:	91 23       	and	r25, r17
     38a:	89 2b       	or	r24, r25
     38c:	09 f0       	breq	.+2      	; 0x390 <EVENT_USB_Device_ConfigurationChanged+0x1e>
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	20 93 5a 01 	sts	0x015A, r18
}
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	08 95       	ret

0000039a <SetupHardware>:
   DDRD |= (1 << PD3);
}

void SetupHardware(void)
{
	MCUSR &= ~(1 << WDRF);
     39a:	84 b7       	in	r24, 0x34	; 52
     39c:	87 7f       	andi	r24, 0xF7	; 247
     39e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3a0:	88 e1       	ldi	r24, 0x18	; 24
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	80 93 60 00 	sts	0x0060, r24
     3aa:	10 92 60 00 	sts	0x0060, r1
     3ae:	0f be       	out	0x3f, r0	; 63

	DDRB = (1 << PB5) | (1 << PB6) | (1 << PB4);
     3b0:	80 e7       	ldi	r24, 0x70	; 112
     3b2:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << PC7);
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC2);
     3b8:	42 9a       	sbi	0x08, 2	; 8


	clock_prescale_set(0);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	20 93 61 00 	sts	0x0061, r18
     3c8:	80 93 61 00 	sts	0x0061, r24
     3cc:	0f be       	out	0x3f, r0	; 63

	USB_Init();
     3ce:	5e d3       	rcall	.+1724   	; 0xa8c <USB_Init>
	USARTInit(25);
     3d0:	89 e1       	ldi	r24, 0x19	; 25
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	b4 df       	rcall	.-152    	; 0x33e <USARTInit>

	TCCR0A |= (1 << WGM01);
     3d6:	84 b5       	in	r24, 0x24	; 36
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02);
     3dc:	85 b5       	in	r24, 0x25	; 37
     3de:	85 60       	ori	r24, 0x05	; 5
     3e0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
     3e2:	ee e6       	ldi	r30, 0x6E	; 110
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 60       	ori	r24, 0x02	; 2
     3ea:	80 83       	st	Z, r24
	OCR0A = 255;
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	87 bd       	out	0x27, r24	; 39

	DDRD &= ~(1 << PD1);
     3f0:	51 98       	cbi	0x0a, 1	; 10
	EICRA |= (1 << ISC11) | (1 << ISC10);
     3f2:	e9 e6       	ldi	r30, 0x69	; 105
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	8c 60       	ori	r24, 0x0C	; 12
     3fa:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
     3fc:	e9 9a       	sbi	0x1d, 1	; 29

	DDRC &= ~(1 << PC2);
     3fe:	3a 98       	cbi	0x07, 2	; 7
	PORTC |= (1 << PC2);
     400:	42 9a       	sbi	0x08, 2	; 8
}
     402:	08 95       	ret

00000404 <__vector_23>:
	PORTC &= ~(1 << PC7);
}


SIGNAL(USART1_RX_vect)
{
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	1f 93       	push	r17
     410:	2f 93       	push	r18
     412:	3f 93       	push	r19
     414:	4f 93       	push	r20
     416:	5f 93       	push	r21
     418:	6f 93       	push	r22
     41a:	7f 93       	push	r23
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	af 93       	push	r26
     422:	bf 93       	push	r27
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	00 d0       	rcall	.+0      	; 0x42e <__vector_23+0x2a>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
	int8_t c = UDR1;
     432:	10 91 ce 00 	lds	r17, 0x00CE
	int16_t c2 = c;
	if(ConfigSuccess && bDebug)
     436:	80 91 5a 01 	lds	r24, 0x015A
     43a:	88 23       	and	r24, r24
     43c:	79 f0       	breq	.+30     	; 0x45c <__vector_23+0x58>
     43e:	80 91 5f 01 	lds	r24, 0x015F
     442:	88 23       	and	r24, r24
     444:	59 f0       	breq	.+22     	; 0x45c <__vector_23+0x58>


SIGNAL(USART1_RX_vect)
{
	int8_t c = UDR1;
	int16_t c2 = c;
     446:	81 2f       	mov	r24, r17
     448:	99 27       	eor	r25, r25
     44a:	87 fd       	sbrc	r24, 7
     44c:	90 95       	com	r25
     44e:	9a 83       	std	Y+2, r25	; 0x02
     450:	89 83       	std	Y+1, r24	; 0x01
	if(ConfigSuccess && bDebug)
		fputs(&c2, &USBSerialStream); // do debugu
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	62 e6       	ldi	r22, 0x62	; 98
     458:	71 e0       	ldi	r23, 0x01	; 1
     45a:	40 d7       	rcall	.+3712   	; 0x12dc <fputs>

	phoneBuffer[bufferLength] = c;
     45c:	e0 91 5b 01 	lds	r30, 0x015B
     460:	ff 27       	eor	r31, r31
     462:	e7 fd       	sbrc	r30, 7
     464:	f0 95       	com	r31
     466:	e0 59       	subi	r30, 0x90	; 144
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	10 83       	st	Z, r17
	bufferLength++;
     46c:	80 91 5b 01 	lds	r24, 0x015B
     470:	8f 5f       	subi	r24, 0xFF	; 255
     472:	80 93 5b 01 	sts	0x015B, r24
}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	ff 91       	pop	r31
     480:	ef 91       	pop	r30
     482:	bf 91       	pop	r27
     484:	af 91       	pop	r26
     486:	9f 91       	pop	r25
     488:	8f 91       	pop	r24
     48a:	7f 91       	pop	r23
     48c:	6f 91       	pop	r22
     48e:	5f 91       	pop	r21
     490:	4f 91       	pop	r20
     492:	3f 91       	pop	r19
     494:	2f 91       	pop	r18
     496:	1f 91       	pop	r17
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <pb_clear>:
		bufferLength = 1;
	}
}

void pb_clear(int from, int to)
{
     4a2:	af 92       	push	r10
     4a4:	bf 92       	push	r11
     4a6:	cf 92       	push	r12
     4a8:	df 92       	push	r13
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <pb_clear+0x16>
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <pb_clear+0x18>
     4ba:	0f 92       	push	r0
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	6b 01       	movw	r12, r22
     4c2:	8c 01       	movw	r16, r24
	for (int i = from; i < to+1; i++)
	{
		char buffer[5];
		uart_puts("AT+CPBW=");
		itoa(i, buffer, 10);
     4c4:	7e 01       	movw	r14, r28
     4c6:	08 94       	sec
     4c8:	e1 1c       	adc	r14, r1
     4ca:	f1 1c       	adc	r15, r1
     4cc:	88 ec       	ldi	r24, 0xC8	; 200
     4ce:	a8 2e       	mov	r10, r24
     4d0:	b1 2c       	mov	r11, r1
     4d2:	16 c0       	rjmp	.+44     	; 0x500 <pb_clear+0x5e>
void pb_clear(int from, int to)
{
	for (int i = from; i < to+1; i++)
	{
		char buffer[5];
		uart_puts("AT+CPBW=");
     4d4:	8d e1       	ldi	r24, 0x1D	; 29
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	3a de       	rcall	.-908    	; 0x14e <uart_puts>
		itoa(i, buffer, 10);
     4da:	c8 01       	movw	r24, r16
     4dc:	b7 01       	movw	r22, r14
     4de:	4a e0       	ldi	r20, 0x0A	; 10
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	dd d6       	rcall	.+3514   	; 0x129e <itoa>
		uart_puts(buffer);
     4e4:	c7 01       	movw	r24, r14
     4e6:	33 de       	rcall	.-922    	; 0x14e <uart_puts>
		uart_puts("\r");
     4e8:	86 e2       	ldi	r24, 0x26	; 38
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	30 de       	rcall	.-928    	; 0x14e <uart_puts>
     4ee:	88 eb       	ldi	r24, 0xB8	; 184
     4f0:	9b e0       	ldi	r25, 0x0B	; 11
     4f2:	f5 01       	movw	r30, r10
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <pb_clear+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fa:	d9 f7       	brne	.-10     	; 0x4f2 <pb_clear+0x50>
	}
}

void pb_clear(int from, int to)
{
	for (int i = from; i < to+1; i++)
     4fc:	0f 5f       	subi	r16, 0xFF	; 255
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	c0 16       	cp	r12, r16
     502:	d1 06       	cpc	r13, r17
     504:	3c f7       	brge	.-50     	; 0x4d4 <pb_clear+0x32>
		itoa(i, buffer, 10);
		uart_puts(buffer);
		uart_puts("\r");
		_delay_ms(300);
	}
}
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	bf 90       	pop	r11
     522:	af 90       	pop	r10
     524:	08 95       	ret

00000526 <main>:


int main(void)
{
     526:	bf 92       	push	r11
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	df 93       	push	r29
     536:	cf 93       	push	r28
     538:	00 d0       	rcall	.+0      	; 0x53a <main+0x14>
     53a:	00 d0       	rcall	.+0      	; 0x53c <main+0x16>
     53c:	0f 92       	push	r0
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
     542:	2b df       	rcall	.-426    	; 0x39a <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     544:	8f e3       	ldi	r24, 0x3F	; 63
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	62 e6       	ldi	r22, 0x62	; 98
     54a:	71 e0       	ldi	r23, 0x01	; 1
     54c:	3b d5       	rcall	.+2678   	; 0xfc4 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     54e:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     550:	80 e5       	ldi	r24, 0x50	; 80
     552:	93 ec       	ldi	r25, 0xC3	; 195
     554:	28 ec       	ldi	r18, 0xC8	; 200
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	f9 01       	movw	r30, r18
     55a:	31 97       	sbiw	r30, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <main+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     560:	d9 f7       	brne	.-10     	; 0x558 <main+0x32>
	GlobalInterruptEnable();

	_delay_ms(5000);
	uart_puts("ATI\r");
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	f3 dd       	rcall	.-1050   	; 0x14e <uart_puts>
     568:	88 e8       	ldi	r24, 0x88	; 136
     56a:	93 e1       	ldi	r25, 0x13	; 19
     56c:	28 ec       	ldi	r18, 0xC8	; 200
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     576:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     578:	d9 f7       	brne	.-10     	; 0x570 <main+0x4a>
	_delay_ms(500);

	numbers = eeprom_read_word(( uint16_t *)1);
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	d6 d6       	rcall	.+3500   	; 0x132c <__eerd_word_usb162>
     580:	80 93 5e 01 	sts	0x015E, r24

				if(b == 0x1B)
					openGate();

				if(b == 'd')
					bDebug = !bDebug;
     584:	bb 24       	eor	r11, r11
     586:	b3 94       	inc	r11
				{
					iRead++;
					uart_puts("AT+CPBW=");

					char buff[5];
					itoa(iRead, buff, 10);
     588:	7e 01       	movw	r14, r28
     58a:	08 94       	sec
     58c:	e1 1c       	adc	r14, r1
     58e:	f1 1c       	adc	r15, r1
     590:	98 ec       	ldi	r25, 0xC8	; 200
     592:	c9 2e       	mov	r12, r25
     594:	d1 2c       	mov	r13, r1

	numbers = eeprom_read_word(( uint16_t *)1);

	for (;;)
	{
		if(ConfigSuccess)
     596:	80 91 5a 01 	lds	r24, 0x015A
     59a:	88 23       	and	r24, r24
     59c:	09 f4       	brne	.+2      	; 0x5a0 <main+0x7a>
     59e:	82 c0       	rjmp	.+260    	; 0x6a4 <main+0x17e>
		{
			int16_t b = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     5a0:	8f e3       	ldi	r24, 0x3F	; 63
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	e1 d4       	rcall	.+2498   	; 0xf68 <CDC_Device_ReceiveByte>
     5a6:	8c 01       	movw	r16, r24

			if(b > -1)
     5a8:	97 fd       	sbrc	r25, 7
     5aa:	78 c0       	rjmp	.+240    	; 0x69c <main+0x176>
			{
				if(b == '*')
     5ac:	8a 32       	cpi	r24, 0x2A	; 42
     5ae:	91 05       	cpc	r25, r1
     5b0:	29 f4       	brne	.+10     	; 0x5bc <main+0x96>
				{
					iRead = 0;
     5b2:	10 92 5d 01 	sts	0x015D, r1
     5b6:	10 92 5c 01 	sts	0x015C, r1
     5ba:	44 c0       	rjmp	.+136    	; 0x644 <main+0x11e>
				}

				if(b == '\r' || b == 0x1A)
     5bc:	8d 30       	cpi	r24, 0x0D	; 13
     5be:	91 05       	cpc	r25, r1
     5c0:	21 f0       	breq	.+8      	; 0x5ca <main+0xa4>
     5c2:	8a 31       	cpi	r24, 0x1A	; 26
     5c4:	91 05       	cpc	r25, r1
     5c6:	09 f0       	breq	.+2      	; 0x5ca <main+0xa4>
     5c8:	3a c0       	rjmp	.+116    	; 0x63e <main+0x118>
				{
					uart_puts("\",129,\"aa\"\r");
     5ca:	88 e2       	ldi	r24, 0x28	; 40
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	bf dd       	rcall	.-1154   	; 0x14e <uart_puts>
     5d0:	88 eb       	ldi	r24, 0xB8	; 184
     5d2:	9b e0       	ldi	r25, 0x0B	; 11
     5d4:	f6 01       	movw	r30, r12
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5dc:	d9 f7       	brne	.-10     	; 0x5d4 <main+0xae>
					_delay_ms(300);
					bufferLength = 1;
     5de:	b0 92 5b 01 	sts	0x015B, r11

					fputs("ok\r\n", &USBSerialStream);
     5e2:	84 e3       	ldi	r24, 0x34	; 52
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	62 e6       	ldi	r22, 0x62	; 98
     5e8:	71 e0       	ldi	r23, 0x01	; 1
     5ea:	78 d6       	rcall	.+3312   	; 0x12dc <fputs>
				}

				if(b == 0x1A)
     5ec:	0a 31       	cpi	r16, 0x1A	; 26
     5ee:	11 05       	cpc	r17, r1
     5f0:	31 f5       	brne	.+76     	; 0x63e <main+0x118>
				{
					if(numbers > iRead)
     5f2:	80 91 5e 01 	lds	r24, 0x015E
     5f6:	20 91 5c 01 	lds	r18, 0x015C
     5fa:	30 91 5d 01 	lds	r19, 0x015D
     5fe:	99 27       	eor	r25, r25
     600:	87 fd       	sbrc	r24, 7
     602:	90 95       	com	r25
     604:	28 17       	cp	r18, r24
     606:	39 07       	cpc	r19, r25
     608:	5c f4       	brge	.+22     	; 0x620 <main+0xfa>
						pb_clear(iRead +1, numbers);
     60a:	80 91 5c 01 	lds	r24, 0x015C
     60e:	90 91 5d 01 	lds	r25, 0x015D
     612:	60 91 5e 01 	lds	r22, 0x015E
     616:	77 27       	eor	r23, r23
     618:	67 fd       	sbrc	r22, 7
     61a:	70 95       	com	r23
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	41 df       	rcall	.-382    	; 0x4a2 <pb_clear>

					numbers = iRead;
     620:	80 91 5c 01 	lds	r24, 0x015C
     624:	90 91 5d 01 	lds	r25, 0x015D
     628:	80 93 5e 01 	sts	0x015E, r24
					eeprom_write_word((uint16_t*)1, (uint16_t)numbers);
     62c:	60 91 5e 01 	lds	r22, 0x015E
     630:	77 27       	eor	r23, r23
     632:	67 fd       	sbrc	r22, 7
     634:	70 95       	com	r23
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	7d d6       	rcall	.+3322   	; 0x1336 <__eewr_word_usb162>
     63c:	1c c0       	rjmp	.+56     	; 0x676 <main+0x150>
				}

				if(b == '*' || b == '\r')
     63e:	0d 30       	cpi	r16, 0x0D	; 13
     640:	11 05       	cpc	r17, r1
     642:	c9 f4       	brne	.+50     	; 0x676 <main+0x150>
				{
					iRead++;
     644:	80 91 5c 01 	lds	r24, 0x015C
     648:	90 91 5d 01 	lds	r25, 0x015D
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	90 93 5d 01 	sts	0x015D, r25
     652:	80 93 5c 01 	sts	0x015C, r24
					uart_puts("AT+CPBW=");
     656:	8d e1       	ldi	r24, 0x1D	; 29
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	79 dd       	rcall	.-1294   	; 0x14e <uart_puts>

					char buff[5];
					itoa(iRead, buff, 10);
     65c:	80 91 5c 01 	lds	r24, 0x015C
     660:	90 91 5d 01 	lds	r25, 0x015D
     664:	b7 01       	movw	r22, r14
     666:	4a e0       	ldi	r20, 0x0A	; 10
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	19 d6       	rcall	.+3122   	; 0x129e <itoa>
					uart_puts(buff);
     66c:	c7 01       	movw	r24, r14
     66e:	6f dd       	rcall	.-1314   	; 0x14e <uart_puts>
					uart_puts(",\"+48");
     670:	89 e3       	ldi	r24, 0x39	; 57
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	6c dd       	rcall	.-1320   	; 0x14e <uart_puts>
				}

				if(b > 47 && b < 58)
     676:	c8 01       	movw	r24, r16
     678:	c0 97       	sbiw	r24, 0x30	; 48
     67a:	0a 97       	sbiw	r24, 0x0a	; 10
     67c:	10 f4       	brcc	.+4      	; 0x682 <main+0x15c>
				{
					uart_put(b);
     67e:	80 2f       	mov	r24, r16
     680:	5e dd       	rcall	.-1348   	; 0x13e <uart_put>
				}

				if(b == 0x1B)
     682:	0b 31       	cpi	r16, 0x1B	; 27
     684:	11 05       	cpc	r17, r1
     686:	11 f4       	brne	.+4      	; 0x68c <main+0x166>
					openGate();
     688:	b0 dd       	rcall	.-1184   	; 0x1ea <openGate>
     68a:	08 c0       	rjmp	.+16     	; 0x69c <main+0x176>

				if(b == 'd')
     68c:	04 36       	cpi	r16, 0x64	; 100
     68e:	11 05       	cpc	r17, r1
     690:	29 f4       	brne	.+10     	; 0x69c <main+0x176>
					bDebug = !bDebug;
     692:	80 91 5f 01 	lds	r24, 0x015F
     696:	8b 25       	eor	r24, r11
     698:	80 93 5f 01 	sts	0x015F, r24

			}

			CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     69c:	8f e3       	ldi	r24, 0x3F	; 63
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	dd d4       	rcall	.+2490   	; 0x105c <CDC_Device_USBTask>
			USB_USBTask();
     6a2:	4d d4       	rcall	.+2202   	; 0xf3e <USB_USBTask>
		}
		bufferCheck();
     6a4:	30 de       	rcall	.-928    	; 0x306 <bufferCheck>

		if(!(PINC && (1 << PC2)))
     6a6:	86 b1       	in	r24, 0x06	; 6
     6a8:	88 23       	and	r24, r24
     6aa:	11 f4       	brne	.+4      	; 0x6b0 <main+0x18a>
			PORTB |= (1 << PB5);
     6ac:	2d 9a       	sbi	0x05, 5	; 5
     6ae:	73 cf       	rjmp	.-282    	; 0x596 <main+0x70>
		else
			PORTB &= ~(1 << PB5);
     6b0:	2d 98       	cbi	0x05, 5	; 5
     6b2:	71 cf       	rjmp	.-286    	; 0x596 <main+0x70>

000006b4 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     6b4:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     6b6:	92 30       	cpi	r25, 0x02	; 2
     6b8:	49 f0       	breq	.+18     	; 0x6cc <CALLBACK_USB_GetDescriptor+0x18>
     6ba:	93 30       	cpi	r25, 0x03	; 3
     6bc:	61 f0       	breq	.+24     	; 0x6d6 <CALLBACK_USB_GetDescriptor+0x22>
     6be:	91 30       	cpi	r25, 0x01	; 1
     6c0:	f9 f4       	brne	.+62     	; 0x700 <CALLBACK_USB_GetDescriptor+0x4c>
     6c2:	e4 e7       	ldi	r30, 0x74	; 116
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	22 e1       	ldi	r18, 0x12	; 18
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	1e c0       	rjmp	.+60     	; 0x708 <CALLBACK_USB_GetDescriptor+0x54>
     6cc:	e6 e8       	ldi	r30, 0x86	; 134
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	2e e3       	ldi	r18, 0x3E	; 62
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	19 c0       	rjmp	.+50     	; 0x708 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	49 f0       	breq	.+18     	; 0x6ec <CALLBACK_USB_GetDescriptor+0x38>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	18 f0       	brcs	.+6      	; 0x6e4 <CALLBACK_USB_GetDescriptor+0x30>
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	79 f4       	brne	.+30     	; 0x700 <CALLBACK_USB_GetDescriptor+0x4c>
     6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6e4:	e4 ec       	ldi	r30, 0xC4	; 196
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	84 91       	lpm	r24, Z+
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6ec:	e8 ec       	ldi	r30, 0xC8	; 200
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	84 91       	lpm	r24, Z+
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6f4:	ea ee       	ldi	r30, 0xEA	; 234
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	84 91       	lpm	r24, Z+
     6fa:	28 2f       	mov	r18, r24
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <CALLBACK_USB_GetDescriptor+0x54>
     700:	e0 e0       	ldi	r30, 0x00	; 0
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     708:	ed 93       	st	X+, r30
     70a:	fc 93       	st	X, r31
	return Size;
}
     70c:	c9 01       	movw	r24, r18
     70e:	08 95       	ret

00000710 <Endpoint_Write_Control_Stream_LE>:
     710:	9c 01       	movw	r18, r24
     712:	40 91 43 02 	lds	r20, 0x0243
     716:	50 91 44 02 	lds	r21, 0x0244
     71a:	46 17       	cp	r20, r22
     71c:	57 07       	cpc	r21, r23
     71e:	18 f4       	brcc	.+6      	; 0x726 <Endpoint_Write_Control_Stream_LE+0x16>
     720:	f9 01       	movw	r30, r18
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	3d c0       	rjmp	.+122    	; 0x7a0 <Endpoint_Write_Control_Stream_LE+0x90>
     726:	61 15       	cp	r22, r1
     728:	71 05       	cpc	r23, r1
     72a:	11 f0       	breq	.+4      	; 0x730 <Endpoint_Write_Control_Stream_LE+0x20>
     72c:	ab 01       	movw	r20, r22
     72e:	f8 cf       	rjmp	.-16     	; 0x720 <Endpoint_Write_Control_Stream_LE+0x10>
     730:	80 91 e8 00 	lds	r24, 0x00E8
     734:	8e 77       	andi	r24, 0x7E	; 126
     736:	80 93 e8 00 	sts	0x00E8, r24
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	f0 cf       	rjmp	.-32     	; 0x720 <Endpoint_Write_Control_Stream_LE+0x10>
     740:	80 91 3c 02 	lds	r24, 0x023C
     744:	88 23       	and	r24, r24
     746:	f1 f1       	breq	.+124    	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0xb4>
     748:	85 30       	cpi	r24, 0x05	; 5
     74a:	f1 f1       	breq	.+124    	; 0x7c8 <Endpoint_Write_Control_Stream_LE+0xb8>
     74c:	80 91 e8 00 	lds	r24, 0x00E8
     750:	83 ff       	sbrs	r24, 3
     752:	02 c0       	rjmp	.+4      	; 0x758 <Endpoint_Write_Control_Stream_LE+0x48>
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	08 95       	ret
     758:	80 91 e8 00 	lds	r24, 0x00E8
     75c:	82 fd       	sbrc	r24, 2
     75e:	2c c0       	rjmp	.+88     	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0xa8>
     760:	80 91 e8 00 	lds	r24, 0x00E8
     764:	80 ff       	sbrs	r24, 0
     766:	1c c0       	rjmp	.+56     	; 0x7a0 <Endpoint_Write_Control_Stream_LE+0x90>
     768:	80 91 f2 00 	lds	r24, 0x00F2
     76c:	28 2f       	mov	r18, r24
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	07 c0       	rjmp	.+14     	; 0x780 <Endpoint_Write_Control_Stream_LE+0x70>
     772:	81 91       	ld	r24, Z+
     774:	80 93 f1 00 	sts	0x00F1, r24
     778:	41 50       	subi	r20, 0x01	; 1
     77a:	50 40       	sbci	r21, 0x00	; 0
     77c:	2f 5f       	subi	r18, 0xFF	; 255
     77e:	3f 4f       	sbci	r19, 0xFF	; 255
     780:	41 15       	cp	r20, r1
     782:	51 05       	cpc	r21, r1
     784:	19 f0       	breq	.+6      	; 0x78c <Endpoint_Write_Control_Stream_LE+0x7c>
     786:	28 30       	cpi	r18, 0x08	; 8
     788:	31 05       	cpc	r19, r1
     78a:	98 f3       	brcs	.-26     	; 0x772 <Endpoint_Write_Control_Stream_LE+0x62>
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	28 30       	cpi	r18, 0x08	; 8
     790:	31 05       	cpc	r19, r1
     792:	09 f4       	brne	.+2      	; 0x796 <Endpoint_Write_Control_Stream_LE+0x86>
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	80 91 e8 00 	lds	r24, 0x00E8
     79a:	8e 77       	andi	r24, 0x7E	; 126
     79c:	80 93 e8 00 	sts	0x00E8, r24
     7a0:	41 15       	cp	r20, r1
     7a2:	51 05       	cpc	r21, r1
     7a4:	69 f6       	brne	.-102    	; 0x740 <Endpoint_Write_Control_Stream_LE+0x30>
     7a6:	99 23       	and	r25, r25
     7a8:	59 f6       	brne	.-106    	; 0x740 <Endpoint_Write_Control_Stream_LE+0x30>
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0xa8>
     7ac:	80 91 3c 02 	lds	r24, 0x023C
     7b0:	88 23       	and	r24, r24
     7b2:	41 f0       	breq	.+16     	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0xb4>
     7b4:	85 30       	cpi	r24, 0x05	; 5
     7b6:	41 f0       	breq	.+16     	; 0x7c8 <Endpoint_Write_Control_Stream_LE+0xb8>
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
     7bc:	82 ff       	sbrs	r24, 2
     7be:	f6 cf       	rjmp	.-20     	; 0x7ac <Endpoint_Write_Control_Stream_LE+0x9c>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	08 95       	ret
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	08 95       	ret
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	08 95       	ret

000007cc <Endpoint_Write_Control_PStream_LE>:
     7cc:	9c 01       	movw	r18, r24
     7ce:	40 91 43 02 	lds	r20, 0x0243
     7d2:	50 91 44 02 	lds	r21, 0x0244
     7d6:	46 17       	cp	r20, r22
     7d8:	57 07       	cpc	r21, r23
     7da:	18 f4       	brcc	.+6      	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0x16>
     7dc:	f9 01       	movw	r30, r18
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	40 c0       	rjmp	.+128    	; 0x862 <Endpoint_Write_Control_PStream_LE+0x96>
     7e2:	61 15       	cp	r22, r1
     7e4:	71 05       	cpc	r23, r1
     7e6:	11 f0       	breq	.+4      	; 0x7ec <Endpoint_Write_Control_PStream_LE+0x20>
     7e8:	ab 01       	movw	r20, r22
     7ea:	f8 cf       	rjmp	.-16     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x10>
     7ec:	80 91 e8 00 	lds	r24, 0x00E8
     7f0:	8e 77       	andi	r24, 0x7E	; 126
     7f2:	80 93 e8 00 	sts	0x00E8, r24
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	f0 cf       	rjmp	.-32     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x10>
     7fc:	80 91 3c 02 	lds	r24, 0x023C
     800:	88 23       	and	r24, r24
     802:	09 f4       	brne	.+2      	; 0x806 <Endpoint_Write_Control_PStream_LE+0x3a>
     804:	40 c0       	rjmp	.+128    	; 0x886 <Endpoint_Write_Control_PStream_LE+0xba>
     806:	85 30       	cpi	r24, 0x05	; 5
     808:	09 f4       	brne	.+2      	; 0x80c <Endpoint_Write_Control_PStream_LE+0x40>
     80a:	3f c0       	rjmp	.+126    	; 0x88a <Endpoint_Write_Control_PStream_LE+0xbe>
     80c:	80 91 e8 00 	lds	r24, 0x00E8
     810:	83 ff       	sbrs	r24, 3
     812:	02 c0       	rjmp	.+4      	; 0x818 <Endpoint_Write_Control_PStream_LE+0x4c>
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	08 95       	ret
     818:	80 91 e8 00 	lds	r24, 0x00E8
     81c:	82 fd       	sbrc	r24, 2
     81e:	2d c0       	rjmp	.+90     	; 0x87a <Endpoint_Write_Control_PStream_LE+0xae>
     820:	80 91 e8 00 	lds	r24, 0x00E8
     824:	80 ff       	sbrs	r24, 0
     826:	1d c0       	rjmp	.+58     	; 0x862 <Endpoint_Write_Control_PStream_LE+0x96>
     828:	80 91 f2 00 	lds	r24, 0x00F2
     82c:	28 2f       	mov	r18, r24
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	08 c0       	rjmp	.+16     	; 0x842 <Endpoint_Write_Control_PStream_LE+0x76>
     832:	84 91       	lpm	r24, Z+
     834:	80 93 f1 00 	sts	0x00F1, r24
     838:	31 96       	adiw	r30, 0x01	; 1
     83a:	41 50       	subi	r20, 0x01	; 1
     83c:	50 40       	sbci	r21, 0x00	; 0
     83e:	2f 5f       	subi	r18, 0xFF	; 255
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	41 15       	cp	r20, r1
     844:	51 05       	cpc	r21, r1
     846:	19 f0       	breq	.+6      	; 0x84e <Endpoint_Write_Control_PStream_LE+0x82>
     848:	28 30       	cpi	r18, 0x08	; 8
     84a:	31 05       	cpc	r19, r1
     84c:	90 f3       	brcs	.-28     	; 0x832 <Endpoint_Write_Control_PStream_LE+0x66>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	28 30       	cpi	r18, 0x08	; 8
     852:	31 05       	cpc	r19, r1
     854:	09 f4       	brne	.+2      	; 0x858 <Endpoint_Write_Control_PStream_LE+0x8c>
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	80 91 e8 00 	lds	r24, 0x00E8
     85c:	8e 77       	andi	r24, 0x7E	; 126
     85e:	80 93 e8 00 	sts	0x00E8, r24
     862:	41 15       	cp	r20, r1
     864:	51 05       	cpc	r21, r1
     866:	51 f6       	brne	.-108    	; 0x7fc <Endpoint_Write_Control_PStream_LE+0x30>
     868:	99 23       	and	r25, r25
     86a:	41 f6       	brne	.-112    	; 0x7fc <Endpoint_Write_Control_PStream_LE+0x30>
     86c:	06 c0       	rjmp	.+12     	; 0x87a <Endpoint_Write_Control_PStream_LE+0xae>
     86e:	80 91 3c 02 	lds	r24, 0x023C
     872:	88 23       	and	r24, r24
     874:	41 f0       	breq	.+16     	; 0x886 <Endpoint_Write_Control_PStream_LE+0xba>
     876:	85 30       	cpi	r24, 0x05	; 5
     878:	41 f0       	breq	.+16     	; 0x88a <Endpoint_Write_Control_PStream_LE+0xbe>
     87a:	80 91 e8 00 	lds	r24, 0x00E8
     87e:	82 ff       	sbrs	r24, 2
     880:	f6 cf       	rjmp	.-20     	; 0x86e <Endpoint_Write_Control_PStream_LE+0xa2>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	08 95       	ret
     88a:	83 e0       	ldi	r24, 0x03	; 3
     88c:	08 95       	ret

0000088e <Endpoint_ConfigureEndpoint_Prv>:
     88e:	38 2f       	mov	r19, r24
     890:	28 2f       	mov	r18, r24
     892:	2e c0       	rjmp	.+92     	; 0x8f0 <Endpoint_ConfigureEndpoint_Prv+0x62>
     894:	82 2f       	mov	r24, r18
     896:	8f 70       	andi	r24, 0x0F	; 15
     898:	80 93 e9 00 	sts	0x00E9, r24
     89c:	23 17       	cp	r18, r19
     89e:	21 f4       	brne	.+8      	; 0x8a8 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     8a0:	76 2f       	mov	r23, r22
     8a2:	94 2f       	mov	r25, r20
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <Endpoint_ConfigureEndpoint_Prv+0x26>
     8a8:	70 91 ec 00 	lds	r23, 0x00EC
     8ac:	90 91 ed 00 	lds	r25, 0x00ED
     8b0:	50 91 f0 00 	lds	r21, 0x00F0
     8b4:	91 ff       	sbrs	r25, 1
     8b6:	1b c0       	rjmp	.+54     	; 0x8ee <Endpoint_ConfigureEndpoint_Prv+0x60>
     8b8:	80 91 eb 00 	lds	r24, 0x00EB
     8bc:	8e 7f       	andi	r24, 0xFE	; 254
     8be:	80 93 eb 00 	sts	0x00EB, r24
     8c2:	80 91 ed 00 	lds	r24, 0x00ED
     8c6:	8d 7f       	andi	r24, 0xFD	; 253
     8c8:	80 93 ed 00 	sts	0x00ED, r24
     8cc:	80 91 eb 00 	lds	r24, 0x00EB
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	80 93 eb 00 	sts	0x00EB, r24
     8d6:	70 93 ec 00 	sts	0x00EC, r23
     8da:	90 93 ed 00 	sts	0x00ED, r25
     8de:	50 93 f0 00 	sts	0x00F0, r21
     8e2:	80 91 ee 00 	lds	r24, 0x00EE
     8e6:	87 fd       	sbrc	r24, 7
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <Endpoint_ConfigureEndpoint_Prv+0x60>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	08 95       	ret
     8ee:	2f 5f       	subi	r18, 0xFF	; 255
     8f0:	25 30       	cpi	r18, 0x05	; 5
     8f2:	80 f2       	brcs	.-96     	; 0x894 <Endpoint_ConfigureEndpoint_Prv+0x6>
     8f4:	3f 70       	andi	r19, 0x0F	; 15
     8f6:	30 93 e9 00 	sts	0x00E9, r19
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	08 95       	ret

000008fe <Endpoint_ConfigureEndpointTable>:
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	06 2f       	mov	r16, r22
     908:	ec 01       	movw	r28, r24
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	2a c0       	rjmp	.+84     	; 0x962 <Endpoint_ConfigureEndpointTable+0x64>
     90e:	98 81       	ld	r25, Y
     910:	99 23       	and	r25, r25
     912:	29 f1       	breq	.+74     	; 0x95e <Endpoint_ConfigureEndpointTable+0x60>
     914:	6b 81       	ldd	r22, Y+3	; 0x03
     916:	e9 81       	ldd	r30, Y+1	; 0x01
     918:	fa 81       	ldd	r31, Y+2	; 0x02
     91a:	2c 81       	ldd	r18, Y+4	; 0x04
     91c:	89 2f       	mov	r24, r25
     91e:	8f 70       	andi	r24, 0x0F	; 15
     920:	85 30       	cpi	r24, 0x05	; 5
     922:	18 f5       	brcc	.+70     	; 0x96a <Endpoint_ConfigureEndpointTable+0x6c>
     924:	22 30       	cpi	r18, 0x02	; 2
     926:	10 f4       	brcc	.+4      	; 0x92c <Endpoint_ConfigureEndpointTable+0x2e>
     928:	52 e0       	ldi	r21, 0x02	; 2
     92a:	01 c0       	rjmp	.+2      	; 0x92e <Endpoint_ConfigureEndpointTable+0x30>
     92c:	56 e0       	ldi	r21, 0x06	; 6
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	28 e0       	ldi	r18, 0x08	; 8
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	03 c0       	rjmp	.+6      	; 0x93c <Endpoint_ConfigureEndpointTable+0x3e>
     936:	4f 5f       	subi	r20, 0xFF	; 255
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	2e 17       	cp	r18, r30
     93e:	3f 07       	cpc	r19, r31
     940:	d0 f3       	brcs	.-12     	; 0x936 <Endpoint_ConfigureEndpointTable+0x38>
     942:	62 95       	swap	r22
     944:	66 0f       	add	r22, r22
     946:	66 0f       	add	r22, r22
     948:	60 7c       	andi	r22, 0xC0	; 192
     94a:	99 1f       	adc	r25, r25
     94c:	99 27       	eor	r25, r25
     94e:	99 1f       	adc	r25, r25
     950:	69 2b       	or	r22, r25
     952:	42 95       	swap	r20
     954:	40 7f       	andi	r20, 0xF0	; 240
     956:	45 2b       	or	r20, r21
     958:	9a df       	rcall	.-204    	; 0x88e <Endpoint_ConfigureEndpoint_Prv>
     95a:	88 23       	and	r24, r24
     95c:	31 f0       	breq	.+12     	; 0x96a <Endpoint_ConfigureEndpointTable+0x6c>
     95e:	1f 5f       	subi	r17, 0xFF	; 255
     960:	25 96       	adiw	r28, 0x05	; 5
     962:	10 17       	cp	r17, r16
     964:	a0 f2       	brcs	.-88     	; 0x90e <Endpoint_ConfigureEndpointTable+0x10>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	01 c0       	rjmp	.+2      	; 0x96c <Endpoint_ConfigureEndpointTable+0x6e>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <Endpoint_ClearStatusStage>:
     976:	80 91 3d 02 	lds	r24, 0x023D
     97a:	88 23       	and	r24, r24
     97c:	9c f4       	brge	.+38     	; 0x9a4 <Endpoint_ClearStatusStage+0x2e>
     97e:	04 c0       	rjmp	.+8      	; 0x988 <Endpoint_ClearStatusStage+0x12>
     980:	80 91 3c 02 	lds	r24, 0x023C
     984:	88 23       	and	r24, r24
     986:	b9 f0       	breq	.+46     	; 0x9b6 <Endpoint_ClearStatusStage+0x40>
     988:	80 91 e8 00 	lds	r24, 0x00E8
     98c:	82 ff       	sbrs	r24, 2
     98e:	f8 cf       	rjmp	.-16     	; 0x980 <Endpoint_ClearStatusStage+0xa>
     990:	80 91 e8 00 	lds	r24, 0x00E8
     994:	8b 77       	andi	r24, 0x7B	; 123
     996:	80 93 e8 00 	sts	0x00E8, r24
     99a:	08 95       	ret
     99c:	80 91 3c 02 	lds	r24, 0x023C
     9a0:	88 23       	and	r24, r24
     9a2:	49 f0       	breq	.+18     	; 0x9b6 <Endpoint_ClearStatusStage+0x40>
     9a4:	80 91 e8 00 	lds	r24, 0x00E8
     9a8:	80 ff       	sbrs	r24, 0
     9aa:	f8 cf       	rjmp	.-16     	; 0x99c <Endpoint_ClearStatusStage+0x26>
     9ac:	80 91 e8 00 	lds	r24, 0x00E8
     9b0:	8e 77       	andi	r24, 0x7E	; 126
     9b2:	80 93 e8 00 	sts	0x00E8, r24
     9b6:	08 95       	ret

000009b8 <Endpoint_WaitUntilReady>:
     9b8:	40 91 e4 00 	lds	r20, 0x00E4
     9bc:	50 91 e5 00 	lds	r21, 0x00E5
     9c0:	24 e6       	ldi	r18, 0x64	; 100
     9c2:	80 91 ec 00 	lds	r24, 0x00EC
     9c6:	80 ff       	sbrs	r24, 0
     9c8:	24 c0       	rjmp	.+72     	; 0xa12 <Endpoint_WaitUntilReady+0x5a>
     9ca:	80 91 e8 00 	lds	r24, 0x00E8
     9ce:	80 fd       	sbrc	r24, 0
     9d0:	1e c0       	rjmp	.+60     	; 0xa0e <Endpoint_WaitUntilReady+0x56>
     9d2:	80 91 3c 02 	lds	r24, 0x023C
     9d6:	88 23       	and	r24, r24
     9d8:	11 f4       	brne	.+4      	; 0x9de <Endpoint_WaitUntilReady+0x26>
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	08 95       	ret
     9de:	85 30       	cpi	r24, 0x05	; 5
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <Endpoint_WaitUntilReady+0x2e>
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	08 95       	ret
     9e6:	80 91 eb 00 	lds	r24, 0x00EB
     9ea:	85 ff       	sbrs	r24, 5
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <Endpoint_WaitUntilReady+0x3a>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	08 95       	ret
     9f2:	80 91 e4 00 	lds	r24, 0x00E4
     9f6:	90 91 e5 00 	lds	r25, 0x00E5
     9fa:	84 17       	cp	r24, r20
     9fc:	95 07       	cpc	r25, r21
     9fe:	09 f3       	breq	.-62     	; 0x9c2 <Endpoint_WaitUntilReady+0xa>
     a00:	22 23       	and	r18, r18
     a02:	11 f4       	brne	.+4      	; 0xa08 <Endpoint_WaitUntilReady+0x50>
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	08 95       	ret
     a08:	21 50       	subi	r18, 0x01	; 1
     a0a:	ac 01       	movw	r20, r24
     a0c:	da cf       	rjmp	.-76     	; 0x9c2 <Endpoint_WaitUntilReady+0xa>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	08 95       	ret
     a12:	80 91 e8 00 	lds	r24, 0x00E8
     a16:	82 ff       	sbrs	r24, 2
     a18:	dc cf       	rjmp	.-72     	; 0x9d2 <Endpoint_WaitUntilReady+0x1a>
     a1a:	f9 cf       	rjmp	.-14     	; 0xa0e <Endpoint_WaitUntilReady+0x56>

00000a1c <USB_ResetInterface>:
     a1c:	40 d0       	rcall	.+128    	; 0xa9e <USB_INT_DisableAllInterrupts>
     a1e:	42 d0       	rcall	.+132    	; 0xaa4 <USB_INT_ClearAllInterrupts>
     a20:	80 91 d8 00 	lds	r24, 0x00D8
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	80 93 d8 00 	sts	0x00D8, r24
     a2a:	80 91 d8 00 	lds	r24, 0x00D8
     a2e:	80 68       	ori	r24, 0x80	; 128
     a30:	80 93 d8 00 	sts	0x00D8, r24
     a34:	80 91 d8 00 	lds	r24, 0x00D8
     a38:	8f 7d       	andi	r24, 0xDF	; 223
     a3a:	80 93 d8 00 	sts	0x00D8, r24
     a3e:	19 bc       	out	0x29, r1	; 41
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	89 bd       	out	0x29, r24	; 41
     a44:	09 b4       	in	r0, 0x29	; 41
     a46:	00 fe       	sbrs	r0, 0
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <USB_ResetInterface+0x28>
     a4a:	10 92 3c 02 	sts	0x023C, r1
     a4e:	10 92 38 02 	sts	0x0238, r1
     a52:	10 92 3a 02 	sts	0x023A, r1
     a56:	10 92 39 02 	sts	0x0239, r1
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	42 e0       	ldi	r20, 0x02	; 2
     a60:	16 df       	rcall	.-468    	; 0x88e <Endpoint_ConfigureEndpoint_Prv>
     a62:	80 91 e1 00 	lds	r24, 0x00E1
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	80 93 e1 00 	sts	0x00E1, r24
     a6c:	80 91 e2 00 	lds	r24, 0x00E2
     a70:	81 60       	ori	r24, 0x01	; 1
     a72:	80 93 e2 00 	sts	0x00E2, r24
     a76:	80 91 e2 00 	lds	r24, 0x00E2
     a7a:	88 60       	ori	r24, 0x08	; 8
     a7c:	80 93 e2 00 	sts	0x00E2, r24
     a80:	80 91 e0 00 	lds	r24, 0x00E0
     a84:	8e 7f       	andi	r24, 0xFE	; 254
     a86:	80 93 e0 00 	sts	0x00E0, r24
     a8a:	08 95       	ret

00000a8c <USB_Init>:
     a8c:	e3 e6       	ldi	r30, 0x63	; 99
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8e 7f       	andi	r24, 0xFE	; 254
     a94:	80 83       	st	Z, r24
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 3b 02 	sts	0x023B, r24
     a9c:	bf cf       	rjmp	.-130    	; 0xa1c <USB_ResetInterface>

00000a9e <USB_INT_DisableAllInterrupts>:
     a9e:	10 92 e2 00 	sts	0x00E2, r1
     aa2:	08 95       	ret

00000aa4 <USB_INT_ClearAllInterrupts>:
     aa4:	10 92 e1 00 	sts	0x00E1, r1
     aa8:	08 95       	ret

00000aaa <__vector_12>:
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	1f 93       	push	r17
     ab6:	2f 93       	push	r18
     ab8:	3f 93       	push	r19
     aba:	4f 93       	push	r20
     abc:	5f 93       	push	r21
     abe:	6f 93       	push	r22
     ac0:	7f 93       	push	r23
     ac2:	8f 93       	push	r24
     ac4:	9f 93       	push	r25
     ac6:	af 93       	push	r26
     ac8:	bf 93       	push	r27
     aca:	ef 93       	push	r30
     acc:	ff 93       	push	r31
     ace:	10 91 e9 00 	lds	r17, 0x00E9
     ad2:	80 91 ec 00 	lds	r24, 0x00EC
     ad6:	10 92 e9 00 	sts	0x00E9, r1
     ada:	80 91 f0 00 	lds	r24, 0x00F0
     ade:	87 7f       	andi	r24, 0xF7	; 247
     ae0:	80 93 f0 00 	sts	0x00F0, r24
     ae4:	78 94       	sei
     ae6:	c2 d0       	rcall	.+388    	; 0xc6c <USB_Device_ProcessControlRequest>
     ae8:	10 92 e9 00 	sts	0x00E9, r1
     aec:	80 91 f0 00 	lds	r24, 0x00F0
     af0:	88 60       	ori	r24, 0x08	; 8
     af2:	80 93 f0 00 	sts	0x00F0, r24
     af6:	1f 70       	andi	r17, 0x0F	; 15
     af8:	10 93 e9 00 	sts	0x00E9, r17
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	1f 91       	pop	r17
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <__vector_11>:
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	80 91 e1 00 	lds	r24, 0x00E1
     b46:	82 ff       	sbrs	r24, 2
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <__vector_11+0x3e>
     b4a:	80 91 e2 00 	lds	r24, 0x00E2
     b4e:	82 ff       	sbrs	r24, 2
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <__vector_11+0x3e>
     b52:	80 91 e1 00 	lds	r24, 0x00E1
     b56:	8b 7f       	andi	r24, 0xFB	; 251
     b58:	80 93 e1 00 	sts	0x00E1, r24
     b5c:	ef d1       	rcall	.+990    	; 0xf3c <USB_Event_Stub>
     b5e:	80 91 e1 00 	lds	r24, 0x00E1
     b62:	80 ff       	sbrs	r24, 0
     b64:	17 c0       	rjmp	.+46     	; 0xb94 <__vector_11+0x74>
     b66:	80 91 e2 00 	lds	r24, 0x00E2
     b6a:	80 ff       	sbrs	r24, 0
     b6c:	13 c0       	rjmp	.+38     	; 0xb94 <__vector_11+0x74>
     b6e:	80 91 e2 00 	lds	r24, 0x00E2
     b72:	8e 7f       	andi	r24, 0xFE	; 254
     b74:	80 93 e2 00 	sts	0x00E2, r24
     b78:	80 91 e2 00 	lds	r24, 0x00E2
     b7c:	80 61       	ori	r24, 0x10	; 16
     b7e:	80 93 e2 00 	sts	0x00E2, r24
     b82:	80 91 d8 00 	lds	r24, 0x00D8
     b86:	80 62       	ori	r24, 0x20	; 32
     b88:	80 93 d8 00 	sts	0x00D8, r24
     b8c:	19 bc       	out	0x29, r1	; 41
     b8e:	10 92 3c 02 	sts	0x023C, r1
     b92:	eb db       	rcall	.-2090   	; 0x36a <EVENT_USB_Device_Disconnect>
     b94:	80 91 e1 00 	lds	r24, 0x00E1
     b98:	84 ff       	sbrs	r24, 4
     b9a:	2c c0       	rjmp	.+88     	; 0xbf4 <__vector_11+0xd4>
     b9c:	80 91 e2 00 	lds	r24, 0x00E2
     ba0:	84 ff       	sbrs	r24, 4
     ba2:	28 c0       	rjmp	.+80     	; 0xbf4 <__vector_11+0xd4>
     ba4:	19 bc       	out	0x29, r1	; 41
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	89 bd       	out	0x29, r24	; 41
     baa:	09 b4       	in	r0, 0x29	; 41
     bac:	00 fe       	sbrs	r0, 0
     bae:	fd cf       	rjmp	.-6      	; 0xbaa <__vector_11+0x8a>
     bb0:	80 91 d8 00 	lds	r24, 0x00D8
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	80 93 d8 00 	sts	0x00D8, r24
     bba:	80 91 e1 00 	lds	r24, 0x00E1
     bbe:	8f 7e       	andi	r24, 0xEF	; 239
     bc0:	80 93 e1 00 	sts	0x00E1, r24
     bc4:	80 91 e2 00 	lds	r24, 0x00E2
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
     bca:	80 93 e2 00 	sts	0x00E2, r24
     bce:	80 91 e2 00 	lds	r24, 0x00E2
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	80 93 e2 00 	sts	0x00E2, r24
     bd8:	80 91 38 02 	lds	r24, 0x0238
     bdc:	88 23       	and	r24, r24
     bde:	31 f4       	brne	.+12     	; 0xbec <__vector_11+0xcc>
     be0:	80 91 e3 00 	lds	r24, 0x00E3
     be4:	87 fd       	sbrc	r24, 7
     be6:	02 c0       	rjmp	.+4      	; 0xbec <__vector_11+0xcc>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	01 c0       	rjmp	.+2      	; 0xbee <__vector_11+0xce>
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	80 93 3c 02 	sts	0x023C, r24
     bf2:	ba db       	rcall	.-2188   	; 0x368 <EVENT_USB_Device_Connect>
     bf4:	80 91 e1 00 	lds	r24, 0x00E1
     bf8:	83 ff       	sbrs	r24, 3
     bfa:	27 c0       	rjmp	.+78     	; 0xc4a <__vector_11+0x12a>
     bfc:	80 91 e2 00 	lds	r24, 0x00E2
     c00:	83 ff       	sbrs	r24, 3
     c02:	23 c0       	rjmp	.+70     	; 0xc4a <__vector_11+0x12a>
     c04:	80 91 e1 00 	lds	r24, 0x00E1
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	80 93 e1 00 	sts	0x00E1, r24
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	80 93 3c 02 	sts	0x023C, r24
     c14:	10 92 38 02 	sts	0x0238, r1
     c18:	80 91 e1 00 	lds	r24, 0x00E1
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	80 93 e1 00 	sts	0x00E1, r24
     c22:	80 91 e2 00 	lds	r24, 0x00E2
     c26:	8e 7f       	andi	r24, 0xFE	; 254
     c28:	80 93 e2 00 	sts	0x00E2, r24
     c2c:	80 91 e2 00 	lds	r24, 0x00E2
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	80 93 e2 00 	sts	0x00E2, r24
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	42 e0       	ldi	r20, 0x02	; 2
     c3c:	28 de       	rcall	.-944    	; 0x88e <Endpoint_ConfigureEndpoint_Prv>
     c3e:	80 91 f0 00 	lds	r24, 0x00F0
     c42:	88 60       	ori	r24, 0x08	; 8
     c44:	80 93 f0 00 	sts	0x00F0, r24
     c48:	79 d1       	rcall	.+754    	; 0xf3c <USB_Event_Stub>
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <USB_Device_ProcessControlRequest>:
     c6c:	1f 93       	push	r17
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	ac 97       	sbiw	r28, 0x2c	; 44
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	ed e3       	ldi	r30, 0x3D	; 61
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	80 91 f1 00 	lds	r24, 0x00F1
     c8a:	81 93       	st	Z+, r24
     c8c:	22 e0       	ldi	r18, 0x02	; 2
     c8e:	e5 34       	cpi	r30, 0x45	; 69
     c90:	f2 07       	cpc	r31, r18
     c92:	c9 f7       	brne	.-14     	; 0xc86 <USB_Device_ProcessControlRequest+0x1a>
     c94:	6b db       	rcall	.-2346   	; 0x36c <EVENT_USB_Device_ControlRequest>
     c96:	80 91 e8 00 	lds	r24, 0x00E8
     c9a:	83 ff       	sbrs	r24, 3
     c9c:	37 c1       	rjmp	.+622    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     c9e:	80 91 3d 02 	lds	r24, 0x023D
     ca2:	30 91 3e 02 	lds	r19, 0x023E
     ca6:	35 30       	cpi	r19, 0x05	; 5
     ca8:	09 f4       	brne	.+2      	; 0xcac <USB_Device_ProcessControlRequest+0x40>
     caa:	87 c0       	rjmp	.+270    	; 0xdba <USB_Device_ProcessControlRequest+0x14e>
     cac:	36 30       	cpi	r19, 0x06	; 6
     cae:	40 f4       	brcc	.+16     	; 0xcc0 <USB_Device_ProcessControlRequest+0x54>
     cb0:	31 30       	cpi	r19, 0x01	; 1
     cb2:	c9 f1       	breq	.+114    	; 0xd26 <USB_Device_ProcessControlRequest+0xba>
     cb4:	31 30       	cpi	r19, 0x01	; 1
     cb6:	70 f0       	brcs	.+28     	; 0xcd4 <USB_Device_ProcessControlRequest+0x68>
     cb8:	33 30       	cpi	r19, 0x03	; 3
     cba:	09 f0       	breq	.+2      	; 0xcbe <USB_Device_ProcessControlRequest+0x52>
     cbc:	27 c1       	rjmp	.+590    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     cbe:	33 c0       	rjmp	.+102    	; 0xd26 <USB_Device_ProcessControlRequest+0xba>
     cc0:	38 30       	cpi	r19, 0x08	; 8
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <USB_Device_ProcessControlRequest+0x5a>
     cc4:	f5 c0       	rjmp	.+490    	; 0xeb0 <USB_Device_ProcessControlRequest+0x244>
     cc6:	39 30       	cpi	r19, 0x09	; 9
     cc8:	09 f4       	brne	.+2      	; 0xccc <USB_Device_ProcessControlRequest+0x60>
     cca:	04 c1       	rjmp	.+520    	; 0xed4 <USB_Device_ProcessControlRequest+0x268>
     ccc:	36 30       	cpi	r19, 0x06	; 6
     cce:	09 f0       	breq	.+2      	; 0xcd2 <USB_Device_ProcessControlRequest+0x66>
     cd0:	1d c1       	rjmp	.+570    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     cd2:	96 c0       	rjmp	.+300    	; 0xe00 <USB_Device_ProcessControlRequest+0x194>
     cd4:	80 38       	cpi	r24, 0x80	; 128
     cd6:	21 f0       	breq	.+8      	; 0xce0 <USB_Device_ProcessControlRequest+0x74>
     cd8:	82 38       	cpi	r24, 0x82	; 130
     cda:	09 f0       	breq	.+2      	; 0xcde <USB_Device_ProcessControlRequest+0x72>
     cdc:	17 c1       	rjmp	.+558    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     cde:	08 c0       	rjmp	.+16     	; 0xcf0 <USB_Device_ProcessControlRequest+0x84>
     ce0:	90 91 39 02 	lds	r25, 0x0239
     ce4:	80 91 3a 02 	lds	r24, 0x023A
     ce8:	88 23       	and	r24, r24
     cea:	99 f0       	breq	.+38     	; 0xd12 <USB_Device_ProcessControlRequest+0xa6>
     cec:	92 60       	ori	r25, 0x02	; 2
     cee:	11 c0       	rjmp	.+34     	; 0xd12 <USB_Device_ProcessControlRequest+0xa6>
     cf0:	80 91 41 02 	lds	r24, 0x0241
     cf4:	8f 70       	andi	r24, 0x0F	; 15
     cf6:	80 93 e9 00 	sts	0x00E9, r24
     cfa:	80 91 eb 00 	lds	r24, 0x00EB
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	25 e0       	ldi	r18, 0x05	; 5
     d02:	96 95       	lsr	r25
     d04:	87 95       	ror	r24
     d06:	2a 95       	dec	r18
     d08:	e1 f7       	brne	.-8      	; 0xd02 <USB_Device_ProcessControlRequest+0x96>
     d0a:	98 2f       	mov	r25, r24
     d0c:	91 70       	andi	r25, 0x01	; 1
     d0e:	10 92 e9 00 	sts	0x00E9, r1
     d12:	80 91 e8 00 	lds	r24, 0x00E8
     d16:	87 7f       	andi	r24, 0xF7	; 247
     d18:	80 93 e8 00 	sts	0x00E8, r24
     d1c:	90 93 f1 00 	sts	0x00F1, r25
     d20:	10 92 f1 00 	sts	0x00F1, r1
     d24:	d0 c0       	rjmp	.+416    	; 0xec6 <USB_Device_ProcessControlRequest+0x25a>
     d26:	88 23       	and	r24, r24
     d28:	19 f0       	breq	.+6      	; 0xd30 <USB_Device_ProcessControlRequest+0xc4>
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	09 f0       	breq	.+2      	; 0xd30 <USB_Device_ProcessControlRequest+0xc4>
     d2e:	ee c0       	rjmp	.+476    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	8f 71       	andi	r24, 0x1F	; 31
     d34:	90 70       	andi	r25, 0x00	; 0
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	21 f0       	breq	.+8      	; 0xd42 <USB_Device_ProcessControlRequest+0xd6>
     d3a:	02 97       	sbiw	r24, 0x02	; 2
     d3c:	09 f0       	breq	.+2      	; 0xd40 <USB_Device_ProcessControlRequest+0xd4>
     d3e:	e6 c0       	rjmp	.+460    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <USB_Device_ProcessControlRequest+0xee>
     d42:	80 91 3f 02 	lds	r24, 0x023F
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	09 f0       	breq	.+2      	; 0xd4c <USB_Device_ProcessControlRequest+0xe0>
     d4a:	e0 c0       	rjmp	.+448    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     d4c:	10 92 3a 02 	sts	0x023A, r1
     d50:	33 30       	cpi	r19, 0x03	; 3
     d52:	69 f5       	brne	.+90     	; 0xdae <USB_Device_ProcessControlRequest+0x142>
     d54:	80 93 3a 02 	sts	0x023A, r24
     d58:	2a c0       	rjmp	.+84     	; 0xdae <USB_Device_ProcessControlRequest+0x142>
     d5a:	80 91 3f 02 	lds	r24, 0x023F
     d5e:	88 23       	and	r24, r24
     d60:	31 f5       	brne	.+76     	; 0xdae <USB_Device_ProcessControlRequest+0x142>
     d62:	20 91 41 02 	lds	r18, 0x0241
     d66:	2f 70       	andi	r18, 0x0F	; 15
     d68:	09 f4       	brne	.+2      	; 0xd6c <USB_Device_ProcessControlRequest+0x100>
     d6a:	d0 c0       	rjmp	.+416    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     d6c:	20 93 e9 00 	sts	0x00E9, r18
     d70:	80 91 eb 00 	lds	r24, 0x00EB
     d74:	80 ff       	sbrs	r24, 0
     d76:	1b c0       	rjmp	.+54     	; 0xdae <USB_Device_ProcessControlRequest+0x142>
     d78:	33 30       	cpi	r19, 0x03	; 3
     d7a:	21 f4       	brne	.+8      	; 0xd84 <USB_Device_ProcessControlRequest+0x118>
     d7c:	80 91 eb 00 	lds	r24, 0x00EB
     d80:	80 62       	ori	r24, 0x20	; 32
     d82:	13 c0       	rjmp	.+38     	; 0xdaa <USB_Device_ProcessControlRequest+0x13e>
     d84:	80 91 eb 00 	lds	r24, 0x00EB
     d88:	80 61       	ori	r24, 0x10	; 16
     d8a:	80 93 eb 00 	sts	0x00EB, r24
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <USB_Device_ProcessControlRequest+0x12c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	2a 95       	dec	r18
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <USB_Device_ProcessControlRequest+0x128>
     d9c:	80 93 ea 00 	sts	0x00EA, r24
     da0:	10 92 ea 00 	sts	0x00EA, r1
     da4:	80 91 eb 00 	lds	r24, 0x00EB
     da8:	88 60       	ori	r24, 0x08	; 8
     daa:	80 93 eb 00 	sts	0x00EB, r24
     dae:	10 92 e9 00 	sts	0x00E9, r1
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	89 c0       	rjmp	.+274    	; 0xecc <USB_Device_ProcessControlRequest+0x260>
     dba:	88 23       	and	r24, r24
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <USB_Device_ProcessControlRequest+0x154>
     dbe:	a6 c0       	rjmp	.+332    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     dc0:	10 91 3f 02 	lds	r17, 0x023F
     dc4:	1f 77       	andi	r17, 0x7F	; 127
     dc6:	80 91 e3 00 	lds	r24, 0x00E3
     dca:	80 78       	andi	r24, 0x80	; 128
     dcc:	81 2b       	or	r24, r17
     dce:	80 93 e3 00 	sts	0x00E3, r24
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
     dd6:	87 7f       	andi	r24, 0xF7	; 247
     dd8:	80 93 e8 00 	sts	0x00E8, r24
     ddc:	cc dd       	rcall	.-1128   	; 0x976 <Endpoint_ClearStatusStage>
     dde:	80 91 e8 00 	lds	r24, 0x00E8
     de2:	80 ff       	sbrs	r24, 0
     de4:	fc cf       	rjmp	.-8      	; 0xdde <USB_Device_ProcessControlRequest+0x172>
     de6:	80 91 e3 00 	lds	r24, 0x00E3
     dea:	80 68       	ori	r24, 0x80	; 128
     dec:	80 93 e3 00 	sts	0x00E3, r24
     df0:	11 23       	and	r17, r17
     df2:	11 f4       	brne	.+4      	; 0xdf8 <USB_Device_ProcessControlRequest+0x18c>
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <USB_Device_ProcessControlRequest+0x18e>
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	80 93 3c 02 	sts	0x023C, r24
     dfe:	86 c0       	rjmp	.+268    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     e00:	80 58       	subi	r24, 0x80	; 128
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	08 f0       	brcs	.+2      	; 0xe08 <USB_Device_ProcessControlRequest+0x19c>
     e06:	82 c0       	rjmp	.+260    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     e08:	80 91 3f 02 	lds	r24, 0x023F
     e0c:	90 91 40 02 	lds	r25, 0x0240
     e10:	23 e0       	ldi	r18, 0x03	; 3
     e12:	8c 3d       	cpi	r24, 0xDC	; 220
     e14:	92 07       	cpc	r25, r18
     e16:	09 f0       	breq	.+2      	; 0xe1a <USB_Device_ProcessControlRequest+0x1ae>
     e18:	33 c0       	rjmp	.+102    	; 0xe80 <USB_Device_ProcessControlRequest+0x214>
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 83       	std	Y+4, r24	; 0x04
     e1e:	8a e2       	ldi	r24, 0x2A	; 42
     e20:	8b 83       	std	Y+3, r24	; 0x03
     e22:	7f b7       	in	r23, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de 01       	movw	r26, r28
     e28:	15 96       	adiw	r26, 0x05	; 5
     e2a:	6e e0       	ldi	r22, 0x0E	; 14
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	11 e2       	ldi	r17, 0x21	; 33
     e32:	e6 2f       	mov	r30, r22
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	10 93 57 00 	sts	0x0057, r17
     e3a:	84 91       	lpm	r24, Z+
     e3c:	40 ff       	sbrs	r20, 0
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <USB_Device_ProcessControlRequest+0x1da>
     e40:	82 95       	swap	r24
     e42:	8f 70       	andi	r24, 0x0F	; 15
     e44:	6f 5f       	subi	r22, 0xFF	; 255
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	8a 30       	cpi	r24, 0x0A	; 10
     e4e:	18 f0       	brcs	.+6      	; 0xe56 <USB_Device_ProcessControlRequest+0x1ea>
     e50:	c9 01       	movw	r24, r18
     e52:	c7 96       	adiw	r24, 0x37	; 55
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <USB_Device_ProcessControlRequest+0x1ee>
     e56:	c9 01       	movw	r24, r18
     e58:	c0 96       	adiw	r24, 0x30	; 48
     e5a:	8d 93       	st	X+, r24
     e5c:	9d 93       	st	X+, r25
     e5e:	4f 5f       	subi	r20, 0xFF	; 255
     e60:	5f 4f       	sbci	r21, 0xFF	; 255
     e62:	44 31       	cpi	r20, 0x14	; 20
     e64:	51 05       	cpc	r21, r1
     e66:	29 f7       	brne	.-54     	; 0xe32 <USB_Device_ProcessControlRequest+0x1c6>
     e68:	7f bf       	out	0x3f, r23	; 63
     e6a:	80 91 e8 00 	lds	r24, 0x00E8
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	80 93 e8 00 	sts	0x00E8, r24
     e74:	ce 01       	movw	r24, r28
     e76:	03 96       	adiw	r24, 0x03	; 3
     e78:	6a e2       	ldi	r22, 0x2A	; 42
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	49 dc       	rcall	.-1902   	; 0x710 <Endpoint_Write_Control_Stream_LE>
     e7e:	12 c0       	rjmp	.+36     	; 0xea4 <USB_Device_ProcessControlRequest+0x238>
     e80:	60 91 41 02 	lds	r22, 0x0241
     e84:	ae 01       	movw	r20, r28
     e86:	4f 5f       	subi	r20, 0xFF	; 255
     e88:	5f 4f       	sbci	r21, 0xFF	; 255
     e8a:	14 dc       	rcall	.-2008   	; 0x6b4 <CALLBACK_USB_GetDescriptor>
     e8c:	bc 01       	movw	r22, r24
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	09 f4       	brne	.+2      	; 0xe94 <USB_Device_ProcessControlRequest+0x228>
     e92:	3c c0       	rjmp	.+120    	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     e94:	80 91 e8 00 	lds	r24, 0x00E8
     e98:	87 7f       	andi	r24, 0xF7	; 247
     e9a:	80 93 e8 00 	sts	0x00E8, r24
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	94 dc       	rcall	.-1752   	; 0x7cc <Endpoint_Write_Control_PStream_LE>
     ea4:	80 91 e8 00 	lds	r24, 0x00E8
     ea8:	8b 77       	andi	r24, 0x7B	; 123
     eaa:	80 93 e8 00 	sts	0x00E8, r24
     eae:	2e c0       	rjmp	.+92     	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     eb0:	80 38       	cpi	r24, 0x80	; 128
     eb2:	61 f5       	brne	.+88     	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     eb4:	80 91 e8 00 	lds	r24, 0x00E8
     eb8:	87 7f       	andi	r24, 0xF7	; 247
     eba:	80 93 e8 00 	sts	0x00E8, r24
     ebe:	80 91 38 02 	lds	r24, 0x0238
     ec2:	80 93 f1 00 	sts	0x00F1, r24
     ec6:	80 91 e8 00 	lds	r24, 0x00E8
     eca:	8e 77       	andi	r24, 0x7E	; 126
     ecc:	80 93 e8 00 	sts	0x00E8, r24
     ed0:	52 dd       	rcall	.-1372   	; 0x976 <Endpoint_ClearStatusStage>
     ed2:	1c c0       	rjmp	.+56     	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     ed4:	88 23       	and	r24, r24
     ed6:	d1 f4       	brne	.+52     	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     ed8:	90 91 3f 02 	lds	r25, 0x023F
     edc:	92 30       	cpi	r25, 0x02	; 2
     ede:	b0 f4       	brcc	.+44     	; 0xf0c <USB_Device_ProcessControlRequest+0x2a0>
     ee0:	80 91 e8 00 	lds	r24, 0x00E8
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	80 93 e8 00 	sts	0x00E8, r24
     eea:	90 93 38 02 	sts	0x0238, r25
     eee:	43 dd       	rcall	.-1402   	; 0x976 <Endpoint_ClearStatusStage>
     ef0:	80 91 38 02 	lds	r24, 0x0238
     ef4:	88 23       	and	r24, r24
     ef6:	31 f4       	brne	.+12     	; 0xf04 <USB_Device_ProcessControlRequest+0x298>
     ef8:	80 91 e3 00 	lds	r24, 0x00E3
     efc:	87 fd       	sbrc	r24, 7
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <USB_Device_ProcessControlRequest+0x298>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <USB_Device_ProcessControlRequest+0x29a>
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	80 93 3c 02 	sts	0x023C, r24
     f0a:	33 da       	rcall	.-2970   	; 0x372 <EVENT_USB_Device_ConfigurationChanged>
     f0c:	80 91 e8 00 	lds	r24, 0x00E8
     f10:	83 ff       	sbrs	r24, 3
     f12:	0a c0       	rjmp	.+20     	; 0xf28 <USB_Device_ProcessControlRequest+0x2bc>
     f14:	80 91 e8 00 	lds	r24, 0x00E8
     f18:	87 7f       	andi	r24, 0xF7	; 247
     f1a:	80 93 e8 00 	sts	0x00E8, r24
     f1e:	80 91 eb 00 	lds	r24, 0x00EB
     f22:	80 62       	ori	r24, 0x20	; 32
     f24:	80 93 eb 00 	sts	0x00EB, r24
     f28:	ac 96       	adiw	r28, 0x2c	; 44
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	1f 91       	pop	r17
     f3a:	08 95       	ret

00000f3c <USB_Event_Stub>:
     f3c:	08 95       	ret

00000f3e <USB_USBTask>:
     f3e:	1f 93       	push	r17
     f40:	80 91 3c 02 	lds	r24, 0x023C
     f44:	88 23       	and	r24, r24
     f46:	71 f0       	breq	.+28     	; 0xf64 <USB_USBTask+0x26>
     f48:	10 91 e9 00 	lds	r17, 0x00E9
     f4c:	80 91 ec 00 	lds	r24, 0x00EC
     f50:	10 92 e9 00 	sts	0x00E9, r1
     f54:	80 91 e8 00 	lds	r24, 0x00E8
     f58:	83 ff       	sbrs	r24, 3
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <USB_USBTask+0x20>
     f5c:	87 de       	rcall	.-754    	; 0xc6c <USB_Device_ProcessControlRequest>
     f5e:	1f 70       	andi	r17, 0x0F	; 15
     f60:	10 93 e9 00 	sts	0x00E9, r17
     f64:	1f 91       	pop	r17
     f66:	08 95       	ret

00000f68 <CDC_Device_ReceiveByte>:
     f68:	fc 01       	movw	r30, r24
     f6a:	80 91 3c 02 	lds	r24, 0x023C
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	29 f5       	brne	.+74     	; 0xfbc <CDC_Device_ReceiveByte+0x54>
     f72:	84 89       	ldd	r24, Z+20	; 0x14
     f74:	95 89       	ldd	r25, Z+21	; 0x15
     f76:	a6 89       	ldd	r26, Z+22	; 0x16
     f78:	b7 89       	ldd	r27, Z+23	; 0x17
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	a1 05       	cpc	r26, r1
     f7e:	b1 05       	cpc	r27, r1
     f80:	e9 f0       	breq	.+58     	; 0xfbc <CDC_Device_ReceiveByte+0x54>
     f82:	86 81       	ldd	r24, Z+6	; 0x06
     f84:	8f 70       	andi	r24, 0x0F	; 15
     f86:	80 93 e9 00 	sts	0x00E9, r24
     f8a:	80 91 e8 00 	lds	r24, 0x00E8
     f8e:	82 ff       	sbrs	r24, 2
     f90:	15 c0       	rjmp	.+42     	; 0xfbc <CDC_Device_ReceiveByte+0x54>
     f92:	80 91 f2 00 	lds	r24, 0x00F2
     f96:	88 23       	and	r24, r24
     f98:	19 f4       	brne	.+6      	; 0xfa0 <CDC_Device_ReceiveByte+0x38>
     f9a:	2f ef       	ldi	r18, 0xFF	; 255
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <CDC_Device_ReceiveByte+0x40>
     fa0:	80 91 f1 00 	lds	r24, 0x00F1
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	80 91 f2 00 	lds	r24, 0x00F2
     fac:	88 23       	and	r24, r24
     fae:	41 f4       	brne	.+16     	; 0xfc0 <CDC_Device_ReceiveByte+0x58>
     fb0:	80 91 e8 00 	lds	r24, 0x00E8
     fb4:	8b 77       	andi	r24, 0x7B	; 123
     fb6:	80 93 e8 00 	sts	0x00E8, r24
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <CDC_Device_ReceiveByte+0x58>
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
     fbe:	3f ef       	ldi	r19, 0xFF	; 255
     fc0:	c9 01       	movw	r24, r18
     fc2:	08 95       	ret

00000fc4 <CDC_Device_CreateStream>:
     fc4:	fb 01       	movw	r30, r22
     fc6:	2e e0       	ldi	r18, 0x0E	; 14
     fc8:	db 01       	movw	r26, r22
     fca:	1d 92       	st	X+, r1
     fcc:	2a 95       	dec	r18
     fce:	e9 f7       	brne	.-6      	; 0xfca <CDC_Device_CreateStream+0x6>
     fd0:	23 e0       	ldi	r18, 0x03	; 3
     fd2:	23 83       	std	Z+3, r18	; 0x03
     fd4:	2c e6       	ldi	r18, 0x6C	; 108
     fd6:	38 e0       	ldi	r19, 0x08	; 8
     fd8:	31 87       	std	Z+9, r19	; 0x09
     fda:	20 87       	std	Z+8, r18	; 0x08
     fdc:	25 ef       	ldi	r18, 0xF5	; 245
     fde:	37 e0       	ldi	r19, 0x07	; 7
     fe0:	33 87       	std	Z+11, r19	; 0x0b
     fe2:	22 87       	std	Z+10, r18	; 0x0a
     fe4:	95 87       	std	Z+13, r25	; 0x0d
     fe6:	84 87       	std	Z+12, r24	; 0x0c
     fe8:	08 95       	ret

00000fea <CDC_Device_getchar>:
     fea:	fc 01       	movw	r30, r24
     fec:	84 85       	ldd	r24, Z+12	; 0x0c
     fee:	95 85       	ldd	r25, Z+13	; 0x0d
     ff0:	bb df       	rcall	.-138    	; 0xf68 <CDC_Device_ReceiveByte>
     ff2:	9c 01       	movw	r18, r24
     ff4:	97 ff       	sbrs	r25, 7
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <CDC_Device_getchar+0x12>
     ff8:	2e ef       	ldi	r18, 0xFE	; 254
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	c9 01       	movw	r24, r18
     ffe:	08 95       	ret

00001000 <CDC_Device_Event_Stub>:
    1000:	08 95       	ret

00001002 <CDC_Device_Flush>:
    1002:	fc 01       	movw	r30, r24
    1004:	80 91 3c 02 	lds	r24, 0x023C
    1008:	84 30       	cpi	r24, 0x04	; 4
    100a:	19 f5       	brne	.+70     	; 0x1052 <CDC_Device_Flush+0x50>
    100c:	84 89       	ldd	r24, Z+20	; 0x14
    100e:	95 89       	ldd	r25, Z+21	; 0x15
    1010:	a6 89       	ldd	r26, Z+22	; 0x16
    1012:	b7 89       	ldd	r27, Z+23	; 0x17
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	a1 05       	cpc	r26, r1
    1018:	b1 05       	cpc	r27, r1
    101a:	d9 f0       	breq	.+54     	; 0x1052 <CDC_Device_Flush+0x50>
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	8f 70       	andi	r24, 0x0F	; 15
    1020:	80 93 e9 00 	sts	0x00E9, r24
    1024:	80 91 f2 00 	lds	r24, 0x00F2
    1028:	88 23       	and	r24, r24
    102a:	a9 f0       	breq	.+42     	; 0x1056 <CDC_Device_Flush+0x54>
    102c:	90 91 e8 00 	lds	r25, 0x00E8
    1030:	80 91 e8 00 	lds	r24, 0x00E8
    1034:	8e 77       	andi	r24, 0x7E	; 126
    1036:	80 93 e8 00 	sts	0x00E8, r24
    103a:	95 fd       	sbrc	r25, 5
    103c:	0c c0       	rjmp	.+24     	; 0x1056 <CDC_Device_Flush+0x54>
    103e:	bc dc       	rcall	.-1672   	; 0x9b8 <Endpoint_WaitUntilReady>
    1040:	98 2f       	mov	r25, r24
    1042:	88 23       	and	r24, r24
    1044:	49 f4       	brne	.+18     	; 0x1058 <CDC_Device_Flush+0x56>
    1046:	80 91 e8 00 	lds	r24, 0x00E8
    104a:	8e 77       	andi	r24, 0x7E	; 126
    104c:	80 93 e8 00 	sts	0x00E8, r24
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <CDC_Device_Flush+0x56>
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <CDC_Device_Flush+0x56>
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	89 2f       	mov	r24, r25
    105a:	08 95       	ret

0000105c <CDC_Device_USBTask>:
    105c:	fc 01       	movw	r30, r24
    105e:	80 91 3c 02 	lds	r24, 0x023C
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	91 f4       	brne	.+36     	; 0x108a <CDC_Device_USBTask+0x2e>
    1066:	84 89       	ldd	r24, Z+20	; 0x14
    1068:	95 89       	ldd	r25, Z+21	; 0x15
    106a:	a6 89       	ldd	r26, Z+22	; 0x16
    106c:	b7 89       	ldd	r27, Z+23	; 0x17
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	a1 05       	cpc	r26, r1
    1072:	b1 05       	cpc	r27, r1
    1074:	51 f0       	breq	.+20     	; 0x108a <CDC_Device_USBTask+0x2e>
    1076:	81 81       	ldd	r24, Z+1	; 0x01
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	80 93 e9 00 	sts	0x00E9, r24
    107e:	80 91 e8 00 	lds	r24, 0x00E8
    1082:	80 ff       	sbrs	r24, 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <CDC_Device_USBTask+0x2e>
    1086:	cf 01       	movw	r24, r30
    1088:	bc cf       	rjmp	.-136    	; 0x1002 <CDC_Device_Flush>
    108a:	08 95       	ret

0000108c <CDC_Device_SendByte>:
    108c:	1f 93       	push	r17
    108e:	fc 01       	movw	r30, r24
    1090:	16 2f       	mov	r17, r22
    1092:	80 91 3c 02 	lds	r24, 0x023C
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	e1 f4       	brne	.+56     	; 0x10d2 <CDC_Device_SendByte+0x46>
    109a:	84 89       	ldd	r24, Z+20	; 0x14
    109c:	95 89       	ldd	r25, Z+21	; 0x15
    109e:	a6 89       	ldd	r26, Z+22	; 0x16
    10a0:	b7 89       	ldd	r27, Z+23	; 0x17
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	a1 05       	cpc	r26, r1
    10a6:	b1 05       	cpc	r27, r1
    10a8:	a1 f0       	breq	.+40     	; 0x10d2 <CDC_Device_SendByte+0x46>
    10aa:	81 81       	ldd	r24, Z+1	; 0x01
    10ac:	8f 70       	andi	r24, 0x0F	; 15
    10ae:	80 93 e9 00 	sts	0x00E9, r24
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
    10b6:	85 fd       	sbrc	r24, 5
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <CDC_Device_SendByte+0x3e>
    10ba:	80 91 e8 00 	lds	r24, 0x00E8
    10be:	8e 77       	andi	r24, 0x7E	; 126
    10c0:	80 93 e8 00 	sts	0x00E8, r24
    10c4:	79 dc       	rcall	.-1806   	; 0x9b8 <Endpoint_WaitUntilReady>
    10c6:	88 23       	and	r24, r24
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <CDC_Device_SendByte+0x48>
    10ca:	10 93 f1 00 	sts	0x00F1, r17
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <CDC_Device_SendByte+0x48>
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	1f 91       	pop	r17
    10d6:	08 95       	ret

000010d8 <CDC_Device_putchar>:
    10d8:	28 2f       	mov	r18, r24
    10da:	fb 01       	movw	r30, r22
    10dc:	84 85       	ldd	r24, Z+12	; 0x0c
    10de:	95 85       	ldd	r25, Z+13	; 0x0d
    10e0:	62 2f       	mov	r22, r18
    10e2:	d4 df       	rcall	.-88     	; 0x108c <CDC_Device_SendByte>
    10e4:	88 23       	and	r24, r24
    10e6:	19 f4       	brne	.+6      	; 0x10ee <CDC_Device_putchar+0x16>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <CDC_Device_putchar+0x1a>
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	c9 01       	movw	r24, r18
    10f4:	08 95       	ret

000010f6 <CDC_Device_ConfigureEndpoints>:
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ec 01       	movw	r28, r24
    10fc:	40 96       	adiw	r24, 0x10	; 16
    10fe:	fc 01       	movw	r30, r24
    1100:	8b e0       	ldi	r24, 0x0B	; 11
    1102:	df 01       	movw	r26, r30
    1104:	1d 92       	st	X+, r1
    1106:	8a 95       	dec	r24
    1108:	e9 f7       	brne	.-6      	; 0x1104 <CDC_Device_ConfigureEndpoints+0xe>
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	8c 83       	std	Y+4, r24	; 0x04
    110e:	89 87       	std	Y+9, r24	; 0x09
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	8e 87       	std	Y+14, r24	; 0x0e
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	f1 db       	rcall	.-2078   	; 0x8fe <Endpoint_ConfigureEndpointTable>
    111c:	88 23       	and	r24, r24
    111e:	71 f0       	breq	.+28     	; 0x113c <CDC_Device_ConfigureEndpoints+0x46>
    1120:	ce 01       	movw	r24, r28
    1122:	06 96       	adiw	r24, 0x06	; 6
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	eb db       	rcall	.-2090   	; 0x8fe <Endpoint_ConfigureEndpointTable>
    1128:	88 23       	and	r24, r24
    112a:	41 f0       	breq	.+16     	; 0x113c <CDC_Device_ConfigureEndpoints+0x46>
    112c:	ce 01       	movw	r24, r28
    112e:	0b 96       	adiw	r24, 0x0b	; 11
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	e5 db       	rcall	.-2102   	; 0x8fe <Endpoint_ConfigureEndpointTable>
    1134:	88 23       	and	r24, r24
    1136:	19 f0       	breq	.+6      	; 0x113e <CDC_Device_ConfigureEndpoints+0x48>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	01 c0       	rjmp	.+2      	; 0x113e <CDC_Device_ConfigureEndpoints+0x48>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <CDC_Device_ProcessControlRequest>:
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
    114a:	80 91 e8 00 	lds	r24, 0x00E8
    114e:	83 ff       	sbrs	r24, 3
    1150:	a3 c0       	rjmp	.+326    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1152:	88 81       	ld	r24, Y
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	20 91 41 02 	lds	r18, 0x0241
    115a:	30 91 42 02 	lds	r19, 0x0242
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	09 f0       	breq	.+2      	; 0x1166 <CDC_Device_ProcessControlRequest+0x22>
    1164:	99 c0       	rjmp	.+306    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1166:	80 91 3e 02 	lds	r24, 0x023E
    116a:	81 32       	cpi	r24, 0x21	; 33
    116c:	69 f0       	breq	.+26     	; 0x1188 <CDC_Device_ProcessControlRequest+0x44>
    116e:	82 32       	cpi	r24, 0x22	; 34
    1170:	20 f4       	brcc	.+8      	; 0x117a <CDC_Device_ProcessControlRequest+0x36>
    1172:	80 32       	cpi	r24, 0x20	; 32
    1174:	09 f0       	breq	.+2      	; 0x1178 <CDC_Device_ProcessControlRequest+0x34>
    1176:	90 c0       	rjmp	.+288    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1178:	3c c0       	rjmp	.+120    	; 0x11f2 <CDC_Device_ProcessControlRequest+0xae>
    117a:	82 32       	cpi	r24, 0x22	; 34
    117c:	09 f4       	brne	.+2      	; 0x1180 <CDC_Device_ProcessControlRequest+0x3c>
    117e:	6b c0       	rjmp	.+214    	; 0x1256 <CDC_Device_ProcessControlRequest+0x112>
    1180:	83 32       	cpi	r24, 0x23	; 35
    1182:	09 f0       	breq	.+2      	; 0x1186 <CDC_Device_ProcessControlRequest+0x42>
    1184:	89 c0       	rjmp	.+274    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1186:	7a c0       	rjmp	.+244    	; 0x127c <CDC_Device_ProcessControlRequest+0x138>
    1188:	80 91 3d 02 	lds	r24, 0x023D
    118c:	81 3a       	cpi	r24, 0xA1	; 161
    118e:	09 f0       	breq	.+2      	; 0x1192 <CDC_Device_ProcessControlRequest+0x4e>
    1190:	83 c0       	rjmp	.+262    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1192:	80 91 e8 00 	lds	r24, 0x00E8
    1196:	87 7f       	andi	r24, 0xF7	; 247
    1198:	80 93 e8 00 	sts	0x00E8, r24
    119c:	80 91 e8 00 	lds	r24, 0x00E8
    11a0:	80 ff       	sbrs	r24, 0
    11a2:	fc cf       	rjmp	.-8      	; 0x119c <CDC_Device_ProcessControlRequest+0x58>
    11a4:	8c 89       	ldd	r24, Y+20	; 0x14
    11a6:	9d 89       	ldd	r25, Y+21	; 0x15
    11a8:	ae 89       	ldd	r26, Y+22	; 0x16
    11aa:	bf 89       	ldd	r27, Y+23	; 0x17
    11ac:	80 93 f1 00 	sts	0x00F1, r24
    11b0:	29 2f       	mov	r18, r25
    11b2:	3a 2f       	mov	r19, r26
    11b4:	4b 2f       	mov	r20, r27
    11b6:	55 27       	eor	r21, r21
    11b8:	20 93 f1 00 	sts	0x00F1, r18
    11bc:	9d 01       	movw	r18, r26
    11be:	44 27       	eor	r20, r20
    11c0:	55 27       	eor	r21, r21
    11c2:	20 93 f1 00 	sts	0x00F1, r18
    11c6:	8b 2f       	mov	r24, r27
    11c8:	99 27       	eor	r25, r25
    11ca:	aa 27       	eor	r26, r26
    11cc:	bb 27       	eor	r27, r27
    11ce:	80 93 f1 00 	sts	0x00F1, r24
    11d2:	88 8d       	ldd	r24, Y+24	; 0x18
    11d4:	80 93 f1 00 	sts	0x00F1, r24
    11d8:	89 8d       	ldd	r24, Y+25	; 0x19
    11da:	80 93 f1 00 	sts	0x00F1, r24
    11de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11e0:	80 93 f1 00 	sts	0x00F1, r24
    11e4:	80 91 e8 00 	lds	r24, 0x00E8
    11e8:	8e 77       	andi	r24, 0x7E	; 126
    11ea:	80 93 e8 00 	sts	0x00E8, r24
    11ee:	c3 db       	rcall	.-2170   	; 0x976 <Endpoint_ClearStatusStage>
    11f0:	53 c0       	rjmp	.+166    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    11f2:	80 91 3d 02 	lds	r24, 0x023D
    11f6:	81 32       	cpi	r24, 0x21	; 33
    11f8:	09 f0       	breq	.+2      	; 0x11fc <CDC_Device_ProcessControlRequest+0xb8>
    11fa:	4e c0       	rjmp	.+156    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    11fc:	80 91 e8 00 	lds	r24, 0x00E8
    1200:	87 7f       	andi	r24, 0xF7	; 247
    1202:	80 93 e8 00 	sts	0x00E8, r24
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <CDC_Device_ProcessControlRequest+0xce>
    1208:	80 91 3c 02 	lds	r24, 0x023C
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <CDC_Device_ProcessControlRequest+0xce>
    1210:	43 c0       	rjmp	.+134    	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1212:	80 91 e8 00 	lds	r24, 0x00E8
    1216:	82 ff       	sbrs	r24, 2
    1218:	f7 cf       	rjmp	.-18     	; 0x1208 <CDC_Device_ProcessControlRequest+0xc4>
    121a:	80 91 f1 00 	lds	r24, 0x00F1
    121e:	90 91 f1 00 	lds	r25, 0x00F1
    1222:	20 91 f1 00 	lds	r18, 0x00F1
    1226:	30 91 f1 00 	lds	r19, 0x00F1
    122a:	8c 8b       	std	Y+20, r24	; 0x14
    122c:	9d 8b       	std	Y+21, r25	; 0x15
    122e:	2e 8b       	std	Y+22, r18	; 0x16
    1230:	3f 8b       	std	Y+23, r19	; 0x17
    1232:	80 91 f1 00 	lds	r24, 0x00F1
    1236:	88 8f       	std	Y+24, r24	; 0x18
    1238:	80 91 f1 00 	lds	r24, 0x00F1
    123c:	89 8f       	std	Y+25, r24	; 0x19
    123e:	80 91 f1 00 	lds	r24, 0x00F1
    1242:	8a 8f       	std	Y+26, r24	; 0x1a
    1244:	80 91 e8 00 	lds	r24, 0x00E8
    1248:	8b 77       	andi	r24, 0x7B	; 123
    124a:	80 93 e8 00 	sts	0x00E8, r24
    124e:	93 db       	rcall	.-2266   	; 0x976 <Endpoint_ClearStatusStage>
    1250:	ce 01       	movw	r24, r28
    1252:	d6 de       	rcall	.-596    	; 0x1000 <CDC_Device_Event_Stub>
    1254:	21 c0       	rjmp	.+66     	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1256:	80 91 3d 02 	lds	r24, 0x023D
    125a:	81 32       	cpi	r24, 0x21	; 33
    125c:	e9 f4       	brne	.+58     	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    125e:	80 91 e8 00 	lds	r24, 0x00E8
    1262:	87 7f       	andi	r24, 0xF7	; 247
    1264:	80 93 e8 00 	sts	0x00E8, r24
    1268:	86 db       	rcall	.-2292   	; 0x976 <Endpoint_ClearStatusStage>
    126a:	80 91 3f 02 	lds	r24, 0x023F
    126e:	90 91 40 02 	lds	r25, 0x0240
    1272:	99 8b       	std	Y+17, r25	; 0x11
    1274:	88 8b       	std	Y+16, r24	; 0x10
    1276:	ce 01       	movw	r24, r28
    1278:	c3 de       	rcall	.-634    	; 0x1000 <CDC_Device_Event_Stub>
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    127c:	80 91 3d 02 	lds	r24, 0x023D
    1280:	81 32       	cpi	r24, 0x21	; 33
    1282:	51 f4       	brne	.+20     	; 0x1298 <CDC_Device_ProcessControlRequest+0x154>
    1284:	80 91 e8 00 	lds	r24, 0x00E8
    1288:	87 7f       	andi	r24, 0xF7	; 247
    128a:	80 93 e8 00 	sts	0x00E8, r24
    128e:	73 db       	rcall	.-2330   	; 0x976 <Endpoint_ClearStatusStage>
    1290:	ce 01       	movw	r24, r28
    1292:	60 91 3f 02 	lds	r22, 0x023F
    1296:	b4 de       	rcall	.-664    	; 0x1000 <CDC_Device_Event_Stub>
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <itoa>:
    129e:	fb 01       	movw	r30, r22
    12a0:	9f 01       	movw	r18, r30
    12a2:	e8 94       	clt
    12a4:	42 30       	cpi	r20, 0x02	; 2
    12a6:	bc f0       	brlt	.+46     	; 0x12d6 <itoa+0x38>
    12a8:	45 32       	cpi	r20, 0x25	; 37
    12aa:	ac f4       	brge	.+42     	; 0x12d6 <itoa+0x38>
    12ac:	4a 30       	cpi	r20, 0x0A	; 10
    12ae:	29 f4       	brne	.+10     	; 0x12ba <itoa+0x1c>
    12b0:	97 fb       	bst	r25, 7
    12b2:	1e f4       	brtc	.+6      	; 0x12ba <itoa+0x1c>
    12b4:	90 95       	com	r25
    12b6:	81 95       	neg	r24
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	64 2f       	mov	r22, r20
    12bc:	77 27       	eor	r23, r23
    12be:	6c d0       	rcall	.+216    	; 0x1398 <__udivmodhi4>
    12c0:	80 5d       	subi	r24, 0xD0	; 208
    12c2:	8a 33       	cpi	r24, 0x3A	; 58
    12c4:	0c f0       	brlt	.+2      	; 0x12c8 <itoa+0x2a>
    12c6:	89 5d       	subi	r24, 0xD9	; 217
    12c8:	81 93       	st	Z+, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	a9 f7       	brne	.-22     	; 0x12ba <itoa+0x1c>
    12d0:	16 f4       	brtc	.+4      	; 0x12d6 <itoa+0x38>
    12d2:	5d e2       	ldi	r21, 0x2D	; 45
    12d4:	51 93       	st	Z+, r21
    12d6:	10 82       	st	Z, r1
    12d8:	c9 01       	movw	r24, r18
    12da:	30 c0       	rjmp	.+96     	; 0x133c <strrev>

000012dc <fputs>:
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	7c 01       	movw	r14, r24
    12ea:	8b 01       	movw	r16, r22
    12ec:	db 01       	movw	r26, r22
    12ee:	13 96       	adiw	r26, 0x03	; 3
    12f0:	8c 91       	ld	r24, X
    12f2:	81 fd       	sbrc	r24, 1
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <fputs+0x20>
    12f6:	cf ef       	ldi	r28, 0xFF	; 255
    12f8:	df ef       	ldi	r29, 0xFF	; 255
    12fa:	13 c0       	rjmp	.+38     	; 0x1322 <fputs+0x46>
    12fc:	c0 e0       	ldi	r28, 0x00	; 0
    12fe:	d0 e0       	ldi	r29, 0x00	; 0
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <fputs+0x3c>
    1302:	d8 01       	movw	r26, r16
    1304:	18 96       	adiw	r26, 0x08	; 8
    1306:	ed 91       	ld	r30, X+
    1308:	fc 91       	ld	r31, X
    130a:	19 97       	sbiw	r26, 0x09	; 9
    130c:	b8 01       	movw	r22, r16
    130e:	09 95       	icall
    1310:	89 2b       	or	r24, r25
    1312:	11 f0       	breq	.+4      	; 0x1318 <fputs+0x3c>
    1314:	cf ef       	ldi	r28, 0xFF	; 255
    1316:	df ef       	ldi	r29, 0xFF	; 255
    1318:	f7 01       	movw	r30, r14
    131a:	81 91       	ld	r24, Z+
    131c:	7f 01       	movw	r14, r30
    131e:	88 23       	and	r24, r24
    1320:	81 f7       	brne	.-32     	; 0x1302 <fputs+0x26>
    1322:	ce 01       	movw	r24, r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	e6 e0       	ldi	r30, 0x06	; 6
    132a:	56 c0       	rjmp	.+172    	; 0x13d8 <__epilogue_restores__+0x18>

0000132c <__eerd_word_usb162>:
    132c:	a8 e1       	ldi	r26, 0x18	; 24
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	42 e0       	ldi	r20, 0x02	; 2
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	15 c0       	rjmp	.+42     	; 0x1360 <__eerd_blraw_usb162>

00001336 <__eewr_word_usb162>:
    1336:	22 d0       	rcall	.+68     	; 0x137c <__eewr_byte_usb162>
    1338:	27 2f       	mov	r18, r23
    133a:	21 c0       	rjmp	.+66     	; 0x137e <__eewr_r18_usb162>

0000133c <strrev>:
    133c:	dc 01       	movw	r26, r24
    133e:	fc 01       	movw	r30, r24
    1340:	67 2f       	mov	r22, r23
    1342:	71 91       	ld	r23, Z+
    1344:	77 23       	and	r23, r23
    1346:	e1 f7       	brne	.-8      	; 0x1340 <strrev+0x4>
    1348:	32 97       	sbiw	r30, 0x02	; 2
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <strrev+0x18>
    134c:	7c 91       	ld	r23, X
    134e:	6d 93       	st	X+, r22
    1350:	70 83       	st	Z, r23
    1352:	62 91       	ld	r22, -Z
    1354:	ae 17       	cp	r26, r30
    1356:	bf 07       	cpc	r27, r31
    1358:	c8 f3       	brcs	.-14     	; 0x134c <strrev+0x10>
    135a:	08 95       	ret

0000135c <__eerd_block_usb162>:
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22

00001360 <__eerd_blraw_usb162>:
    1360:	fc 01       	movw	r30, r24
    1362:	f9 99       	sbic	0x1f, 1	; 31
    1364:	fe cf       	rjmp	.-4      	; 0x1362 <__eerd_blraw_usb162+0x2>
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <__eerd_blraw_usb162+0x14>
    1368:	f2 bd       	out	0x22, r31	; 34
    136a:	e1 bd       	out	0x21, r30	; 33
    136c:	f8 9a       	sbi	0x1f, 0	; 31
    136e:	31 96       	adiw	r30, 0x01	; 1
    1370:	00 b4       	in	r0, 0x20	; 32
    1372:	0d 92       	st	X+, r0
    1374:	41 50       	subi	r20, 0x01	; 1
    1376:	50 40       	sbci	r21, 0x00	; 0
    1378:	b8 f7       	brcc	.-18     	; 0x1368 <__eerd_blraw_usb162+0x8>
    137a:	08 95       	ret

0000137c <__eewr_byte_usb162>:
    137c:	26 2f       	mov	r18, r22

0000137e <__eewr_r18_usb162>:
    137e:	f9 99       	sbic	0x1f, 1	; 31
    1380:	fe cf       	rjmp	.-4      	; 0x137e <__eewr_r18_usb162>
    1382:	1f ba       	out	0x1f, r1	; 31
    1384:	92 bd       	out	0x22, r25	; 34
    1386:	81 bd       	out	0x21, r24	; 33
    1388:	20 bd       	out	0x20, r18	; 32
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	fa 9a       	sbi	0x1f, 2	; 31
    1390:	f9 9a       	sbi	0x1f, 1	; 31
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	08 95       	ret

00001398 <__udivmodhi4>:
    1398:	aa 1b       	sub	r26, r26
    139a:	bb 1b       	sub	r27, r27
    139c:	51 e1       	ldi	r21, 0x11	; 17
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <__udivmodhi4_ep>

000013a0 <__udivmodhi4_loop>:
    13a0:	aa 1f       	adc	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	a6 17       	cp	r26, r22
    13a6:	b7 07       	cpc	r27, r23
    13a8:	10 f0       	brcs	.+4      	; 0x13ae <__udivmodhi4_ep>
    13aa:	a6 1b       	sub	r26, r22
    13ac:	b7 0b       	sbc	r27, r23

000013ae <__udivmodhi4_ep>:
    13ae:	88 1f       	adc	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	5a 95       	dec	r21
    13b4:	a9 f7       	brne	.-22     	; 0x13a0 <__udivmodhi4_loop>
    13b6:	80 95       	com	r24
    13b8:	90 95       	com	r25
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	08 95       	ret

000013c0 <__epilogue_restores__>:
    13c0:	2a 88       	ldd	r2, Y+18	; 0x12
    13c2:	39 88       	ldd	r3, Y+17	; 0x11
    13c4:	48 88       	ldd	r4, Y+16	; 0x10
    13c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    13c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    13ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    13cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    13ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    13d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    13d2:	b9 84       	ldd	r11, Y+9	; 0x09
    13d4:	c8 84       	ldd	r12, Y+8	; 0x08
    13d6:	df 80       	ldd	r13, Y+7	; 0x07
    13d8:	ee 80       	ldd	r14, Y+6	; 0x06
    13da:	fd 80       	ldd	r15, Y+5	; 0x05
    13dc:	0c 81       	ldd	r16, Y+4	; 0x04
    13de:	1b 81       	ldd	r17, Y+3	; 0x03
    13e0:	aa 81       	ldd	r26, Y+2	; 0x02
    13e2:	b9 81       	ldd	r27, Y+1	; 0x01
    13e4:	ce 0f       	add	r28, r30
    13e6:	d1 1d       	adc	r29, r1
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	ed 01       	movw	r28, r26
    13f4:	08 95       	ret

000013f6 <_exit>:
    13f6:	f8 94       	cli

000013f8 <__stop_program>:
    13f8:	ff cf       	rjmp	.-2      	; 0x13f8 <__stop_program>
