
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001134  000011c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  00800140  00800140  00001208  2**0
                  ALLOC
  3 .debug_aranges 000004d0  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d3c  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008326  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021fb  00000000  00000000  0000a73a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000633e  00000000  00000000  0000c935  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000760  00000000  00000000  00012c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003401  00000000  00000000  000133d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000034a8  00000000  00000000  000167d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000608  00000000  00000000  00019c7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	while (*s) 
		USARTWriteChar(*s++);
}

unsigned char USARTReadChar( void ) 
{
       0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       2:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c4       	rjmp	.+2302   	; 0x92c <__vector_11>
      2e:	00 00       	nop
      30:	42 c4       	rjmp	.+2180   	; 0x8b6 <__vector_12>
      32:	00 00       	nop
      34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
      36:	00 00       	nop
      38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	75 c0       	rjmp	.+234    	; 0x138 <__vector_19>
      4e:	00 00       	nop
      50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
      52:	00 00       	nop
      54:	70 c0       	rjmp	.+224    	; 0x136 <__bad_interrupt>
      56:	00 00       	nop
      58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	dc c1       	rjmp	.+952    	; 0x416 <__vector_23>
      5e:	00 00       	nop
      60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      84:	dc 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      96:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      b6:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <ProductString>:
      e2:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      f2:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000100 <__ctors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	d2 e0       	ldi	r29, 0x02	; 2
     108:	de bf       	out	0x3e, r29	; 62
     10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
     10c:	11 e0       	ldi	r17, 0x01	; 1
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	e4 e3       	ldi	r30, 0x34	; 52
     114:	f1 e1       	ldi	r31, 0x11	; 17
     116:	02 c0       	rjmp	.+4      	; 0x11c <.do_copy_data_start>

00000118 <.do_copy_data_loop>:
     118:	05 90       	lpm	r0, Z+
     11a:	0d 92       	st	X+, r0

0000011c <.do_copy_data_start>:
     11c:	a0 34       	cpi	r26, 0x40	; 64
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <.do_copy_data_loop>

00000122 <__do_clear_bss>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e4       	ldi	r26, 0x40	; 64
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a8 32       	cpi	r26, 0x28	; 40
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	3c d1       	rcall	.+632    	; 0x3ac <main>
     134:	fd c7       	rjmp	.+4090   	; 0x1130 <_exit>

00000136 <__bad_interrupt>:
     136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <__vector_19>:
#include "main.h"

static volatile int16_t tim_cnter = 0;
ISR(TIMER0_COMPA_vect)
{
     138:	1f 92       	push	r1
     13a:	0f 92       	push	r0
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	0f 92       	push	r0
     140:	11 24       	eor	r1, r1
     142:	2f 93       	push	r18
     144:	8f 93       	push	r24
     146:	9f 93       	push	r25
	tim_cnter++;
     148:	80 91 43 01 	lds	r24, 0x0143
     14c:	90 91 44 01 	lds	r25, 0x0144
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	90 93 44 01 	sts	0x0144, r25
     156:	80 93 43 01 	sts	0x0143, r24
	
	if(tim_cnter > 300)
     15a:	80 91 43 01 	lds	r24, 0x0143
     15e:	90 91 44 01 	lds	r25, 0x0144
     162:	8d 52       	subi	r24, 0x2D	; 45
     164:	91 40       	sbci	r25, 0x01	; 1
     166:	44 f0       	brlt	.+16     	; 0x178 <__vector_19+0x40>
	{
		PORTB ^= (1 << PB6);
     168:	85 b1       	in	r24, 0x05	; 5
     16a:	90 e4       	ldi	r25, 0x40	; 64
     16c:	89 27       	eor	r24, r25
     16e:	85 b9       	out	0x05, r24	; 5
		tim_cnter = 0;
     170:	10 92 44 01 	sts	0x0144, r1
     174:	10 92 43 01 	sts	0x0143, r1
	}
}
     178:	9f 91       	pop	r25
     17a:	8f 91       	pop	r24
     17c:	2f 91       	pop	r18
     17e:	0f 90       	pop	r0
     180:	0f be       	out	0x3f, r0	; 63
     182:	0f 90       	pop	r0
     184:	1f 90       	pop	r1
     186:	18 95       	reti

00000188 <USARTWriteChar>:
static volatile int8_t bufferLength = 1;
static volatile int8_t numbers = 0;
volatile int16_t iRead = 0;

void USARTWriteChar(unsigned char data)
{
     188:	98 2f       	mov	r25, r24
   while(!(UCSR1A & (1<<UDRE1)));
     18a:	80 91 c8 00 	lds	r24, 0x00C8
     18e:	85 ff       	sbrs	r24, 5
     190:	fc cf       	rjmp	.-8      	; 0x18a <USARTWriteChar+0x2>
   UDR1=data;
     192:	90 93 ce 00 	sts	0x00CE, r25
}
     196:	08 95       	ret

00000198 <uart_puts>:

void uart_puts(const char *s )
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	ec 01       	movw	r28, r24
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <uart_puts+0xc>
	while (*s) 
		USARTWriteChar(*s++);
     1a0:	21 96       	adiw	r28, 0x01	; 1
     1a2:	f2 df       	rcall	.-28     	; 0x188 <USARTWriteChar>
   UDR1=data;
}

void uart_puts(const char *s )
{
	while (*s) 
     1a4:	88 81       	ld	r24, Y
     1a6:	88 23       	and	r24, r24
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <uart_puts+0x8>
		USARTWriteChar(*s++);
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <openGate>:
	return UDR1;
}

void openGate()
{
	PORTC |= (1 << PC7);
     1b0:	47 9a       	sbi	0x08, 7	; 8
     1b2:	80 e3       	ldi	r24, 0x30	; 48
     1b4:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1b6:	28 ec       	ldi	r18, 0xC8	; 200
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	31 97       	sbiw	r30, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <openGate+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <openGate+0xa>
	_delay_ms(3000);
	PORTC &= ~(1 << PC7);
     1c4:	47 98       	cbi	0x08, 7	; 8
}
     1c6:	08 95       	ret

000001c8 <stringCheck>:
}

static volatile int8_t stringBuffer[100];
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
     1c8:	dc 01       	movw	r26, r24
	int i = 1;
	
	while(*s != phoneBuffer[i])
     1ca:	8c 91       	ld	r24, X
     1cc:	28 2f       	mov	r18, r24
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	0b c0       	rjmp	.+22     	; 0x1ec <stringCheck+0x24>
	{
		i++;
     1d6:	4f 5f       	subi	r20, 0xFF	; 255
     1d8:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
     1da:	80 91 3f 01 	lds	r24, 0x013F
     1de:	99 27       	eor	r25, r25
     1e0:	87 fd       	sbrc	r24, 7
     1e2:	90 95       	com	r25
     1e4:	48 17       	cp	r20, r24
     1e6:	59 07       	cpc	r21, r25
     1e8:	0c f0       	brlt	.+2      	; 0x1ec <stringCheck+0x24>
     1ea:	45 c0       	rjmp	.+138    	; 0x276 <stringCheck+0xae>
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
	int i = 1;
	
	while(*s != phoneBuffer[i])
     1ec:	fa 01       	movw	r30, r20
     1ee:	ed 5a       	subi	r30, 0xAD	; 173
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 81       	ld	r24, Z
     1f4:	99 27       	eor	r25, r25
     1f6:	87 fd       	sbrc	r24, 7
     1f8:	90 95       	com	r25
     1fa:	28 17       	cp	r18, r24
     1fc:	39 07       	cpc	r19, r25
     1fe:	59 f7       	brne	.-42     	; 0x1d6 <stringCheck+0xe>
     200:	16 c0       	rjmp	.+44     	; 0x22e <stringCheck+0x66>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     202:	fa 01       	movw	r30, r20
     204:	ed 5a       	subi	r30, 0xAD	; 173
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	80 81       	ld	r24, Z
     20a:	99 27       	eor	r25, r25
     20c:	87 fd       	sbrc	r24, 7
     20e:	90 95       	com	r25
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	82 17       	cp	r24, r18
     214:	93 07       	cpc	r25, r19
     216:	79 f5       	brne	.+94     	; 0x276 <stringCheck+0xae>
			return 0;
		i++;			
     218:	4f 5f       	subi	r20, 0xFF	; 255
     21a:	5f 4f       	sbci	r21, 0xFF	; 255
		
		if(i > bufferLength-1)
     21c:	80 91 3f 01 	lds	r24, 0x013F
     220:	99 27       	eor	r25, r25
     222:	87 fd       	sbrc	r24, 7
     224:	90 95       	com	r25
     226:	48 17       	cp	r20, r24
     228:	59 07       	cpc	r21, r25
     22a:	2c f5       	brge	.+74     	; 0x276 <stringCheck+0xae>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     22c:	11 96       	adiw	r26, 0x01	; 1
	{
		i++;
		if(i > bufferLength-1)
			return 0;
	}
	while (*s)
     22e:	2c 91       	ld	r18, X
     230:	22 23       	and	r18, r18
     232:	39 f7       	brne	.-50     	; 0x202 <stringCheck+0x3a>
		
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
     234:	10 92 42 01 	sts	0x0142, r1
     238:	13 c0       	rjmp	.+38     	; 0x260 <stringCheck+0x98>
	while(i < bufferLength -1)
	{
		stringBuffer[stringCnter] = phoneBuffer[i];
     23a:	e0 91 42 01 	lds	r30, 0x0142
     23e:	ff 27       	eor	r31, r31
     240:	e7 fd       	sbrc	r30, 7
     242:	f0 95       	com	r31
     244:	da 01       	movw	r26, r20
     246:	ad 5a       	subi	r26, 0xAD	; 173
     248:	be 4f       	sbci	r27, 0xFE	; 254
     24a:	8c 91       	ld	r24, X
     24c:	e9 54       	subi	r30, 0x49	; 73
     24e:	fe 4f       	sbci	r31, 0xFE	; 254
     250:	80 83       	st	Z, r24
		stringCnter++;
     252:	80 91 42 01 	lds	r24, 0x0142
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	80 93 42 01 	sts	0x0142, r24
		i++;
     25c:	4f 5f       	subi	r20, 0xFF	; 255
     25e:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
	while(i < bufferLength -1)
     260:	80 91 3f 01 	lds	r24, 0x013F
     264:	99 27       	eor	r25, r25
     266:	87 fd       	sbrc	r24, 7
     268:	90 95       	com	r25
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	48 17       	cp	r20, r24
     26e:	59 07       	cpc	r21, r25
     270:	24 f3       	brlt	.-56     	; 0x23a <stringCheck+0x72>
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	08 95       	ret
     276:	80 e0       	ldi	r24, 0x00	; 0
		stringCnter++;
		i++;
	}
	
	return 1;
}
     278:	08 95       	ret

0000027a <findRinBuff>:

unsigned char findRinBuff()
{

	if(bufferLength < 2)
     27a:	80 91 3f 01 	lds	r24, 0x013F
     27e:	82 30       	cpi	r24, 0x02	; 2
     280:	94 f0       	brlt	.+36     	; 0x2a6 <findRinBuff+0x2c>
     282:	22 e0       	ldi	r18, 0x02	; 2
     284:	06 c0       	rjmp	.+12     	; 0x292 <findRinBuff+0x18>
		return 0;
		
	for(unsigned char i = 2; i < bufferLength; i++)
	{
		if(phoneBuffer[i] == 0x0D)
     286:	ed 5a       	subi	r30, 0xAD	; 173
     288:	fe 4f       	sbci	r31, 0xFE	; 254
     28a:	80 81       	ld	r24, Z
     28c:	8d 30       	cpi	r24, 0x0D	; 13
     28e:	61 f0       	breq	.+24     	; 0x2a8 <findRinBuff+0x2e>
{

	if(bufferLength < 2)
		return 0;
		
	for(unsigned char i = 2; i < bufferLength; i++)
     290:	2f 5f       	subi	r18, 0xFF	; 255
     292:	e2 2f       	mov	r30, r18
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 91 3f 01 	lds	r24, 0x013F
     29a:	99 27       	eor	r25, r25
     29c:	87 fd       	sbrc	r24, 7
     29e:	90 95       	com	r25
     2a0:	e8 17       	cp	r30, r24
     2a2:	f9 07       	cpc	r31, r25
     2a4:	84 f3       	brlt	.-32     	; 0x286 <findRinBuff+0xc>
     2a6:	20 e0       	ldi	r18, 0x00	; 0
			return i;
	}
	
	return 0;

}
     2a8:	82 2f       	mov	r24, r18
     2aa:	08 95       	ret

000002ac <bufferCheck>:

void bufferCheck()
{
	if(bufferLength < 2)
     2ac:	80 91 3f 01 	lds	r24, 0x013F
     2b0:	82 30       	cpi	r24, 0x02	; 2
     2b2:	0c f1       	brlt	.+66     	; 0x2f6 <bufferCheck+0x4a>
		return;
		
	if(findRinBuff() > 0)
     2b4:	e2 df       	rcall	.-60     	; 0x27a <findRinBuff>
     2b6:	88 23       	and	r24, r24
     2b8:	f1 f0       	breq	.+60     	; 0x2f6 <bufferCheck+0x4a>
	{
		if(stringCheck("RING") == 1)
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	84 df       	rcall	.-248    	; 0x1c8 <stringCheck>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	61 f4       	brne	.+24     	; 0x2dc <bufferCheck+0x30>
		{
			uart_puts("ATH\r");
     2c4:	85 e0       	ldi	r24, 0x05	; 5
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	67 df       	rcall	.-306    	; 0x198 <uart_puts>
     2ca:	88 e8       	ldi	r24, 0x88	; 136
     2cc:	93 e1       	ldi	r25, 0x13	; 19
     2ce:	28 ec       	ldi	r18, 0xC8	; 200
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f9 01       	movw	r30, r18
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <bufferCheck+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2da:	d9 f7       	brne	.-10     	; 0x2d2 <bufferCheck+0x26>
			_delay_ms(500);
		}
		
		if(stringCheck("+CLCC: 1,1,6,") == 1)
     2dc:	8a e0       	ldi	r24, 0x0A	; 10
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	73 df       	rcall	.-282    	; 0x1c8 <stringCheck>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	29 f4       	brne	.+10     	; 0x2f0 <bufferCheck+0x44>
		{	
		
			if(stringBuffer[21] != '"') // jeśli jest wpisany opis
     2e6:	80 91 cc 01 	lds	r24, 0x01CC
     2ea:	82 32       	cpi	r24, 0x22	; 34
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <bufferCheck+0x44>
			{
				openGate();
     2ee:	60 df       	rcall	.-320    	; 0x1b0 <openGate>
			}
			
		}
		
		bufferLength = 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 3f 01 	sts	0x013F, r24
     2f6:	08 95       	ret

000002f8 <USARTInit>:


void USARTInit(unsigned int ubrr_value)
{
   
   UCSR1A |= (1 << U2X1);
     2f8:	e8 ec       	ldi	r30, 0xC8	; 200
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	20 81       	ld	r18, Z
     2fe:	22 60       	ori	r18, 0x02	; 2
     300:	20 83       	st	Z, r18
   UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
     302:	e9 ec       	ldi	r30, 0xC9	; 201
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	20 81       	ld	r18, Z
     308:	28 69       	ori	r18, 0x98	; 152
     30a:	20 83       	st	Z, r18
   UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     30c:	ea ec       	ldi	r30, 0xCA	; 202
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	20 81       	ld	r18, Z
     312:	26 60       	ori	r18, 0x06	; 6
     314:	20 83       	st	Z, r18
   UBRR1 = ubrr_value;
     316:	90 93 cd 00 	sts	0x00CD, r25
     31a:	80 93 cc 00 	sts	0x00CC, r24
   DDRD |= (1 << PD3);
     31e:	53 9a       	sbi	0x0a, 3	; 10
}
     320:	08 95       	ret

00000322 <EVENT_USB_Device_Connect>:
}

void EVENT_USB_Device_Connect(void)
{

}
     322:	08 95       	ret

00000324 <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{

}
     324:	08 95       	ret

00000326 <EVENT_USB_Device_ControlRequest>:
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
}

void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     326:	83 e2       	ldi	r24, 0x23	; 35
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	12 c6       	rjmp	.+3108   	; 0xf50 <CDC_Device_ProcessControlRequest>

0000032c <EVENT_USB_Device_ConfigurationChanged>:
{

}

void EVENT_USB_Device_ConfigurationChanged(void)
{
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     330:	00 91 3e 01 	lds	r16, 0x013E
     334:	83 e2       	ldi	r24, 0x23	; 35
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	e4 d5       	rcall	.+3016   	; 0xf02 <CDC_Device_ConfigureEndpoints>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	80 23       	and	r24, r16
     342:	91 23       	and	r25, r17
     344:	89 2b       	or	r24, r25
     346:	09 f0       	breq	.+2      	; 0x34a <EVENT_USB_Device_ConfigurationChanged+0x1e>
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	20 93 3e 01 	sts	0x013E, r18
}
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <SetupHardware>:
   DDRD |= (1 << PD3);
}

void SetupHardware(void)
{
	MCUSR &= ~(1 << WDRF);
     354:	84 b7       	in	r24, 0x34	; 52
     356:	87 7f       	andi	r24, 0xF7	; 247
     358:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     35a:	88 e1       	ldi	r24, 0x18	; 24
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	80 93 60 00 	sts	0x0060, r24
     364:	10 92 60 00 	sts	0x0060, r1
     368:	0f be       	out	0x3f, r0	; 63
	
	DDRB = (1 << PB5) | (1 << PB6) | (1 << PB4);	
     36a:	80 e7       	ldi	r24, 0x70	; 112
     36c:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << PC7);
     36e:	80 e8       	ldi	r24, 0x80	; 128
     370:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC2);
     372:	42 9a       	sbi	0x08, 2	; 8
	
	
	clock_prescale_set(0);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	20 e8       	ldi	r18, 0x80	; 128
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	20 93 61 00 	sts	0x0061, r18
     382:	80 93 61 00 	sts	0x0061, r24
     386:	0f be       	out	0x3f, r0	; 63

	USB_Init();
     388:	87 d2       	rcall	.+1294   	; 0x898 <USB_Init>
	
	USARTInit(51);
     38a:	83 e3       	ldi	r24, 0x33	; 51
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	b4 df       	rcall	.-152    	; 0x2f8 <USARTInit>
	
	TCCR0A |= (1 << WGM01);
     390:	84 b5       	in	r24, 0x24	; 36
     392:	82 60       	ori	r24, 0x02	; 2
     394:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02);
     396:	85 b5       	in	r24, 0x25	; 37
     398:	85 60       	ori	r24, 0x05	; 5
     39a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
     39c:	ee e6       	ldi	r30, 0x6E	; 110
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	82 60       	ori	r24, 0x02	; 2
     3a4:	80 83       	st	Z, r24
	OCR0A = 255;
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	87 bd       	out	0x27, r24	; 39
}
     3aa:	08 95       	ret

000003ac <main>:

int main(void)
{
	int16_t b;
	
	SetupHardware();    
     3ac:	d3 df       	rcall	.-90     	; 0x354 <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);	
     3ae:	83 e2       	ldi	r24, 0x23	; 35
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	65 e4       	ldi	r22, 0x45	; 69
     3b4:	71 e0       	ldi	r23, 0x01	; 1
     3b6:	0c d5       	rcall	.+2584   	; 0xdd0 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3b8:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     3ba:	80 e1       	ldi	r24, 0x10	; 16
     3bc:	97 e2       	ldi	r25, 0x27	; 39
     3be:	28 ec       	ldi	r18, 0xC8	; 200
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ca:	d9 f7       	brne	.-10     	; 0x3c2 <main+0x16>
	GlobalInterruptEnable();

	_delay_ms(1000);
	PORTB |= (1 << PB4);
     3cc:	2c 9a       	sbi	0x05, 4	; 5
     3ce:	88 e9       	ldi	r24, 0x98	; 152
     3d0:	9a e3       	ldi	r25, 0x3A	; 58
     3d2:	28 ec       	ldi	r18, 0xC8	; 200
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3de:	d9 f7       	brne	.-10     	; 0x3d6 <main+0x2a>
	_delay_ms(1500);
	PORTB &= ~(1 << PB4);
     3e0:	2c 98       	cbi	0x05, 4	; 5
     3e2:	80 e3       	ldi	r24, 0x30	; 48
     3e4:	95 e7       	ldi	r25, 0x75	; 117
     3e6:	28 ec       	ldi	r18, 0xC8	; 200
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	f9 01       	movw	r30, r18
     3ec:	31 97       	sbiw	r30, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f2:	d9 f7       	brne	.-10     	; 0x3ea <main+0x3e>
	_delay_ms(3000);
	
	PORTB |= (1 << PB5);
     3f4:	2d 9a       	sbi	0x05, 5	; 5
	

	for (;;)
	{
		if(ConfigSuccess)
     3f6:	80 91 3e 01 	lds	r24, 0x013E
     3fa:	88 23       	and	r24, r24
     3fc:	51 f0       	breq	.+20     	; 0x412 <main+0x66>
		{
			b = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     3fe:	83 e2       	ldi	r24, 0x23	; 35
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	b8 d4       	rcall	.+2416   	; 0xd74 <CDC_Device_ReceiveByte>
			
			if(b > -1)
     404:	97 fd       	sbrc	r25, 7
     406:	01 c0       	rjmp	.+2      	; 0x40a <main+0x5e>
			{
			//	fputs(&b, &USBSerialStream);

				USARTWriteChar(b);	
     408:	bf de       	rcall	.-642    	; 0x188 <USARTWriteChar>
			}
			
			CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     40a:	83 e2       	ldi	r24, 0x23	; 35
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	2c d5       	rcall	.+2648   	; 0xe68 <CDC_Device_USBTask>
			USB_USBTask();
     410:	9c d4       	rcall	.+2360   	; 0xd4a <USB_USBTask>
		}
		bufferCheck();
     412:	4c df       	rcall	.-360    	; 0x2ac <bufferCheck>
     414:	f0 cf       	rjmp	.-32     	; 0x3f6 <main+0x4a>

00000416 <__vector_23>:
		_delay_ms(100);
	}
}

SIGNAL(USART1_RX_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	1f 93       	push	r17
     422:	2f 93       	push	r18
     424:	3f 93       	push	r19
     426:	4f 93       	push	r20
     428:	5f 93       	push	r21
     42a:	6f 93       	push	r22
     42c:	7f 93       	push	r23
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	00 d0       	rcall	.+0      	; 0x440 <__vector_23+0x2a>
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
	int8_t c = UDR1;
     444:	10 91 ce 00 	lds	r17, 0x00CE
	int16_t c2 = c;
	if(ConfigSuccess)
     448:	80 91 3e 01 	lds	r24, 0x013E
     44c:	88 23       	and	r24, r24
     44e:	59 f0       	breq	.+22     	; 0x466 <__vector_23+0x50>
}

SIGNAL(USART1_RX_vect)
{
	int8_t c = UDR1;
	int16_t c2 = c;
     450:	81 2f       	mov	r24, r17
     452:	99 27       	eor	r25, r25
     454:	87 fd       	sbrc	r24, 7
     456:	90 95       	com	r25
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
	if(ConfigSuccess)
		fputs(&c2, &USBSerialStream); // do debugu
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	65 e4       	ldi	r22, 0x45	; 69
     462:	71 e0       	ldi	r23, 0x01	; 1
     464:	22 d6       	rcall	.+3140   	; 0x10aa <fputs>
		
	if(bufferLength == 1 && c != 0x0D || bufferLength > 98)
     466:	80 91 3f 01 	lds	r24, 0x013F
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	11 f4       	brne	.+4      	; 0x472 <__vector_23+0x5c>
     46e:	1d 30       	cpi	r17, 0x0D	; 13
     470:	89 f4       	brne	.+34     	; 0x494 <__vector_23+0x7e>
     472:	80 91 3f 01 	lds	r24, 0x013F
     476:	83 36       	cpi	r24, 0x63	; 99
     478:	6c f4       	brge	.+26     	; 0x494 <__vector_23+0x7e>
		return;
	
	phoneBuffer[bufferLength] = c;
     47a:	e0 91 3f 01 	lds	r30, 0x013F
     47e:	ff 27       	eor	r31, r31
     480:	e7 fd       	sbrc	r30, 7
     482:	f0 95       	com	r31
     484:	ed 5a       	subi	r30, 0xAD	; 173
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	10 83       	st	Z, r17
	bufferLength++;		
     48a:	80 91 3f 01 	lds	r24, 0x013F
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 3f 01 	sts	0x013F, r24
}
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	cf 91       	pop	r28
     49a:	df 91       	pop	r29
     49c:	ff 91       	pop	r31
     49e:	ef 91       	pop	r30
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	7f 91       	pop	r23
     4aa:	6f 91       	pop	r22
     4ac:	5f 91       	pop	r21
     4ae:	4f 91       	pop	r20
     4b0:	3f 91       	pop	r19
     4b2:	2f 91       	pop	r18
     4b4:	1f 91       	pop	r17
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     4c0:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4c2:	92 30       	cpi	r25, 0x02	; 2
     4c4:	49 f0       	breq	.+18     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x18>
     4c6:	93 30       	cpi	r25, 0x03	; 3
     4c8:	61 f0       	breq	.+24     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x22>
     4ca:	91 30       	cpi	r25, 0x01	; 1
     4cc:	f9 f4       	brne	.+62     	; 0x50c <CALLBACK_USB_GetDescriptor+0x4c>
     4ce:	e4 e7       	ldi	r30, 0x74	; 116
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	22 e1       	ldi	r18, 0x12	; 18
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	1e c0       	rjmp	.+60     	; 0x514 <CALLBACK_USB_GetDescriptor+0x54>
     4d8:	e6 e8       	ldi	r30, 0x86	; 134
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	2e e3       	ldi	r18, 0x3E	; 62
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	19 c0       	rjmp	.+50     	; 0x514 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	49 f0       	breq	.+18     	; 0x4f8 <CALLBACK_USB_GetDescriptor+0x38>
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	18 f0       	brcs	.+6      	; 0x4f0 <CALLBACK_USB_GetDescriptor+0x30>
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	79 f4       	brne	.+30     	; 0x50c <CALLBACK_USB_GetDescriptor+0x4c>
     4ee:	08 c0       	rjmp	.+16     	; 0x500 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4f0:	e4 ec       	ldi	r30, 0xC4	; 196
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	84 91       	lpm	r24, Z+
     4f6:	07 c0       	rjmp	.+14     	; 0x506 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4f8:	e8 ec       	ldi	r30, 0xC8	; 200
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	84 91       	lpm	r24, Z+
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     500:	e2 ee       	ldi	r30, 0xE2	; 226
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	84 91       	lpm	r24, Z+
     506:	28 2f       	mov	r18, r24
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	04 c0       	rjmp	.+8      	; 0x514 <CALLBACK_USB_GetDescriptor+0x54>
     50c:	e0 e0       	ldi	r30, 0x00	; 0
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     514:	ed 93       	st	X+, r30
     516:	fc 93       	st	X, r31
	return Size;
}
     518:	c9 01       	movw	r24, r18
     51a:	08 95       	ret

0000051c <Endpoint_Write_Control_Stream_LE>:
     51c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     51e:	40 91 26 02 	lds	r20, 0x0226
     522:	50 91 27 02 	lds	r21, 0x0227
     526:	46 17       	cp	r20, r22
     528:	57 07       	cpc	r21, r23
     52a:	18 f4       	brcc	.+6      	; 0x532 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     52c:	f9 01       	movw	r30, r18
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	3d c0       	rjmp	.+122    	; 0x5ac <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     532:	61 15       	cp	r22, r1
     534:	71 05       	cpc	r23, r1
     536:	11 f0       	breq	.+4      	; 0x53c <Endpoint_Write_Control_Stream_LE+0x20>
     538:	ab 01       	movw	r20, r22
     53a:	f8 cf       	rjmp	.-16     	; 0x52c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     53c:	80 91 e8 00 	lds	r24, 0x00E8
     540:	8e 77       	andi	r24, 0x7E	; 126
     542:	80 93 e8 00 	sts	0x00E8, r24
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	f0 cf       	rjmp	.-32     	; 0x52c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     54c:	80 91 1f 02 	lds	r24, 0x021F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     550:	88 23       	and	r24, r24
     552:	f1 f1       	breq	.+124    	; 0x5d0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     554:	85 30       	cpi	r24, 0x05	; 5
     556:	f1 f1       	breq	.+124    	; 0x5d4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     558:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     55c:	83 ff       	sbrs	r24, 3
     55e:	02 c0       	rjmp	.+4      	; 0x564 <Endpoint_Write_Control_Stream_LE+0x48>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     564:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     568:	82 fd       	sbrc	r24, 2
     56a:	2c c0       	rjmp	.+88     	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     56c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     570:	80 ff       	sbrs	r24, 0
     572:	1c c0       	rjmp	.+56     	; 0x5ac <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     574:	80 91 f2 00 	lds	r24, 0x00F2
     578:	28 2f       	mov	r18, r24
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	07 c0       	rjmp	.+14     	; 0x58c <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     57e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     580:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     584:	41 50       	subi	r20, 0x01	; 1
     586:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     58c:	41 15       	cp	r20, r1
     58e:	51 05       	cpc	r21, r1
     590:	19 f0       	breq	.+6      	; 0x598 <Endpoint_Write_Control_Stream_LE+0x7c>
     592:	28 30       	cpi	r18, 0x08	; 8
     594:	31 05       	cpc	r19, r1
     596:	98 f3       	brcs	.-26     	; 0x57e <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	28 30       	cpi	r18, 0x08	; 8
     59c:	31 05       	cpc	r19, r1
     59e:	09 f4       	brne	.+2      	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0x86>
     5a0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a2:	80 91 e8 00 	lds	r24, 0x00E8
     5a6:	8e 77       	andi	r24, 0x7E	; 126
     5a8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5ac:	41 15       	cp	r20, r1
     5ae:	51 05       	cpc	r21, r1
     5b0:	69 f6       	brne	.-102    	; 0x54c <Endpoint_Write_Control_Stream_LE+0x30>
     5b2:	99 23       	and	r25, r25
     5b4:	59 f6       	brne	.-106    	; 0x54c <Endpoint_Write_Control_Stream_LE+0x30>
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5b8:	80 91 1f 02 	lds	r24, 0x021F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5bc:	88 23       	and	r24, r24
     5be:	41 f0       	breq	.+16     	; 0x5d0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5c0:	85 30       	cpi	r24, 0x05	; 5
     5c2:	41 f0       	breq	.+16     	; 0x5d4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5c4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5c8:	82 ff       	sbrs	r24, 2
     5ca:	f6 cf       	rjmp	.-20     	; 0x5b8 <Endpoint_Write_Control_Stream_LE+0x9c>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	08 95       	ret
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	08 95       	ret
     5d4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5d6:	08 95       	ret

000005d8 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     5d8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5da:	40 91 26 02 	lds	r20, 0x0226
     5de:	50 91 27 02 	lds	r21, 0x0227
     5e2:	46 17       	cp	r20, r22
     5e4:	57 07       	cpc	r21, r23
     5e6:	18 f4       	brcc	.+6      	; 0x5ee <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     5e8:	f9 01       	movw	r30, r18
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	40 c0       	rjmp	.+128    	; 0x66e <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5ee:	61 15       	cp	r22, r1
     5f0:	71 05       	cpc	r23, r1
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x20>
     5f4:	ab 01       	movw	r20, r22
     5f6:	f8 cf       	rjmp	.-16     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f8:	80 91 e8 00 	lds	r24, 0x00E8
     5fc:	8e 77       	andi	r24, 0x7E	; 126
     5fe:	80 93 e8 00 	sts	0x00E8, r24
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	f0 cf       	rjmp	.-32     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     608:	80 91 1f 02 	lds	r24, 0x021F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     60c:	88 23       	and	r24, r24
     60e:	09 f4       	brne	.+2      	; 0x612 <Endpoint_Write_Control_PStream_LE+0x3a>
     610:	40 c0       	rjmp	.+128    	; 0x692 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     612:	85 30       	cpi	r24, 0x05	; 5
     614:	09 f4       	brne	.+2      	; 0x618 <Endpoint_Write_Control_PStream_LE+0x40>
     616:	3f c0       	rjmp	.+126    	; 0x696 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     618:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     61c:	83 ff       	sbrs	r24, 3
     61e:	02 c0       	rjmp	.+4      	; 0x624 <Endpoint_Write_Control_PStream_LE+0x4c>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     624:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     628:	82 fd       	sbrc	r24, 2
     62a:	2d c0       	rjmp	.+90     	; 0x686 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     62c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     630:	80 ff       	sbrs	r24, 0
     632:	1d c0       	rjmp	.+58     	; 0x66e <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     634:	80 91 f2 00 	lds	r24, 0x00F2
     638:	28 2f       	mov	r18, r24
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	08 c0       	rjmp	.+16     	; 0x64e <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     63e:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     640:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     644:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     646:	41 50       	subi	r20, 0x01	; 1
     648:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     64a:	2f 5f       	subi	r18, 0xFF	; 255
     64c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     64e:	41 15       	cp	r20, r1
     650:	51 05       	cpc	r21, r1
     652:	19 f0       	breq	.+6      	; 0x65a <Endpoint_Write_Control_PStream_LE+0x82>
     654:	28 30       	cpi	r18, 0x08	; 8
     656:	31 05       	cpc	r19, r1
     658:	90 f3       	brcs	.-28     	; 0x63e <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	28 30       	cpi	r18, 0x08	; 8
     65e:	31 05       	cpc	r19, r1
     660:	09 f4       	brne	.+2      	; 0x664 <Endpoint_Write_Control_PStream_LE+0x8c>
     662:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     664:	80 91 e8 00 	lds	r24, 0x00E8
     668:	8e 77       	andi	r24, 0x7E	; 126
     66a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     66e:	41 15       	cp	r20, r1
     670:	51 05       	cpc	r21, r1
     672:	51 f6       	brne	.-108    	; 0x608 <Endpoint_Write_Control_PStream_LE+0x30>
     674:	99 23       	and	r25, r25
     676:	41 f6       	brne	.-112    	; 0x608 <Endpoint_Write_Control_PStream_LE+0x30>
     678:	06 c0       	rjmp	.+12     	; 0x686 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     67a:	80 91 1f 02 	lds	r24, 0x021F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     67e:	88 23       	and	r24, r24
     680:	41 f0       	breq	.+16     	; 0x692 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     682:	85 30       	cpi	r24, 0x05	; 5
     684:	41 f0       	breq	.+16     	; 0x696 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     686:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     68a:	82 ff       	sbrs	r24, 2
     68c:	f6 cf       	rjmp	.-20     	; 0x67a <Endpoint_Write_Control_PStream_LE+0xa2>
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	08 95       	ret
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	08 95       	ret
     696:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     698:	08 95       	ret

0000069a <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     69a:	38 2f       	mov	r19, r24
     69c:	28 2f       	mov	r18, r24
     69e:	2e c0       	rjmp	.+92     	; 0x6fc <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6a0:	82 2f       	mov	r24, r18
     6a2:	8f 70       	andi	r24, 0x0F	; 15
     6a4:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     6a8:	23 17       	cp	r18, r19
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     6ac:	76 2f       	mov	r23, r22
     6ae:	94 2f       	mov	r25, r20
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     6b4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     6b8:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     6bc:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     6c0:	91 ff       	sbrs	r25, 1
     6c2:	1b c0       	rjmp	.+54     	; 0x6fa <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     6c4:	80 91 eb 00 	lds	r24, 0x00EB
     6c8:	8e 7f       	andi	r24, 0xFE	; 254
     6ca:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     6ce:	80 91 ed 00 	lds	r24, 0x00ED
     6d2:	8d 7f       	andi	r24, 0xFD	; 253
     6d4:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     6d8:	80 91 eb 00 	lds	r24, 0x00EB
     6dc:	81 60       	ori	r24, 0x01	; 1
     6de:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     6e2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     6e6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     6ea:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     6ee:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     6f2:	87 fd       	sbrc	r24, 7
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <Endpoint_ConfigureEndpoint_Prv+0x60>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	25 30       	cpi	r18, 0x05	; 5
     6fe:	80 f2       	brcs	.-96     	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     700:	3f 70       	andi	r19, 0x0F	; 15
     702:	30 93 e9 00 	sts	0x00E9, r19
     706:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     708:	08 95       	ret

0000070a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	06 2f       	mov	r16, r22
     714:	ec 01       	movw	r28, r24
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	2a c0       	rjmp	.+84     	; 0x76e <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     71a:	98 81       	ld	r25, Y
     71c:	99 23       	and	r25, r25
     71e:	29 f1       	breq	.+74     	; 0x76a <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     720:	6b 81       	ldd	r22, Y+3	; 0x03
     722:	e9 81       	ldd	r30, Y+1	; 0x01
     724:	fa 81       	ldd	r31, Y+2	; 0x02
     726:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     728:	89 2f       	mov	r24, r25
     72a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     72c:	85 30       	cpi	r24, 0x05	; 5
     72e:	18 f5       	brcc	.+70     	; 0x776 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     730:	22 30       	cpi	r18, 0x02	; 2
     732:	10 f4       	brcc	.+4      	; 0x738 <Endpoint_ConfigureEndpointTable+0x2e>
     734:	52 e0       	ldi	r21, 0x02	; 2
     736:	01 c0       	rjmp	.+2      	; 0x73a <Endpoint_ConfigureEndpointTable+0x30>
     738:	56 e0       	ldi	r21, 0x06	; 6
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	28 e0       	ldi	r18, 0x08	; 8
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	03 c0       	rjmp	.+6      	; 0x748 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     742:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     748:	2e 17       	cp	r18, r30
     74a:	3f 07       	cpc	r19, r31
     74c:	d0 f3       	brcs	.-12     	; 0x742 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     74e:	62 95       	swap	r22
     750:	66 0f       	add	r22, r22
     752:	66 0f       	add	r22, r22
     754:	60 7c       	andi	r22, 0xC0	; 192
     756:	99 1f       	adc	r25, r25
     758:	99 27       	eor	r25, r25
     75a:	99 1f       	adc	r25, r25
     75c:	69 2b       	or	r22, r25
     75e:	42 95       	swap	r20
     760:	40 7f       	andi	r20, 0xF0	; 240
     762:	45 2b       	or	r20, r21
     764:	9a df       	rcall	.-204    	; 0x69a <Endpoint_ConfigureEndpoint_Prv>
     766:	88 23       	and	r24, r24
     768:	31 f0       	breq	.+12     	; 0x776 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     76a:	1f 5f       	subi	r17, 0xFF	; 255
     76c:	25 96       	adiw	r28, 0x05	; 5
     76e:	10 17       	cp	r17, r16
     770:	a0 f2       	brcs	.-88     	; 0x71a <Endpoint_ConfigureEndpointTable+0x10>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	01 c0       	rjmp	.+2      	; 0x778 <Endpoint_ConfigureEndpointTable+0x6e>
     776:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	08 95       	ret

00000782 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     782:	80 91 20 02 	lds	r24, 0x0220
     786:	88 23       	and	r24, r24
     788:	9c f4       	brge	.+38     	; 0x7b0 <Endpoint_ClearStatusStage+0x2e>
     78a:	04 c0       	rjmp	.+8      	; 0x794 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     78c:	80 91 1f 02 	lds	r24, 0x021F
     790:	88 23       	and	r24, r24
     792:	b9 f0       	breq	.+46     	; 0x7c2 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     794:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     798:	82 ff       	sbrs	r24, 2
     79a:	f8 cf       	rjmp	.-16     	; 0x78c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     79c:	80 91 e8 00 	lds	r24, 0x00E8
     7a0:	8b 77       	andi	r24, 0x7B	; 123
     7a2:	80 93 e8 00 	sts	0x00E8, r24
     7a6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7a8:	80 91 1f 02 	lds	r24, 0x021F
     7ac:	88 23       	and	r24, r24
     7ae:	49 f0       	breq	.+18     	; 0x7c2 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7b0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7b4:	80 ff       	sbrs	r24, 0
     7b6:	f8 cf       	rjmp	.-16     	; 0x7a8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
     7bc:	8e 77       	andi	r24, 0x7E	; 126
     7be:	80 93 e8 00 	sts	0x00E8, r24
     7c2:	08 95       	ret

000007c4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7c4:	40 91 e4 00 	lds	r20, 0x00E4
     7c8:	50 91 e5 00 	lds	r21, 0x00E5
     7cc:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7ce:	80 91 ec 00 	lds	r24, 0x00EC
     7d2:	80 ff       	sbrs	r24, 0
     7d4:	24 c0       	rjmp	.+72     	; 0x81e <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7d6:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7da:	80 fd       	sbrc	r24, 0
     7dc:	1e c0       	rjmp	.+60     	; 0x81a <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7de:	80 91 1f 02 	lds	r24, 0x021F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7e2:	88 23       	and	r24, r24
     7e4:	11 f4       	brne	.+4      	; 0x7ea <Endpoint_WaitUntilReady+0x26>
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7ea:	85 30       	cpi	r24, 0x05	; 5
     7ec:	11 f4       	brne	.+4      	; 0x7f2 <Endpoint_WaitUntilReady+0x2e>
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7f2:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7f6:	85 ff       	sbrs	r24, 5
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <Endpoint_WaitUntilReady+0x3a>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	08 95       	ret
     7fe:	80 91 e4 00 	lds	r24, 0x00E4
     802:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     806:	84 17       	cp	r24, r20
     808:	95 07       	cpc	r25, r21
     80a:	09 f3       	breq	.-62     	; 0x7ce <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     80c:	22 23       	and	r18, r18
     80e:	11 f4       	brne	.+4      	; 0x814 <Endpoint_WaitUntilReady+0x50>
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	08 95       	ret
     814:	21 50       	subi	r18, 0x01	; 1
     816:	ac 01       	movw	r20, r24
     818:	da cf       	rjmp	.-76     	; 0x7ce <Endpoint_WaitUntilReady+0xa>
     81a:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     81c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     81e:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     822:	82 ff       	sbrs	r24, 2
     824:	dc cf       	rjmp	.-72     	; 0x7de <Endpoint_WaitUntilReady+0x1a>
     826:	f9 cf       	rjmp	.-14     	; 0x81a <Endpoint_WaitUntilReady+0x56>

00000828 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     828:	40 d0       	rcall	.+128    	; 0x8aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     82a:	42 d0       	rcall	.+132    	; 0x8b0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     82c:	80 91 d8 00 	lds	r24, 0x00D8
     830:	8f 77       	andi	r24, 0x7F	; 127
     832:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     836:	80 91 d8 00 	lds	r24, 0x00D8
     83a:	80 68       	ori	r24, 0x80	; 128
     83c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     840:	80 91 d8 00 	lds	r24, 0x00D8
     844:	8f 7d       	andi	r24, 0xDF	; 223
     846:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     84a:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     850:	09 b4       	in	r0, 0x29	; 41
     852:	00 fe       	sbrs	r0, 0
     854:	fd cf       	rjmp	.-6      	; 0x850 <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     856:	10 92 1f 02 	sts	0x021F, r1
	USB_Device_ConfigurationNumber  = 0;
     85a:	10 92 1b 02 	sts	0x021B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     85e:	10 92 1d 02 	sts	0x021D, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     862:	10 92 1c 02 	sts	0x021C, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	42 e0       	ldi	r20, 0x02	; 2
     86c:	16 df       	rcall	.-468    	; 0x69a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     86e:	80 91 e1 00 	lds	r24, 0x00E1
     872:	8e 7f       	andi	r24, 0xFE	; 254
     874:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     878:	80 91 e2 00 	lds	r24, 0x00E2
     87c:	81 60       	ori	r24, 0x01	; 1
     87e:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     882:	80 91 e2 00 	lds	r24, 0x00E2
     886:	88 60       	ori	r24, 0x08	; 8
     888:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     88c:	80 91 e0 00 	lds	r24, 0x00E0
     890:	8e 7f       	andi	r24, 0xFE	; 254
     892:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     896:	08 95       	ret

00000898 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     898:	e3 e6       	ldi	r30, 0x63	; 99
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	8e 7f       	andi	r24, 0xFE	; 254
     8a0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 1e 02 	sts	0x021E, r24

	USB_ResetInterface();
}
     8a8:	bf cf       	rjmp	.-130    	; 0x828 <USB_ResetInterface>

000008aa <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8aa:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     8ae:	08 95       	ret

000008b0 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8b0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     8b4:	08 95       	ret

000008b6 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     8b6:	1f 92       	push	r1
     8b8:	0f 92       	push	r0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	0f 92       	push	r0
     8be:	11 24       	eor	r1, r1
     8c0:	1f 93       	push	r17
     8c2:	2f 93       	push	r18
     8c4:	3f 93       	push	r19
     8c6:	4f 93       	push	r20
     8c8:	5f 93       	push	r21
     8ca:	6f 93       	push	r22
     8cc:	7f 93       	push	r23
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	af 93       	push	r26
     8d4:	bf 93       	push	r27
     8d6:	ef 93       	push	r30
     8d8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     8da:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     8de:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8e2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     8e6:	80 91 f0 00 	lds	r24, 0x00F0
     8ea:	87 7f       	andi	r24, 0xF7	; 247
     8ec:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     8f0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     8f2:	c2 d0       	rcall	.+388    	; 0xa78 <USB_Device_ProcessControlRequest>
     8f4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     8f8:	80 91 f0 00 	lds	r24, 0x00F0
     8fc:	88 60       	ori	r24, 0x08	; 8
     8fe:	80 93 f0 00 	sts	0x00F0, r24
     902:	1f 70       	andi	r17, 0x0F	; 15
     904:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	1f 91       	pop	r17
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	2f 93       	push	r18
     938:	3f 93       	push	r19
     93a:	4f 93       	push	r20
     93c:	5f 93       	push	r21
     93e:	6f 93       	push	r22
     940:	7f 93       	push	r23
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     94e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     952:	82 ff       	sbrs	r24, 2
     954:	0a c0       	rjmp	.+20     	; 0x96a <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     956:	80 91 e2 00 	lds	r24, 0x00E2
     95a:	82 ff       	sbrs	r24, 2
     95c:	06 c0       	rjmp	.+12     	; 0x96a <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     95e:	80 91 e1 00 	lds	r24, 0x00E1
     962:	8b 7f       	andi	r24, 0xFB	; 251
     964:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     968:	ef d1       	rcall	.+990    	; 0xd48 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     96a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     96e:	80 ff       	sbrs	r24, 0
     970:	17 c0       	rjmp	.+46     	; 0x9a0 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     972:	80 91 e2 00 	lds	r24, 0x00E2
     976:	80 ff       	sbrs	r24, 0
     978:	13 c0       	rjmp	.+38     	; 0x9a0 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     97a:	80 91 e2 00 	lds	r24, 0x00E2
     97e:	8e 7f       	andi	r24, 0xFE	; 254
     980:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     984:	80 91 e2 00 	lds	r24, 0x00E2
     988:	80 61       	ori	r24, 0x10	; 16
     98a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     98e:	80 91 d8 00 	lds	r24, 0x00D8
     992:	80 62       	ori	r24, 0x20	; 32
     994:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     998:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     99a:	10 92 1f 02 	sts	0x021F, r1
		EVENT_USB_Device_Disconnect();
     99e:	c2 dc       	rcall	.-1660   	; 0x324 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9a0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9a4:	84 ff       	sbrs	r24, 4
     9a6:	2c c0       	rjmp	.+88     	; 0xa00 <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9a8:	80 91 e2 00 	lds	r24, 0x00E2
     9ac:	84 ff       	sbrs	r24, 4
     9ae:	28 c0       	rjmp	.+80     	; 0xa00 <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9b0:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9b6:	09 b4       	in	r0, 0x29	; 41
     9b8:	00 fe       	sbrs	r0, 0
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9bc:	80 91 d8 00 	lds	r24, 0x00D8
     9c0:	8f 7d       	andi	r24, 0xDF	; 223
     9c2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9c6:	80 91 e1 00 	lds	r24, 0x00E1
     9ca:	8f 7e       	andi	r24, 0xEF	; 239
     9cc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9d0:	80 91 e2 00 	lds	r24, 0x00E2
     9d4:	8f 7e       	andi	r24, 0xEF	; 239
     9d6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9da:	80 91 e2 00 	lds	r24, 0x00E2
     9de:	81 60       	ori	r24, 0x01	; 1
     9e0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     9e4:	80 91 1b 02 	lds	r24, 0x021B
     9e8:	88 23       	and	r24, r24
     9ea:	31 f4       	brne	.+12     	; 0x9f8 <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9ec:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     9f0:	87 fd       	sbrc	r24, 7
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__vector_11+0xcc>
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__vector_11+0xce>
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	80 93 1f 02 	sts	0x021F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     9fe:	91 dc       	rcall	.-1758   	; 0x322 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a00:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a04:	83 ff       	sbrs	r24, 3
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a08:	80 91 e2 00 	lds	r24, 0x00E2
     a0c:	83 ff       	sbrs	r24, 3
     a0e:	23 c0       	rjmp	.+70     	; 0xa56 <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a10:	80 91 e1 00 	lds	r24, 0x00E1
     a14:	87 7f       	andi	r24, 0xF7	; 247
     a16:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	80 93 1f 02 	sts	0x021F, r24
		USB_Device_ConfigurationNumber = 0;
     a20:	10 92 1b 02 	sts	0x021B, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a24:	80 91 e1 00 	lds	r24, 0x00E1
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a2e:	80 91 e2 00 	lds	r24, 0x00E2
     a32:	8e 7f       	andi	r24, 0xFE	; 254
     a34:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a38:	80 91 e2 00 	lds	r24, 0x00E2
     a3c:	80 61       	ori	r24, 0x10	; 16
     a3e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	42 e0       	ldi	r20, 0x02	; 2
     a48:	28 de       	rcall	.-944    	; 0x69a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a4a:	80 91 f0 00 	lds	r24, 0x00F0
     a4e:	88 60       	ori	r24, 0x08	; 8
     a50:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a54:	79 d1       	rcall	.+754    	; 0xd48 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	bf 91       	pop	r27
     a5c:	af 91       	pop	r26
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	7f 91       	pop	r23
     a64:	6f 91       	pop	r22
     a66:	5f 91       	pop	r21
     a68:	4f 91       	pop	r20
     a6a:	3f 91       	pop	r19
     a6c:	2f 91       	pop	r18
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a78:	1f 93       	push	r17
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	ac 97       	sbiw	r28, 0x2c	; 44
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	e0 e2       	ldi	r30, 0x20	; 32
     a90:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a92:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a96:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a98:	22 e0       	ldi	r18, 0x02	; 2
     a9a:	e8 32       	cpi	r30, 0x28	; 40
     a9c:	f2 07       	cpc	r31, r18
     a9e:	c9 f7       	brne	.-14     	; 0xa92 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     aa0:	42 dc       	rcall	.-1916   	; 0x326 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     aa2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     aa6:	83 ff       	sbrs	r24, 3
     aa8:	37 c1       	rjmp	.+622    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     aaa:	80 91 20 02 	lds	r24, 0x0220

		switch (USB_ControlRequest.bRequest)
     aae:	30 91 21 02 	lds	r19, 0x0221
     ab2:	35 30       	cpi	r19, 0x05	; 5
     ab4:	09 f4       	brne	.+2      	; 0xab8 <USB_Device_ProcessControlRequest+0x40>
     ab6:	87 c0       	rjmp	.+270    	; 0xbc6 <USB_Device_ProcessControlRequest+0x14e>
     ab8:	36 30       	cpi	r19, 0x06	; 6
     aba:	40 f4       	brcc	.+16     	; 0xacc <USB_Device_ProcessControlRequest+0x54>
     abc:	31 30       	cpi	r19, 0x01	; 1
     abe:	c9 f1       	breq	.+114    	; 0xb32 <USB_Device_ProcessControlRequest+0xba>
     ac0:	31 30       	cpi	r19, 0x01	; 1
     ac2:	70 f0       	brcs	.+28     	; 0xae0 <USB_Device_ProcessControlRequest+0x68>
     ac4:	33 30       	cpi	r19, 0x03	; 3
     ac6:	09 f0       	breq	.+2      	; 0xaca <USB_Device_ProcessControlRequest+0x52>
     ac8:	27 c1       	rjmp	.+590    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
     aca:	33 c0       	rjmp	.+102    	; 0xb32 <USB_Device_ProcessControlRequest+0xba>
     acc:	38 30       	cpi	r19, 0x08	; 8
     ace:	09 f4       	brne	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0x5a>
     ad0:	f5 c0       	rjmp	.+490    	; 0xcbc <USB_Device_ProcessControlRequest+0x244>
     ad2:	39 30       	cpi	r19, 0x09	; 9
     ad4:	09 f4       	brne	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x60>
     ad6:	04 c1       	rjmp	.+520    	; 0xce0 <USB_Device_ProcessControlRequest+0x268>
     ad8:	36 30       	cpi	r19, 0x06	; 6
     ada:	09 f0       	breq	.+2      	; 0xade <USB_Device_ProcessControlRequest+0x66>
     adc:	1d c1       	rjmp	.+570    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
     ade:	96 c0       	rjmp	.+300    	; 0xc0c <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ae0:	80 38       	cpi	r24, 0x80	; 128
     ae2:	21 f0       	breq	.+8      	; 0xaec <USB_Device_ProcessControlRequest+0x74>
     ae4:	82 38       	cpi	r24, 0x82	; 130
     ae6:	09 f0       	breq	.+2      	; 0xaea <USB_Device_ProcessControlRequest+0x72>
     ae8:	17 c1       	rjmp	.+558    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
     aea:	08 c0       	rjmp	.+16     	; 0xafc <USB_Device_ProcessControlRequest+0x84>
     aec:	90 91 1c 02 	lds	r25, 0x021C
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     af0:	80 91 1d 02 	lds	r24, 0x021D
     af4:	88 23       	and	r24, r24
     af6:	99 f0       	breq	.+38     	; 0xb1e <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     af8:	92 60       	ori	r25, 0x02	; 2
     afa:	11 c0       	rjmp	.+34     	; 0xb1e <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     afc:	80 91 24 02 	lds	r24, 0x0224
     b00:	8f 70       	andi	r24, 0x0F	; 15
     b02:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b06:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	25 e0       	ldi	r18, 0x05	; 5
     b0e:	96 95       	lsr	r25
     b10:	87 95       	ror	r24
     b12:	2a 95       	dec	r18
     b14:	e1 f7       	brne	.-8      	; 0xb0e <USB_Device_ProcessControlRequest+0x96>
     b16:	98 2f       	mov	r25, r24
     b18:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b1a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b1e:	80 91 e8 00 	lds	r24, 0x00E8
     b22:	87 7f       	andi	r24, 0xF7	; 247
     b24:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b28:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     b2c:	10 92 f1 00 	sts	0x00F1, r1
     b30:	d0 c0       	rjmp	.+416    	; 0xcd2 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b32:	88 23       	and	r24, r24
     b34:	19 f0       	breq	.+6      	; 0xb3c <USB_Device_ProcessControlRequest+0xc4>
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	09 f0       	breq	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0xc4>
     b3a:	ee c0       	rjmp	.+476    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	8f 71       	andi	r24, 0x1F	; 31
     b40:	90 70       	andi	r25, 0x00	; 0
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	21 f0       	breq	.+8      	; 0xb4e <USB_Device_ProcessControlRequest+0xd6>
     b46:	02 97       	sbiw	r24, 0x02	; 2
     b48:	09 f0       	breq	.+2      	; 0xb4c <USB_Device_ProcessControlRequest+0xd4>
     b4a:	e6 c0       	rjmp	.+460    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
     b4c:	0c c0       	rjmp	.+24     	; 0xb66 <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b4e:	80 91 22 02 	lds	r24, 0x0222
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <USB_Device_ProcessControlRequest+0xe0>
     b56:	e0 c0       	rjmp	.+448    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b58:	10 92 1d 02 	sts	0x021D, r1
     b5c:	33 30       	cpi	r19, 0x03	; 3
     b5e:	69 f5       	brne	.+90     	; 0xbba <USB_Device_ProcessControlRequest+0x142>
     b60:	80 93 1d 02 	sts	0x021D, r24
     b64:	2a c0       	rjmp	.+84     	; 0xbba <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b66:	80 91 22 02 	lds	r24, 0x0222
     b6a:	88 23       	and	r24, r24
     b6c:	31 f5       	brne	.+76     	; 0xbba <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b6e:	20 91 24 02 	lds	r18, 0x0224
     b72:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b74:	09 f4       	brne	.+2      	; 0xb78 <USB_Device_ProcessControlRequest+0x100>
     b76:	d0 c0       	rjmp	.+416    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b78:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b7c:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b80:	80 ff       	sbrs	r24, 0
     b82:	1b c0       	rjmp	.+54     	; 0xbba <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b84:	33 30       	cpi	r19, 0x03	; 3
     b86:	21 f4       	brne	.+8      	; 0xb90 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b88:	80 91 eb 00 	lds	r24, 0x00EB
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	13 c0       	rjmp	.+38     	; 0xbb6 <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b90:	80 91 eb 00 	lds	r24, 0x00EB
     b94:	80 61       	ori	r24, 0x10	; 16
     b96:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <USB_Device_ProcessControlRequest+0x12c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	2a 95       	dec	r18
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <USB_Device_ProcessControlRequest+0x128>
     ba8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     bac:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bb0:	80 91 eb 00 	lds	r24, 0x00EB
     bb4:	88 60       	ori	r24, 0x08	; 8
     bb6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bba:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bbe:	80 91 e8 00 	lds	r24, 0x00E8
     bc2:	87 7f       	andi	r24, 0xF7	; 247
     bc4:	89 c0       	rjmp	.+274    	; 0xcd8 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bc6:	88 23       	and	r24, r24
     bc8:	09 f0       	breq	.+2      	; 0xbcc <USB_Device_ProcessControlRequest+0x154>
     bca:	a6 c0       	rjmp	.+332    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bcc:	10 91 22 02 	lds	r17, 0x0222
     bd0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bd2:	80 91 e3 00 	lds	r24, 0x00E3
     bd6:	80 78       	andi	r24, 0x80	; 128
     bd8:	81 2b       	or	r24, r17
     bda:	80 93 e3 00 	sts	0x00E3, r24
     bde:	80 91 e8 00 	lds	r24, 0x00E8
     be2:	87 7f       	andi	r24, 0xF7	; 247
     be4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     be8:	cc dd       	rcall	.-1128   	; 0x782 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bea:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     bee:	80 ff       	sbrs	r24, 0
     bf0:	fc cf       	rjmp	.-8      	; 0xbea <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     bf2:	80 91 e3 00 	lds	r24, 0x00E3
     bf6:	80 68       	ori	r24, 0x80	; 128
     bf8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bfc:	11 23       	and	r17, r17
     bfe:	11 f4       	brne	.+4      	; 0xc04 <USB_Device_ProcessControlRequest+0x18c>
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <USB_Device_ProcessControlRequest+0x18e>
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	80 93 1f 02 	sts	0x021F, r24
     c0a:	86 c0       	rjmp	.+268    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c0c:	80 58       	subi	r24, 0x80	; 128
     c0e:	82 30       	cpi	r24, 0x02	; 2
     c10:	08 f0       	brcs	.+2      	; 0xc14 <USB_Device_ProcessControlRequest+0x19c>
     c12:	82 c0       	rjmp	.+260    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c14:	80 91 22 02 	lds	r24, 0x0222
     c18:	90 91 23 02 	lds	r25, 0x0223
     c1c:	23 e0       	ldi	r18, 0x03	; 3
     c1e:	8c 3d       	cpi	r24, 0xDC	; 220
     c20:	92 07       	cpc	r25, r18
     c22:	09 f0       	breq	.+2      	; 0xc26 <USB_Device_ProcessControlRequest+0x1ae>
     c24:	33 c0       	rjmp	.+102    	; 0xc8c <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c2a:	8a e2       	ldi	r24, 0x2A	; 42
     c2c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c2e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c30:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c32:	de 01       	movw	r26, r28
     c34:	15 96       	adiw	r26, 0x05	; 5
     c36:	6e e0       	ldi	r22, 0x0E	; 14
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c3c:	11 e2       	ldi	r17, 0x21	; 33
     c3e:	e6 2f       	mov	r30, r22
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	10 93 57 00 	sts	0x0057, r17
     c46:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     c48:	40 ff       	sbrs	r20, 0
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
     c4c:	82 95       	swap	r24
     c4e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     c50:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     c52:	8f 70       	andi	r24, 0x0F	; 15
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c58:	8a 30       	cpi	r24, 0x0A	; 10
     c5a:	18 f0       	brcs	.+6      	; 0xc62 <USB_Device_ProcessControlRequest+0x1ea>
     c5c:	c9 01       	movw	r24, r18
     c5e:	c7 96       	adiw	r24, 0x37	; 55
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <USB_Device_ProcessControlRequest+0x1ee>
     c62:	c9 01       	movw	r24, r18
     c64:	c0 96       	adiw	r24, 0x30	; 48
     c66:	8d 93       	st	X+, r24
     c68:	9d 93       	st	X+, r25
     c6a:	4f 5f       	subi	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c6e:	44 31       	cpi	r20, 0x14	; 20
     c70:	51 05       	cpc	r21, r1
     c72:	29 f7       	brne	.-54     	; 0xc3e <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c74:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c76:	80 91 e8 00 	lds	r24, 0x00E8
     c7a:	87 7f       	andi	r24, 0xF7	; 247
     c7c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c80:	ce 01       	movw	r24, r28
     c82:	03 96       	adiw	r24, 0x03	; 3
     c84:	6a e2       	ldi	r22, 0x2A	; 42
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	49 dc       	rcall	.-1902   	; 0x51c <Endpoint_Write_Control_Stream_LE>
     c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <USB_Device_ProcessControlRequest+0x238>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c8c:	60 91 24 02 	lds	r22, 0x0224
     c90:	ae 01       	movw	r20, r28
     c92:	4f 5f       	subi	r20, 0xFF	; 255
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	14 dc       	rcall	.-2008   	; 0x4c0 <CALLBACK_USB_GetDescriptor>
     c98:	bc 01       	movw	r22, r24
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	09 f4       	brne	.+2      	; 0xca0 <USB_Device_ProcessControlRequest+0x228>
     c9e:	3c c0       	rjmp	.+120    	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
     ca0:	80 91 e8 00 	lds	r24, 0x00E8
     ca4:	87 7f       	andi	r24, 0xF7	; 247
     ca6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	94 dc       	rcall	.-1752   	; 0x5d8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cb0:	80 91 e8 00 	lds	r24, 0x00E8
     cb4:	8b 77       	andi	r24, 0x7B	; 123
     cb6:	80 93 e8 00 	sts	0x00E8, r24
     cba:	2e c0       	rjmp	.+92     	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     cbc:	80 38       	cpi	r24, 0x80	; 128
     cbe:	61 f5       	brne	.+88     	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc0:	80 91 e8 00 	lds	r24, 0x00E8
     cc4:	87 7f       	andi	r24, 0xF7	; 247
     cc6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cca:	80 91 1b 02 	lds	r24, 0x021B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cce:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cd2:	80 91 e8 00 	lds	r24, 0x00E8
     cd6:	8e 77       	andi	r24, 0x7E	; 126
     cd8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     cdc:	52 dd       	rcall	.-1372   	; 0x782 <Endpoint_ClearStatusStage>
     cde:	1c c0       	rjmp	.+56     	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ce0:	88 23       	and	r24, r24
     ce2:	d1 f4       	brne	.+52     	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ce4:	90 91 22 02 	lds	r25, 0x0222
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	b0 f4       	brcc	.+44     	; 0xd18 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cec:	80 91 e8 00 	lds	r24, 0x00E8
     cf0:	87 7f       	andi	r24, 0xF7	; 247
     cf2:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cf6:	90 93 1b 02 	sts	0x021B, r25

	Endpoint_ClearStatusStage();
     cfa:	43 dd       	rcall	.-1402   	; 0x782 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     cfc:	80 91 1b 02 	lds	r24, 0x021B
     d00:	88 23       	and	r24, r24
     d02:	31 f4       	brne	.+12     	; 0xd10 <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d04:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d08:	87 fd       	sbrc	r24, 7
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <USB_Device_ProcessControlRequest+0x298>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <USB_Device_ProcessControlRequest+0x29a>
     d10:	84 e0       	ldi	r24, 0x04	; 4
     d12:	80 93 1f 02 	sts	0x021F, r24

	EVENT_USB_Device_ConfigurationChanged();
     d16:	0a db       	rcall	.-2540   	; 0x32c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d18:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d1c:	83 ff       	sbrs	r24, 3
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d20:	80 91 e8 00 	lds	r24, 0x00E8
     d24:	87 7f       	andi	r24, 0xF7	; 247
     d26:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d2a:	80 91 eb 00 	lds	r24, 0x00EB
     d2e:	80 62       	ori	r24, 0x20	; 32
     d30:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d34:	ac 96       	adiw	r28, 0x2c	; 44
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	1f 91       	pop	r17
     d46:	08 95       	ret

00000d48 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d48:	08 95       	ret

00000d4a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d4a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d4c:	80 91 1f 02 	lds	r24, 0x021F
     d50:	88 23       	and	r24, r24
     d52:	71 f0       	breq	.+28     	; 0xd70 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d54:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d58:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d5c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d60:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d64:	83 ff       	sbrs	r24, 3
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
     d68:	87 de       	rcall	.-754    	; 0xa78 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d6a:	1f 70       	andi	r17, 0x0F	; 15
     d6c:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d70:	1f 91       	pop	r17
     d72:	08 95       	ret

00000d74 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d74:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d76:	80 91 1f 02 	lds	r24, 0x021F
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	29 f5       	brne	.+74     	; 0xdc8 <CDC_Device_ReceiveByte+0x54>
     d7e:	84 89       	ldd	r24, Z+20	; 0x14
     d80:	95 89       	ldd	r25, Z+21	; 0x15
     d82:	a6 89       	ldd	r26, Z+22	; 0x16
     d84:	b7 89       	ldd	r27, Z+23	; 0x17
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	a1 05       	cpc	r26, r1
     d8a:	b1 05       	cpc	r27, r1
     d8c:	e9 f0       	breq	.+58     	; 0xdc8 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d8e:	86 81       	ldd	r24, Z+6	; 0x06
     d90:	8f 70       	andi	r24, 0x0F	; 15
     d92:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d96:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     d9a:	82 ff       	sbrs	r24, 2
     d9c:	15 c0       	rjmp	.+42     	; 0xdc8 <CDC_Device_ReceiveByte+0x54>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d9e:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     da2:	88 23       	and	r24, r24
     da4:	19 f4       	brne	.+6      	; 0xdac <CDC_Device_ReceiveByte+0x38>
     da6:	2f ef       	ldi	r18, 0xFF	; 255
     da8:	3f ef       	ldi	r19, 0xFF	; 255
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     dac:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     db4:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     db8:	88 23       	and	r24, r24
     dba:	41 f4       	brne	.+16     	; 0xdcc <CDC_Device_ReceiveByte+0x58>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dbc:	80 91 e8 00 	lds	r24, 0x00E8
     dc0:	8b 77       	andi	r24, 0x7B	; 123
     dc2:	80 93 e8 00 	sts	0x00E8, r24
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <CDC_Device_ReceiveByte+0x58>
     dc8:	2f ef       	ldi	r18, 0xFF	; 255
     dca:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     dcc:	c9 01       	movw	r24, r18
     dce:	08 95       	ret

00000dd0 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
     dd0:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
     dd2:	2e e0       	ldi	r18, 0x0E	; 14
     dd4:	db 01       	movw	r26, r22
     dd6:	1d 92       	st	X+, r1
     dd8:	2a 95       	dec	r18
     dda:	e9 f7       	brne	.-6      	; 0xdd6 <CDC_Device_CreateStream+0x6>
     ddc:	23 e0       	ldi	r18, 0x03	; 3
     dde:	23 83       	std	Z+3, r18	; 0x03
     de0:	22 e7       	ldi	r18, 0x72	; 114
     de2:	37 e0       	ldi	r19, 0x07	; 7
     de4:	31 87       	std	Z+9, r19	; 0x09
     de6:	20 87       	std	Z+8, r18	; 0x08
     de8:	2b ef       	ldi	r18, 0xFB	; 251
     dea:	36 e0       	ldi	r19, 0x06	; 6
     dec:	33 87       	std	Z+11, r19	; 0x0b
     dee:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     df0:	95 87       	std	Z+13, r25	; 0x0d
     df2:	84 87       	std	Z+12, r24	; 0x0c
}
     df4:	08 95       	ret

00000df6 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     df6:	fc 01       	movw	r30, r24
     df8:	84 85       	ldd	r24, Z+12	; 0x0c
     dfa:	95 85       	ldd	r25, Z+13	; 0x0d
     dfc:	bb df       	rcall	.-138    	; 0xd74 <CDC_Device_ReceiveByte>
     dfe:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
     e00:	97 ff       	sbrs	r25, 7
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <CDC_Device_getchar+0x12>
     e04:	2e ef       	ldi	r18, 0xFE	; 254
     e06:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
     e08:	c9 01       	movw	r24, r18
     e0a:	08 95       	ret

00000e0c <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     e0c:	08 95       	ret

00000e0e <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e0e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e10:	80 91 1f 02 	lds	r24, 0x021F
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	19 f5       	brne	.+70     	; 0xe5e <CDC_Device_Flush+0x50>
     e18:	84 89       	ldd	r24, Z+20	; 0x14
     e1a:	95 89       	ldd	r25, Z+21	; 0x15
     e1c:	a6 89       	ldd	r26, Z+22	; 0x16
     e1e:	b7 89       	ldd	r27, Z+23	; 0x17
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	a1 05       	cpc	r26, r1
     e24:	b1 05       	cpc	r27, r1
     e26:	d9 f0       	breq	.+54     	; 0xe5e <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	8f 70       	andi	r24, 0x0F	; 15
     e2c:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e30:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     e34:	88 23       	and	r24, r24
     e36:	a9 f0       	breq	.+42     	; 0xe62 <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e38:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e3c:	80 91 e8 00 	lds	r24, 0x00E8
     e40:	8e 77       	andi	r24, 0x7E	; 126
     e42:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e46:	95 fd       	sbrc	r25, 5
     e48:	0c c0       	rjmp	.+24     	; 0xe62 <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e4a:	bc dc       	rcall	.-1672   	; 0x7c4 <Endpoint_WaitUntilReady>
     e4c:	98 2f       	mov	r25, r24
     e4e:	88 23       	and	r24, r24
     e50:	49 f4       	brne	.+18     	; 0xe64 <CDC_Device_Flush+0x56>
     e52:	80 91 e8 00 	lds	r24, 0x00E8
     e56:	8e 77       	andi	r24, 0x7E	; 126
     e58:	80 93 e8 00 	sts	0x00E8, r24
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <CDC_Device_Flush+0x56>
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <CDC_Device_Flush+0x56>
     e62:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e64:	89 2f       	mov	r24, r25
     e66:	08 95       	ret

00000e68 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e68:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e6a:	80 91 1f 02 	lds	r24, 0x021F
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	91 f4       	brne	.+36     	; 0xe96 <CDC_Device_USBTask+0x2e>
     e72:	84 89       	ldd	r24, Z+20	; 0x14
     e74:	95 89       	ldd	r25, Z+21	; 0x15
     e76:	a6 89       	ldd	r26, Z+22	; 0x16
     e78:	b7 89       	ldd	r27, Z+23	; 0x17
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	a1 05       	cpc	r26, r1
     e7e:	b1 05       	cpc	r27, r1
     e80:	51 f0       	breq	.+20     	; 0xe96 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e82:	81 81       	ldd	r24, Z+1	; 0x01
     e84:	8f 70       	andi	r24, 0x0F	; 15
     e86:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e8a:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     e8e:	80 ff       	sbrs	r24, 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
     e92:	cf 01       	movw	r24, r30
     e94:	bc cf       	rjmp	.-136    	; 0xe0e <CDC_Device_Flush>
     e96:	08 95       	ret

00000e98 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     e98:	1f 93       	push	r17
     e9a:	fc 01       	movw	r30, r24
     e9c:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e9e:	80 91 1f 02 	lds	r24, 0x021F
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	e1 f4       	brne	.+56     	; 0xede <CDC_Device_SendByte+0x46>
     ea6:	84 89       	ldd	r24, Z+20	; 0x14
     ea8:	95 89       	ldd	r25, Z+21	; 0x15
     eaa:	a6 89       	ldd	r26, Z+22	; 0x16
     eac:	b7 89       	ldd	r27, Z+23	; 0x17
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	a1 05       	cpc	r26, r1
     eb2:	b1 05       	cpc	r27, r1
     eb4:	a1 f0       	breq	.+40     	; 0xede <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
     eb8:	8f 70       	andi	r24, 0x0F	; 15
     eba:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ebe:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     ec2:	85 fd       	sbrc	r24, 5
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec6:	80 91 e8 00 	lds	r24, 0x00E8
     eca:	8e 77       	andi	r24, 0x7E	; 126
     ecc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ed0:	79 dc       	rcall	.-1806   	; 0x7c4 <Endpoint_WaitUntilReady>
     ed2:	88 23       	and	r24, r24
     ed4:	29 f4       	brne	.+10     	; 0xee0 <CDC_Device_SendByte+0x48>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ed6:	10 93 f1 00 	sts	0x00F1, r17
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <CDC_Device_SendByte+0x48>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     ede:	82 e0       	ldi	r24, 0x02	; 2
}
     ee0:	1f 91       	pop	r17
     ee2:	08 95       	ret

00000ee4 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
     ee4:	28 2f       	mov	r18, r24
     ee6:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     ee8:	84 85       	ldd	r24, Z+12	; 0x0c
     eea:	95 85       	ldd	r25, Z+13	; 0x0d
     eec:	62 2f       	mov	r22, r18
     eee:	d4 df       	rcall	.-88     	; 0xe98 <CDC_Device_SendByte>
     ef0:	88 23       	and	r24, r24
     ef2:	19 f4       	brne	.+6      	; 0xefa <CDC_Device_putchar+0x16>
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <CDC_Device_putchar+0x1a>
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	3f ef       	ldi	r19, 0xFF	; 255
}
     efe:	c9 01       	movw	r24, r18
     f00:	08 95       	ret

00000f02 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     f08:	40 96       	adiw	r24, 0x10	; 16
     f0a:	fc 01       	movw	r30, r24
     f0c:	8b e0       	ldi	r24, 0x0B	; 11
     f0e:	df 01       	movw	r26, r30
     f10:	1d 92       	st	X+, r1
     f12:	8a 95       	dec	r24
     f14:	e9 f7       	brne	.-6      	; 0xf10 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     f1a:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	f1 db       	rcall	.-2078   	; 0x70a <Endpoint_ConfigureEndpointTable>
     f28:	88 23       	and	r24, r24
     f2a:	71 f0       	breq	.+28     	; 0xf48 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     f2c:	ce 01       	movw	r24, r28
     f2e:	06 96       	adiw	r24, 0x06	; 6
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	eb db       	rcall	.-2090   	; 0x70a <Endpoint_ConfigureEndpointTable>
     f34:	88 23       	and	r24, r24
     f36:	41 f0       	breq	.+16     	; 0xf48 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     f38:	ce 01       	movw	r24, r28
     f3a:	0b 96       	adiw	r24, 0x0b	; 11
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	e5 db       	rcall	.-2102   	; 0x70a <Endpoint_ConfigureEndpointTable>
     f40:	88 23       	and	r24, r24
     f42:	19 f0       	breq	.+6      	; 0xf4a <CDC_Device_ConfigureEndpoints+0x48>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <CDC_Device_ConfigureEndpoints+0x48>
     f48:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f56:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f5a:	83 ff       	sbrs	r24, 3
     f5c:	a3 c0       	rjmp	.+326    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f5e:	88 81       	ld	r24, Y
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	20 91 24 02 	lds	r18, 0x0224
     f66:	30 91 25 02 	lds	r19, 0x0225
     f6a:	28 17       	cp	r18, r24
     f6c:	39 07       	cpc	r19, r25
     f6e:	09 f0       	breq	.+2      	; 0xf72 <CDC_Device_ProcessControlRequest+0x22>
     f70:	99 c0       	rjmp	.+306    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
     f72:	80 91 21 02 	lds	r24, 0x0221
     f76:	81 32       	cpi	r24, 0x21	; 33
     f78:	69 f0       	breq	.+26     	; 0xf94 <CDC_Device_ProcessControlRequest+0x44>
     f7a:	82 32       	cpi	r24, 0x22	; 34
     f7c:	20 f4       	brcc	.+8      	; 0xf86 <CDC_Device_ProcessControlRequest+0x36>
     f7e:	80 32       	cpi	r24, 0x20	; 32
     f80:	09 f0       	breq	.+2      	; 0xf84 <CDC_Device_ProcessControlRequest+0x34>
     f82:	90 c0       	rjmp	.+288    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
     f84:	3c c0       	rjmp	.+120    	; 0xffe <CDC_Device_ProcessControlRequest+0xae>
     f86:	82 32       	cpi	r24, 0x22	; 34
     f88:	09 f4       	brne	.+2      	; 0xf8c <CDC_Device_ProcessControlRequest+0x3c>
     f8a:	6b c0       	rjmp	.+214    	; 0x1062 <CDC_Device_ProcessControlRequest+0x112>
     f8c:	83 32       	cpi	r24, 0x23	; 35
     f8e:	09 f0       	breq	.+2      	; 0xf92 <CDC_Device_ProcessControlRequest+0x42>
     f90:	89 c0       	rjmp	.+274    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
     f92:	7a c0       	rjmp	.+244    	; 0x1088 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f94:	80 91 20 02 	lds	r24, 0x0220
     f98:	81 3a       	cpi	r24, 0xA1	; 161
     f9a:	09 f0       	breq	.+2      	; 0xf9e <CDC_Device_ProcessControlRequest+0x4e>
     f9c:	83 c0       	rjmp	.+262    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
     fa2:	87 7f       	andi	r24, 0xF7	; 247
     fa4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fa8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     fac:	80 ff       	sbrs	r24, 0
     fae:	fc cf       	rjmp	.-8      	; 0xfa8 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     fb0:	8c 89       	ldd	r24, Y+20	; 0x14
     fb2:	9d 89       	ldd	r25, Y+21	; 0x15
     fb4:	ae 89       	ldd	r26, Y+22	; 0x16
     fb6:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     fb8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     fbc:	29 2f       	mov	r18, r25
     fbe:	3a 2f       	mov	r19, r26
     fc0:	4b 2f       	mov	r20, r27
     fc2:	55 27       	eor	r21, r21
     fc4:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     fc8:	9d 01       	movw	r18, r26
     fca:	44 27       	eor	r20, r20
     fcc:	55 27       	eor	r21, r21
     fce:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     fd2:	8b 2f       	mov	r24, r27
     fd4:	99 27       	eor	r25, r25
     fd6:	aa 27       	eor	r26, r26
     fd8:	bb 27       	eor	r27, r27
     fda:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     fde:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fe0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     fe4:	89 8d       	ldd	r24, Y+25	; 0x19
     fe6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     fea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fec:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	8e 77       	andi	r24, 0x7E	; 126
     ff6:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ffa:	c3 db       	rcall	.-2170   	; 0x782 <Endpoint_ClearStatusStage>
     ffc:	53 c0       	rjmp	.+166    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ffe:	80 91 20 02 	lds	r24, 0x0220
    1002:	81 32       	cpi	r24, 0x21	; 33
    1004:	09 f0       	breq	.+2      	; 0x1008 <CDC_Device_ProcessControlRequest+0xb8>
    1006:	4e c0       	rjmp	.+156    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1008:	80 91 e8 00 	lds	r24, 0x00E8
    100c:	87 7f       	andi	r24, 0xF7	; 247
    100e:	80 93 e8 00 	sts	0x00E8, r24
    1012:	05 c0       	rjmp	.+10     	; 0x101e <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1014:	80 91 1f 02 	lds	r24, 0x021F
    1018:	88 23       	and	r24, r24
    101a:	09 f4       	brne	.+2      	; 0x101e <CDC_Device_ProcessControlRequest+0xce>
    101c:	43 c0       	rjmp	.+134    	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    101e:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1022:	82 ff       	sbrs	r24, 2
    1024:	f7 cf       	rjmp	.-18     	; 0x1014 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1026:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    102a:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    102e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    1032:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1036:	8c 8b       	std	Y+20, r24	; 0x14
    1038:	9d 8b       	std	Y+21, r25	; 0x15
    103a:	2e 8b       	std	Y+22, r18	; 0x16
    103c:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    103e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1042:	88 8f       	std	Y+24, r24	; 0x18
    1044:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1048:	89 8f       	std	Y+25, r24	; 0x19
    104a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    104e:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1050:	80 91 e8 00 	lds	r24, 0x00E8
    1054:	8b 77       	andi	r24, 0x7B	; 123
    1056:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    105a:	93 db       	rcall	.-2266   	; 0x782 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    105c:	ce 01       	movw	r24, r28
    105e:	d6 de       	rcall	.-596    	; 0xe0c <CDC_Device_Event_Stub>
    1060:	21 c0       	rjmp	.+66     	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1062:	80 91 20 02 	lds	r24, 0x0220
    1066:	81 32       	cpi	r24, 0x21	; 33
    1068:	e9 f4       	brne	.+58     	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    106a:	80 91 e8 00 	lds	r24, 0x00E8
    106e:	87 7f       	andi	r24, 0xF7	; 247
    1070:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1074:	86 db       	rcall	.-2292   	; 0x782 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1076:	80 91 22 02 	lds	r24, 0x0222
    107a:	90 91 23 02 	lds	r25, 0x0223
    107e:	99 8b       	std	Y+17, r25	; 0x11
    1080:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1082:	ce 01       	movw	r24, r28
    1084:	c3 de       	rcall	.-634    	; 0xe0c <CDC_Device_Event_Stub>
    1086:	0e c0       	rjmp	.+28     	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1088:	80 91 20 02 	lds	r24, 0x0220
    108c:	81 32       	cpi	r24, 0x21	; 33
    108e:	51 f4       	brne	.+20     	; 0x10a4 <CDC_Device_ProcessControlRequest+0x154>
    1090:	80 91 e8 00 	lds	r24, 0x00E8
    1094:	87 7f       	andi	r24, 0xF7	; 247
    1096:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    109a:	73 db       	rcall	.-2330   	; 0x782 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    109c:	ce 01       	movw	r24, r28
    109e:	60 91 22 02 	lds	r22, 0x0222
    10a2:	b4 de       	rcall	.-664    	; 0xe0c <CDC_Device_Event_Stub>
			}

			break;
	}
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <fputs>:
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	7c 01       	movw	r14, r24
    10b8:	8b 01       	movw	r16, r22
    10ba:	db 01       	movw	r26, r22
    10bc:	13 96       	adiw	r26, 0x03	; 3
    10be:	8c 91       	ld	r24, X
    10c0:	81 fd       	sbrc	r24, 1
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <fputs+0x20>
    10c4:	cf ef       	ldi	r28, 0xFF	; 255
    10c6:	df ef       	ldi	r29, 0xFF	; 255
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <fputs+0x46>
    10ca:	c0 e0       	ldi	r28, 0x00	; 0
    10cc:	d0 e0       	ldi	r29, 0x00	; 0
    10ce:	0b c0       	rjmp	.+22     	; 0x10e6 <fputs+0x3c>
    10d0:	d8 01       	movw	r26, r16
    10d2:	18 96       	adiw	r26, 0x08	; 8
    10d4:	ed 91       	ld	r30, X+
    10d6:	fc 91       	ld	r31, X
    10d8:	19 97       	sbiw	r26, 0x09	; 9
    10da:	b8 01       	movw	r22, r16
    10dc:	09 95       	icall
    10de:	89 2b       	or	r24, r25
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <fputs+0x3c>
    10e2:	cf ef       	ldi	r28, 0xFF	; 255
    10e4:	df ef       	ldi	r29, 0xFF	; 255
    10e6:	f7 01       	movw	r30, r14
    10e8:	81 91       	ld	r24, Z+
    10ea:	7f 01       	movw	r14, r30
    10ec:	88 23       	and	r24, r24
    10ee:	81 f7       	brne	.-32     	; 0x10d0 <fputs+0x26>
    10f0:	ce 01       	movw	r24, r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	e6 e0       	ldi	r30, 0x06	; 6
    10f8:	0c c0       	rjmp	.+24     	; 0x1112 <__epilogue_restores__+0x18>

000010fa <__epilogue_restores__>:
    10fa:	2a 88       	ldd	r2, Y+18	; 0x12
    10fc:	39 88       	ldd	r3, Y+17	; 0x11
    10fe:	48 88       	ldd	r4, Y+16	; 0x10
    1100:	5f 84       	ldd	r5, Y+15	; 0x0f
    1102:	6e 84       	ldd	r6, Y+14	; 0x0e
    1104:	7d 84       	ldd	r7, Y+13	; 0x0d
    1106:	8c 84       	ldd	r8, Y+12	; 0x0c
    1108:	9b 84       	ldd	r9, Y+11	; 0x0b
    110a:	aa 84       	ldd	r10, Y+10	; 0x0a
    110c:	b9 84       	ldd	r11, Y+9	; 0x09
    110e:	c8 84       	ldd	r12, Y+8	; 0x08
    1110:	df 80       	ldd	r13, Y+7	; 0x07
    1112:	ee 80       	ldd	r14, Y+6	; 0x06
    1114:	fd 80       	ldd	r15, Y+5	; 0x05
    1116:	0c 81       	ldd	r16, Y+4	; 0x04
    1118:	1b 81       	ldd	r17, Y+3	; 0x03
    111a:	aa 81       	ldd	r26, Y+2	; 0x02
    111c:	b9 81       	ldd	r27, Y+1	; 0x01
    111e:	ce 0f       	add	r28, r30
    1120:	d1 1d       	adc	r29, r1
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	ed 01       	movw	r28, r26
    112e:	08 95       	ret

00001130 <_exit>:
    1130:	f8 94       	cli

00001132 <__stop_program>:
    1132:	ff cf       	rjmp	.-2      	; 0x1132 <__stop_program>
