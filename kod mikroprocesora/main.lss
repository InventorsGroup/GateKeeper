
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000013d2  00001466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080015c  0080015c  000014c2  2**0
                  ALLOC
  3 .debug_aranges 000004d8  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d40  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008343  00000000  00000000  000026da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002225  00000000  00000000  0000aa1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006437  00000000  00000000  0000cc42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000770  00000000  00000000  0001307c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003412  00000000  00000000  000137ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000034d8  00000000  00000000  00016bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000688  00000000  00000000  0001a0d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    while (*s)
      uart_put(*s++);
}

unsigned char uart_get( void ) 
{
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       2:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__vector_2>
       a:	00 00       	nop
       c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
       e:	00 00       	nop
      10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
      12:	00 00       	nop
      14:	93 c0       	rjmp	.+294    	; 0x13c <__bad_interrupt>
      16:	00 00       	nop
      18:	91 c0       	rjmp	.+290    	; 0x13c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
      1e:	00 00       	nop
      20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
      26:	00 00       	nop
      28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c5       	rjmp	.+2762   	; 0xaf8 <__vector_11>
      2e:	00 00       	nop
      30:	28 c5       	rjmp	.+2640   	; 0xa82 <__vector_12>
      32:	00 00       	nop
      34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
      36:	00 00       	nop
      38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
      42:	00 00       	nop
      44:	7b c0       	rjmp	.+246    	; 0x13c <__bad_interrupt>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__vector_19>
      4e:	00 00       	nop
      50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
      52:	00 00       	nop
      54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
      56:	00 00       	nop
      58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bf c1       	rjmp	.+894    	; 0x3dc <__vector_23>
      5e:	00 00       	nop
      60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
      66:	00 00       	nop
      68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
      6e:	00 00       	nop
      70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      84:	dc 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      96:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      b6:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
      c8:	20 03 49 00 6e 00 76 00 65 00 6e 00 74 00 6f 00      .I.n.v.e.n.t.o.
      d8:	72 00 73 00 20 00 47 00 72 00 6f 00 75 00 70 00     r.s. .G.r.o.u.p.
      e8:	00 00                                               ..

000000ea <ProductString>:
      ea:	18 03 47 00 61 00 74 00 65 00 20 00 4b 00 65 00     ..G.a.t.e. .K.e.
      fa:	65 00 70 00 65 00 72 00 00 00                       e.p.e.r...

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d2 e0       	ldi	r29, 0x02	; 2
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	11 e0       	ldi	r17, 0x01	; 1
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	e2 ed       	ldi	r30, 0xD2	; 210
     118:	f3 e1       	ldi	r31, 0x13	; 19
     11a:	02 c0       	rjmp	.+4      	; 0x120 <.do_copy_data_start>

0000011c <.do_copy_data_loop>:
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0

00000120 <.do_copy_data_start>:
     120:	ac 35       	cpi	r26, 0x5C	; 92
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <.do_copy_data_loop>

00000126 <__do_clear_bss>:
     126:	12 e0       	ldi	r17, 0x02	; 2
     128:	ac e5       	ldi	r26, 0x5C	; 92
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a5 34       	cpi	r26, 0x45	; 69
     132:	b1 07       	cpc	r27, r17
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	e3 d1       	rcall	.+966    	; 0x4fe <main>
     138:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <_exit>

0000013c <__bad_interrupt>:
     13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <uart_put>:
					},
			},
	};
	
void uart_put( unsigned char data )
{
     13e:	98 2f       	mov	r25, r24
	 while(!(UCSR1A & (1<<UDRE1)));
     140:	80 91 c8 00 	lds	r24, 0x00C8
     144:	85 ff       	sbrs	r24, 5
     146:	fc cf       	rjmp	.-8      	; 0x140 <uart_put+0x2>
		UDR1=data;		        
     148:	90 93 ce 00 	sts	0x00CE, r25
}
     14c:	08 95       	ret

0000014e <uart_puts>:

void uart_puts(const char *s )
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	ec 01       	movw	r28, r24
     154:	02 c0       	rjmp	.+4      	; 0x15a <uart_puts+0xc>
    while (*s)
      uart_put(*s++);
     156:	21 96       	adiw	r28, 0x01	; 1
     158:	f2 df       	rcall	.-28     	; 0x13e <uart_put>
		UDR1=data;		        
}

void uart_puts(const char *s )
{
    while (*s)
     15a:	88 81       	ld	r24, Y
     15c:	88 23       	and	r24, r24
     15e:	d9 f7       	brne	.-10     	; 0x156 <uart_puts+0x8>
      uart_put(*s++);
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <__vector_19>:
volatile static bool bDebug = false;
volatile int16_t iRead = 0;

static volatile int8_t tim_cnter = 0;
ISR(TIMER0_COMPA_vect)
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
	tim_cnter++;
     174:	80 91 61 01 	lds	r24, 0x0161
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	80 93 61 01 	sts	0x0161, r24
	if(tim_cnter > 100)
     17e:	80 91 61 01 	lds	r24, 0x0161
     182:	85 36       	cpi	r24, 0x65	; 101
     184:	34 f0       	brlt	.+12     	; 0x192 <__vector_19+0x2c>
	{
		PORTB ^= (1 << PB6);
     186:	85 b1       	in	r24, 0x05	; 5
     188:	90 e4       	ldi	r25, 0x40	; 64
     18a:	89 27       	eor	r24, r25
     18c:	85 b9       	out	0x05, r24	; 5
		tim_cnter = 0;
     18e:	10 92 61 01 	sts	0x0161, r1
	}
}
     192:	9f 91       	pop	r25
     194:	8f 91       	pop	r24
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <__vector_2>:

ISR(INT1_vect)
{
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	2f 93       	push	r18
     1ac:	3f 93       	push	r19
     1ae:	4f 93       	push	r20
     1b0:	5f 93       	push	r21
     1b2:	6f 93       	push	r22
     1b4:	7f 93       	push	r23
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	af 93       	push	r26
     1bc:	bf 93       	push	r27
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
	uart_puts("ATI\r");
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	c3 df       	rcall	.-122    	; 0x14e <uart_puts>
}
     1c8:	ff 91       	pop	r31
     1ca:	ef 91       	pop	r30
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <openGate>:

void openGate()
{
	PORTC |= (1 << PC7);
     1ea:	47 9a       	sbi	0x08, 7	; 8
     1ec:	80 e3       	ldi	r24, 0x30	; 48
     1ee:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	28 ec       	ldi	r18, 0xC8	; 200
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	f9 01       	movw	r30, r18
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <openGate+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <openGate+0xa>
	_delay_ms(3000);
	PORTC &= ~(1 << PC7);
     1fe:	47 98       	cbi	0x08, 7	; 8
}
     200:	08 95       	ret

00000202 <stringCheck>:
}

static volatile int8_t stringBuffer[100];
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
     202:	dc 01       	movw	r26, r24
	int i = 1;
	
	while(*s != phoneBuffer[i])
     204:	8c 91       	ld	r24, X
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	0b c0       	rjmp	.+22     	; 0x226 <stringCheck+0x24>
	{
		i++;
     210:	4f 5f       	subi	r20, 0xFF	; 255
     212:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
     214:	80 91 5b 01 	lds	r24, 0x015B
     218:	99 27       	eor	r25, r25
     21a:	87 fd       	sbrc	r24, 7
     21c:	90 95       	com	r25
     21e:	48 17       	cp	r20, r24
     220:	59 07       	cpc	r21, r25
     222:	0c f0       	brlt	.+2      	; 0x226 <stringCheck+0x24>
     224:	45 c0       	rjmp	.+138    	; 0x2b0 <stringCheck+0xae>
static volatile int8_t stringCnter = 0;
unsigned char stringCheck(char *s)
{
	int i = 1;
	
	while(*s != phoneBuffer[i])
     226:	fa 01       	movw	r30, r20
     228:	e0 59       	subi	r30, 0x90	; 144
     22a:	fe 4f       	sbci	r31, 0xFE	; 254
     22c:	80 81       	ld	r24, Z
     22e:	99 27       	eor	r25, r25
     230:	87 fd       	sbrc	r24, 7
     232:	90 95       	com	r25
     234:	28 17       	cp	r18, r24
     236:	39 07       	cpc	r19, r25
     238:	59 f7       	brne	.-42     	; 0x210 <stringCheck+0xe>
     23a:	16 c0       	rjmp	.+44     	; 0x268 <stringCheck+0x66>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     23c:	fa 01       	movw	r30, r20
     23e:	e0 59       	subi	r30, 0x90	; 144
     240:	fe 4f       	sbci	r31, 0xFE	; 254
     242:	80 81       	ld	r24, Z
     244:	99 27       	eor	r25, r25
     246:	87 fd       	sbrc	r24, 7
     248:	90 95       	com	r25
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	82 17       	cp	r24, r18
     24e:	93 07       	cpc	r25, r19
     250:	79 f5       	brne	.+94     	; 0x2b0 <stringCheck+0xae>
			return 0;
		i++;			
     252:	4f 5f       	subi	r20, 0xFF	; 255
     254:	5f 4f       	sbci	r21, 0xFF	; 255
		
		if(i > bufferLength-1)
     256:	80 91 5b 01 	lds	r24, 0x015B
     25a:	99 27       	eor	r25, r25
     25c:	87 fd       	sbrc	r24, 7
     25e:	90 95       	com	r25
     260:	48 17       	cp	r20, r24
     262:	59 07       	cpc	r21, r25
     264:	2c f5       	brge	.+74     	; 0x2b0 <stringCheck+0xae>
			return 0;
	}
	while (*s)
	{		
			
		if(phoneBuffer[i] != *s++)
     266:	11 96       	adiw	r26, 0x01	; 1
	{
		i++;
		if(i > bufferLength-1)
			return 0;
	}
	while (*s)
     268:	2c 91       	ld	r18, X
     26a:	22 23       	and	r18, r18
     26c:	39 f7       	brne	.-50     	; 0x23c <stringCheck+0x3a>
		
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
     26e:	10 92 60 01 	sts	0x0160, r1
     272:	13 c0       	rjmp	.+38     	; 0x29a <stringCheck+0x98>
	while(i < bufferLength -1)
	{
		stringBuffer[stringCnter] = phoneBuffer[i];
     274:	e0 91 60 01 	lds	r30, 0x0160
     278:	ff 27       	eor	r31, r31
     27a:	e7 fd       	sbrc	r30, 7
     27c:	f0 95       	com	r31
     27e:	da 01       	movw	r26, r20
     280:	a0 59       	subi	r26, 0x90	; 144
     282:	be 4f       	sbci	r27, 0xFE	; 254
     284:	8c 91       	ld	r24, X
     286:	ec 52       	subi	r30, 0x2C	; 44
     288:	fe 4f       	sbci	r31, 0xFE	; 254
     28a:	80 83       	st	Z, r24
		stringCnter++;
     28c:	80 91 60 01 	lds	r24, 0x0160
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	80 93 60 01 	sts	0x0160, r24
		i++;
     296:	4f 5f       	subi	r20, 0xFF	; 255
     298:	5f 4f       	sbci	r21, 0xFF	; 255
		if(i > bufferLength-1)
			return 0;
	}
	
	stringCnter = 0;
	while(i < bufferLength -1)
     29a:	80 91 5b 01 	lds	r24, 0x015B
     29e:	99 27       	eor	r25, r25
     2a0:	87 fd       	sbrc	r24, 7
     2a2:	90 95       	com	r25
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	48 17       	cp	r20, r24
     2a8:	59 07       	cpc	r21, r25
     2aa:	24 f3       	brlt	.-56     	; 0x274 <stringCheck+0x72>
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	08 95       	ret
     2b0:	80 e0       	ldi	r24, 0x00	; 0
		stringCnter++;
		i++;
	}
	
	return 1;
}
     2b2:	08 95       	ret

000002b4 <findRinBuff>:

unsigned char findRinBuff()
{		
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <findRinBuff+0x10>
	for(unsigned char i = 1; i < bufferLength; i++)
	{
		if(phoneBuffer[i] == 0x0D)
     2b8:	e0 59       	subi	r30, 0x90	; 144
     2ba:	fe 4f       	sbci	r31, 0xFE	; 254
     2bc:	80 81       	ld	r24, Z
     2be:	8d 30       	cpi	r24, 0x0D	; 13
     2c0:	61 f0       	breq	.+24     	; 0x2da <findRinBuff+0x26>
	return 1;
}

unsigned char findRinBuff()
{		
	for(unsigned char i = 1; i < bufferLength; i++)
     2c2:	2f 5f       	subi	r18, 0xFF	; 255
     2c4:	e2 2f       	mov	r30, r18
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 91 5b 01 	lds	r24, 0x015B
     2cc:	99 27       	eor	r25, r25
     2ce:	87 fd       	sbrc	r24, 7
     2d0:	90 95       	com	r25
     2d2:	e8 17       	cp	r30, r24
     2d4:	f9 07       	cpc	r31, r25
     2d6:	84 f3       	brlt	.-32     	; 0x2b8 <findRinBuff+0x4>
     2d8:	20 e0       	ldi	r18, 0x00	; 0
			return i;
	}
	
	return 0;

}
     2da:	82 2f       	mov	r24, r18
     2dc:	08 95       	ret

000002de <bufferCheck>:

void bufferCheck()
{
	if(findRinBuff() > 0)
     2de:	ea df       	rcall	.-44     	; 0x2b4 <findRinBuff>
     2e0:	88 23       	and	r24, r24
     2e2:	c1 f0       	breq	.+48     	; 0x314 <__stack+0x15>
	{
		if(stringCheck("RING") == 1)
     2e4:	85 e0       	ldi	r24, 0x05	; 5
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	8c df       	rcall	.-232    	; 0x202 <stringCheck>
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	19 f4       	brne	.+6      	; 0x2f4 <bufferCheck+0x16>
		{
			uart_puts("ATH\r");
     2ee:	8a e0       	ldi	r24, 0x0A	; 10
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	2d df       	rcall	.-422    	; 0x14e <uart_puts>
		}
		
		if(stringCheck("+CLCC: 1,1,6,") == 1)
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	84 df       	rcall	.-248    	; 0x202 <stringCheck>
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	41 f4       	brne	.+16     	; 0x30e <__stack+0xf>
		{	
		
			if(!(PINC && (1 << PC2)) || stringBuffer[24] != '"') // jeśli jest wpisany opis albo tryb wpuszczaj wszystkich
     2fe:	86 b1       	in	r24, 0x06	; 6
     300:	88 23       	and	r24, r24
     302:	21 f0       	breq	.+8      	; 0x30c <__stack+0xd>
     304:	80 91 ec 01 	lds	r24, 0x01EC
     308:	82 32       	cpi	r24, 0x22	; 34
     30a:	09 f0       	breq	.+2      	; 0x30e <__stack+0xf>
			{
				openGate();
     30c:	6e df       	rcall	.-292    	; 0x1ea <openGate>
			}
			
		}
		
		bufferLength = 1;
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	80 93 5b 01 	sts	0x015B, r24
     314:	08 95       	ret

00000316 <USARTInit>:
}


void USARTInit(unsigned int ubrr_value)
{
   UCSR1A |= (1 << U2X1);
     316:	e8 ec       	ldi	r30, 0xC8	; 200
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	20 81       	ld	r18, Z
     31c:	22 60       	ori	r18, 0x02	; 2
     31e:	20 83       	st	Z, r18
   UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
     320:	e9 ec       	ldi	r30, 0xC9	; 201
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	20 81       	ld	r18, Z
     326:	28 69       	ori	r18, 0x98	; 152
     328:	20 83       	st	Z, r18
   UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     32a:	ea ec       	ldi	r30, 0xCA	; 202
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	20 81       	ld	r18, Z
     330:	26 60       	ori	r18, 0x06	; 6
     332:	20 83       	st	Z, r18
   UBRR1 = ubrr_value;
     334:	90 93 cd 00 	sts	0x00CD, r25
     338:	80 93 cc 00 	sts	0x00CC, r24
   DDRD |= (1 << PD3);
     33c:	53 9a       	sbi	0x0a, 3	; 10
}
     33e:	08 95       	ret

00000340 <EVENT_USB_Device_Connect>:
}

void EVENT_USB_Device_Connect(void)
{

}
     340:	08 95       	ret

00000342 <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{

}
     342:	08 95       	ret

00000344 <EVENT_USB_Device_ControlRequest>:
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
}

void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     344:	8f e3       	ldi	r24, 0x3F	; 63
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	e9 c6       	rjmp	.+3538   	; 0x111c <CDC_Device_ProcessControlRequest>

0000034a <EVENT_USB_Device_ConfigurationChanged>:
{

}

void EVENT_USB_Device_ConfigurationChanged(void)
{
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     34e:	00 91 5a 01 	lds	r16, 0x015A
     352:	8f e3       	ldi	r24, 0x3F	; 63
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	bb d6       	rcall	.+3446   	; 0x10ce <CDC_Device_ConfigureEndpoints>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	10 e0       	ldi	r17, 0x00	; 0
     35e:	80 23       	and	r24, r16
     360:	91 23       	and	r25, r17
     362:	89 2b       	or	r24, r25
     364:	09 f0       	breq	.+2      	; 0x368 <EVENT_USB_Device_ConfigurationChanged+0x1e>
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	20 93 5a 01 	sts	0x015A, r18
}
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	08 95       	ret

00000372 <SetupHardware>:
   DDRD |= (1 << PD3);
}

void SetupHardware(void)
{
	MCUSR &= ~(1 << WDRF);
     372:	84 b7       	in	r24, 0x34	; 52
     374:	87 7f       	andi	r24, 0xF7	; 247
     376:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     378:	88 e1       	ldi	r24, 0x18	; 24
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	80 93 60 00 	sts	0x0060, r24
     382:	10 92 60 00 	sts	0x0060, r1
     386:	0f be       	out	0x3f, r0	; 63
	
	DDRB = (1 << PB5) | (1 << PB6) | (1 << PB4);	
     388:	80 e7       	ldi	r24, 0x70	; 112
     38a:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << PC7);
     38c:	80 e8       	ldi	r24, 0x80	; 128
     38e:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC2);
     390:	42 9a       	sbi	0x08, 2	; 8
	
	
	clock_prescale_set(0);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	20 e8       	ldi	r18, 0x80	; 128
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	20 93 61 00 	sts	0x0061, r18
     3a0:	80 93 61 00 	sts	0x0061, r24
     3a4:	0f be       	out	0x3f, r0	; 63

	USB_Init();	
     3a6:	5e d3       	rcall	.+1724   	; 0xa64 <USB_Init>
	USARTInit(25);
     3a8:	89 e1       	ldi	r24, 0x19	; 25
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	b4 df       	rcall	.-152    	; 0x316 <USARTInit>
	
	TCCR0A |= (1 << WGM01);
     3ae:	84 b5       	in	r24, 0x24	; 36
     3b0:	82 60       	ori	r24, 0x02	; 2
     3b2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02);
     3b4:	85 b5       	in	r24, 0x25	; 37
     3b6:	85 60       	ori	r24, 0x05	; 5
     3b8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
     3ba:	ee e6       	ldi	r30, 0x6E	; 110
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	80 83       	st	Z, r24
	OCR0A = 255;
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	87 bd       	out	0x27, r24	; 39
	
	DDRD &= ~(1 << PD1);
     3c8:	51 98       	cbi	0x0a, 1	; 10
	EICRA |= (1 << ISC11) | (1 << ISC10);
     3ca:	e9 e6       	ldi	r30, 0x69	; 105
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	8c 60       	ori	r24, 0x0C	; 12
     3d2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
     3d4:	e9 9a       	sbi	0x1d, 1	; 29
	
	DDRC &= ~(1 << PC2);
     3d6:	3a 98       	cbi	0x07, 2	; 7
	PORTC |= (1 << PC2);
     3d8:	42 9a       	sbi	0x08, 2	; 8
}
     3da:	08 95       	ret

000003dc <__vector_23>:
	PORTC &= ~(1 << PC7);
}


SIGNAL(USART1_RX_vect)
{
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	1f 93       	push	r17
     3e8:	2f 93       	push	r18
     3ea:	3f 93       	push	r19
     3ec:	4f 93       	push	r20
     3ee:	5f 93       	push	r21
     3f0:	6f 93       	push	r22
     3f2:	7f 93       	push	r23
     3f4:	8f 93       	push	r24
     3f6:	9f 93       	push	r25
     3f8:	af 93       	push	r26
     3fa:	bf 93       	push	r27
     3fc:	ef 93       	push	r30
     3fe:	ff 93       	push	r31
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	00 d0       	rcall	.+0      	; 0x406 <__vector_23+0x2a>
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
	int8_t c = UDR1;
     40a:	10 91 ce 00 	lds	r17, 0x00CE
	int16_t c2 = c;
	if(ConfigSuccess && bDebug)
     40e:	80 91 5a 01 	lds	r24, 0x015A
     412:	88 23       	and	r24, r24
     414:	79 f0       	breq	.+30     	; 0x434 <__vector_23+0x58>
     416:	80 91 5f 01 	lds	r24, 0x015F
     41a:	88 23       	and	r24, r24
     41c:	59 f0       	breq	.+22     	; 0x434 <__vector_23+0x58>


SIGNAL(USART1_RX_vect)
{
	int8_t c = UDR1;
	int16_t c2 = c;
     41e:	81 2f       	mov	r24, r17
     420:	99 27       	eor	r25, r25
     422:	87 fd       	sbrc	r24, 7
     424:	90 95       	com	r25
     426:	9a 83       	std	Y+2, r25	; 0x02
     428:	89 83       	std	Y+1, r24	; 0x01
	if(ConfigSuccess && bDebug)
		fputs(&c2, &USBSerialStream); // do debugu	
     42a:	ce 01       	movw	r24, r28
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	62 e6       	ldi	r22, 0x62	; 98
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	40 d7       	rcall	.+3712   	; 0x12b4 <fputs>
	
	phoneBuffer[bufferLength] = c;
     434:	e0 91 5b 01 	lds	r30, 0x015B
     438:	ff 27       	eor	r31, r31
     43a:	e7 fd       	sbrc	r30, 7
     43c:	f0 95       	com	r31
     43e:	e0 59       	subi	r30, 0x90	; 144
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	10 83       	st	Z, r17
	bufferLength++;		
     444:	80 91 5b 01 	lds	r24, 0x015B
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 5b 01 	sts	0x015B, r24
}
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	cf 91       	pop	r28
     454:	df 91       	pop	r29
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	bf 91       	pop	r27
     45c:	af 91       	pop	r26
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	7f 91       	pop	r23
     464:	6f 91       	pop	r22
     466:	5f 91       	pop	r21
     468:	4f 91       	pop	r20
     46a:	3f 91       	pop	r19
     46c:	2f 91       	pop	r18
     46e:	1f 91       	pop	r17
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <pb_clear>:
		bufferLength = 1;
	}
}

void pb_clear(int from, int to)
{
     47a:	af 92       	push	r10
     47c:	bf 92       	push	r11
     47e:	cf 92       	push	r12
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	00 d0       	rcall	.+0      	; 0x490 <pb_clear+0x16>
     490:	00 d0       	rcall	.+0      	; 0x492 <pb_clear+0x18>
     492:	0f 92       	push	r0
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	6b 01       	movw	r12, r22
     49a:	8c 01       	movw	r16, r24
	for (int i = from; i < to+1; i++)
	{
		char buffer[5];
		uart_puts("AT+CPBW=");
		itoa(i, buffer, 10);
     49c:	7e 01       	movw	r14, r28
     49e:	08 94       	sec
     4a0:	e1 1c       	adc	r14, r1
     4a2:	f1 1c       	adc	r15, r1
     4a4:	88 ec       	ldi	r24, 0xC8	; 200
     4a6:	a8 2e       	mov	r10, r24
     4a8:	b1 2c       	mov	r11, r1
     4aa:	16 c0       	rjmp	.+44     	; 0x4d8 <pb_clear+0x5e>
void pb_clear(int from, int to)
{
	for (int i = from; i < to+1; i++)
	{
		char buffer[5];
		uart_puts("AT+CPBW=");
     4ac:	8d e1       	ldi	r24, 0x1D	; 29
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	4e de       	rcall	.-868    	; 0x14e <uart_puts>
		itoa(i, buffer, 10);
     4b2:	c8 01       	movw	r24, r16
     4b4:	b7 01       	movw	r22, r14
     4b6:	4a e0       	ldi	r20, 0x0A	; 10
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	dd d6       	rcall	.+3514   	; 0x1276 <itoa>
		uart_puts(buffer);
     4bc:	c7 01       	movw	r24, r14
     4be:	47 de       	rcall	.-882    	; 0x14e <uart_puts>
		uart_puts("\r");
     4c0:	86 e2       	ldi	r24, 0x26	; 38
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	44 de       	rcall	.-888    	; 0x14e <uart_puts>
     4c6:	88 eb       	ldi	r24, 0xB8	; 184
     4c8:	9b e0       	ldi	r25, 0x0B	; 11
     4ca:	f5 01       	movw	r30, r10
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <pb_clear+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d2:	d9 f7       	brne	.-10     	; 0x4ca <pb_clear+0x50>
	}
}

void pb_clear(int from, int to)
{
	for (int i = from; i < to+1; i++)
     4d4:	0f 5f       	subi	r16, 0xFF	; 255
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	c0 16       	cp	r12, r16
     4da:	d1 06       	cpc	r13, r17
     4dc:	3c f7       	brge	.-50     	; 0x4ac <pb_clear+0x32>
		itoa(i, buffer, 10);
		uart_puts(buffer);
		uart_puts("\r");
		_delay_ms(300);
	}
}
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	cf 91       	pop	r28
     4ea:	df 91       	pop	r29
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	08 95       	ret

000004fe <main>:


int main(void)
{	
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	00 d0       	rcall	.+0      	; 0x512 <main+0x14>
     512:	00 d0       	rcall	.+0      	; 0x514 <main+0x16>
     514:	0f 92       	push	r0
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();    
     51a:	2b df       	rcall	.-426    	; 0x372 <SetupHardware>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);	
     51c:	8f e3       	ldi	r24, 0x3F	; 63
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	62 e6       	ldi	r22, 0x62	; 98
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	3b d5       	rcall	.+2678   	; 0xf9c <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     526:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     528:	80 e5       	ldi	r24, 0x50	; 80
     52a:	93 ec       	ldi	r25, 0xC3	; 195
     52c:	28 ec       	ldi	r18, 0xC8	; 200
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	f9 01       	movw	r30, r18
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <main+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     536:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     538:	d9 f7       	brne	.-10     	; 0x530 <main+0x32>
	GlobalInterruptEnable();
	
	_delay_ms(5000);
	uart_puts("ATI\r");
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	07 de       	rcall	.-1010   	; 0x14e <uart_puts>
     540:	88 e8       	ldi	r24, 0x88	; 136
     542:	93 e1       	ldi	r25, 0x13	; 19
     544:	28 ec       	ldi	r18, 0xC8	; 200
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	31 97       	sbiw	r30, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     550:	d9 f7       	brne	.-10     	; 0x548 <main+0x4a>
	_delay_ms(500);

	numbers = eeprom_read_word(( uint16_t *)1);
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	d6 d6       	rcall	.+3500   	; 0x1304 <__eerd_word_usb162>
     558:	80 93 5e 01 	sts	0x015E, r24
				
				if(b == 0x1B)
					openGate();
					
				if(b == 'd')
					bDebug = !bDebug;
     55c:	bb 24       	eor	r11, r11
     55e:	b3 94       	inc	r11
				{
					iRead++;
					uart_puts("AT+CPBW=");
					
					char buff[5];
					itoa(iRead, buff, 10);					
     560:	7e 01       	movw	r14, r28
     562:	08 94       	sec
     564:	e1 1c       	adc	r14, r1
     566:	f1 1c       	adc	r15, r1
     568:	98 ec       	ldi	r25, 0xC8	; 200
     56a:	c9 2e       	mov	r12, r25
     56c:	d1 2c       	mov	r13, r1

	numbers = eeprom_read_word(( uint16_t *)1);
	
	for (;;)
	{
		if(ConfigSuccess)
     56e:	80 91 5a 01 	lds	r24, 0x015A
     572:	88 23       	and	r24, r24
     574:	09 f4       	brne	.+2      	; 0x578 <main+0x7a>
     576:	82 c0       	rjmp	.+260    	; 0x67c <main+0x17e>
		{
			int16_t b = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     578:	8f e3       	ldi	r24, 0x3F	; 63
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	e1 d4       	rcall	.+2498   	; 0xf40 <CDC_Device_ReceiveByte>
     57e:	8c 01       	movw	r16, r24
			
			if(b > -1)
     580:	97 fd       	sbrc	r25, 7
     582:	78 c0       	rjmp	.+240    	; 0x674 <main+0x176>
			{
				if(b == '*')
     584:	8a 32       	cpi	r24, 0x2A	; 42
     586:	91 05       	cpc	r25, r1
     588:	29 f4       	brne	.+10     	; 0x594 <main+0x96>
				{
					iRead = 0;					
     58a:	10 92 5d 01 	sts	0x015D, r1
     58e:	10 92 5c 01 	sts	0x015C, r1
     592:	44 c0       	rjmp	.+136    	; 0x61c <main+0x11e>
				}	
				
				if(b == '\r' || b == 0x1A)
     594:	8d 30       	cpi	r24, 0x0D	; 13
     596:	91 05       	cpc	r25, r1
     598:	21 f0       	breq	.+8      	; 0x5a2 <main+0xa4>
     59a:	8a 31       	cpi	r24, 0x1A	; 26
     59c:	91 05       	cpc	r25, r1
     59e:	09 f0       	breq	.+2      	; 0x5a2 <main+0xa4>
     5a0:	3a c0       	rjmp	.+116    	; 0x616 <main+0x118>
				{
					uart_puts("\",129,\"aa\"\r");
     5a2:	88 e2       	ldi	r24, 0x28	; 40
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	d3 dd       	rcall	.-1114   	; 0x14e <uart_puts>
     5a8:	88 eb       	ldi	r24, 0xB8	; 184
     5aa:	9b e0       	ldi	r25, 0x0B	; 11
     5ac:	f6 01       	movw	r30, r12
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5b4:	d9 f7       	brne	.-10     	; 0x5ac <main+0xae>
					_delay_ms(300);
					bufferLength = 1;
     5b6:	b0 92 5b 01 	sts	0x015B, r11
					
					fputs("ok\r\n", &USBSerialStream);
     5ba:	84 e3       	ldi	r24, 0x34	; 52
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	62 e6       	ldi	r22, 0x62	; 98
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	78 d6       	rcall	.+3312   	; 0x12b4 <fputs>
				}
				
				if(b == 0x1A)
     5c4:	0a 31       	cpi	r16, 0x1A	; 26
     5c6:	11 05       	cpc	r17, r1
     5c8:	31 f5       	brne	.+76     	; 0x616 <main+0x118>
				{
					if(numbers > iRead)
     5ca:	80 91 5e 01 	lds	r24, 0x015E
     5ce:	20 91 5c 01 	lds	r18, 0x015C
     5d2:	30 91 5d 01 	lds	r19, 0x015D
     5d6:	99 27       	eor	r25, r25
     5d8:	87 fd       	sbrc	r24, 7
     5da:	90 95       	com	r25
     5dc:	28 17       	cp	r18, r24
     5de:	39 07       	cpc	r19, r25
     5e0:	5c f4       	brge	.+22     	; 0x5f8 <main+0xfa>
						pb_clear(iRead +1, numbers);
     5e2:	80 91 5c 01 	lds	r24, 0x015C
     5e6:	90 91 5d 01 	lds	r25, 0x015D
     5ea:	60 91 5e 01 	lds	r22, 0x015E
     5ee:	77 27       	eor	r23, r23
     5f0:	67 fd       	sbrc	r22, 7
     5f2:	70 95       	com	r23
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	41 df       	rcall	.-382    	; 0x47a <pb_clear>
					
					numbers = iRead;
     5f8:	80 91 5c 01 	lds	r24, 0x015C
     5fc:	90 91 5d 01 	lds	r25, 0x015D
     600:	80 93 5e 01 	sts	0x015E, r24
					eeprom_write_word((uint16_t*)1, (uint16_t)numbers);
     604:	60 91 5e 01 	lds	r22, 0x015E
     608:	77 27       	eor	r23, r23
     60a:	67 fd       	sbrc	r22, 7
     60c:	70 95       	com	r23
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	7d d6       	rcall	.+3322   	; 0x130e <__eewr_word_usb162>
     614:	1c c0       	rjmp	.+56     	; 0x64e <main+0x150>
				}		
								
				if(b == '*' || b == '\r')
     616:	0d 30       	cpi	r16, 0x0D	; 13
     618:	11 05       	cpc	r17, r1
     61a:	c9 f4       	brne	.+50     	; 0x64e <main+0x150>
				{
					iRead++;
     61c:	80 91 5c 01 	lds	r24, 0x015C
     620:	90 91 5d 01 	lds	r25, 0x015D
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	90 93 5d 01 	sts	0x015D, r25
     62a:	80 93 5c 01 	sts	0x015C, r24
					uart_puts("AT+CPBW=");
     62e:	8d e1       	ldi	r24, 0x1D	; 29
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	8d dd       	rcall	.-1254   	; 0x14e <uart_puts>
					
					char buff[5];
					itoa(iRead, buff, 10);					
     634:	80 91 5c 01 	lds	r24, 0x015C
     638:	90 91 5d 01 	lds	r25, 0x015D
     63c:	b7 01       	movw	r22, r14
     63e:	4a e0       	ldi	r20, 0x0A	; 10
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	19 d6       	rcall	.+3122   	; 0x1276 <itoa>
					uart_puts(buff);						
     644:	c7 01       	movw	r24, r14
     646:	83 dd       	rcall	.-1274   	; 0x14e <uart_puts>
					uart_puts(",\"+48");
     648:	89 e3       	ldi	r24, 0x39	; 57
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	80 dd       	rcall	.-1280   	; 0x14e <uart_puts>
				}

				if(b > 47 && b < 58)
     64e:	c8 01       	movw	r24, r16
     650:	c0 97       	sbiw	r24, 0x30	; 48
     652:	0a 97       	sbiw	r24, 0x0a	; 10
     654:	10 f4       	brcc	.+4      	; 0x65a <main+0x15c>
				{
					uart_put(b);			
     656:	80 2f       	mov	r24, r16
     658:	72 dd       	rcall	.-1308   	; 0x13e <uart_put>
				}
				
				if(b == 0x1B)
     65a:	0b 31       	cpi	r16, 0x1B	; 27
     65c:	11 05       	cpc	r17, r1
     65e:	11 f4       	brne	.+4      	; 0x664 <main+0x166>
					openGate();
     660:	c4 dd       	rcall	.-1144   	; 0x1ea <openGate>
     662:	08 c0       	rjmp	.+16     	; 0x674 <main+0x176>
					
				if(b == 'd')
     664:	04 36       	cpi	r16, 0x64	; 100
     666:	11 05       	cpc	r17, r1
     668:	29 f4       	brne	.+10     	; 0x674 <main+0x176>
					bDebug = !bDebug;
     66a:	80 91 5f 01 	lds	r24, 0x015F
     66e:	8b 25       	eor	r24, r11
     670:	80 93 5f 01 	sts	0x015F, r24
									
			}
			
			CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     674:	8f e3       	ldi	r24, 0x3F	; 63
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	dd d4       	rcall	.+2490   	; 0x1034 <CDC_Device_USBTask>
			USB_USBTask();
     67a:	4d d4       	rcall	.+2202   	; 0xf16 <USB_USBTask>
		}
		bufferCheck();
     67c:	30 de       	rcall	.-928    	; 0x2de <bufferCheck>
		
		if(!(PINC && (1 << PC2)))
     67e:	86 b1       	in	r24, 0x06	; 6
     680:	88 23       	and	r24, r24
     682:	11 f4       	brne	.+4      	; 0x688 <main+0x18a>
			PORTB |= (1 << PB5);
     684:	2d 9a       	sbi	0x05, 5	; 5
     686:	73 cf       	rjmp	.-282    	; 0x56e <main+0x70>
		else
			PORTB &= ~(1 << PB5);
     688:	2d 98       	cbi	0x05, 5	; 5
     68a:	71 cf       	rjmp	.-286    	; 0x56e <main+0x70>

0000068c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     68c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     68e:	92 30       	cpi	r25, 0x02	; 2
     690:	49 f0       	breq	.+18     	; 0x6a4 <CALLBACK_USB_GetDescriptor+0x18>
     692:	93 30       	cpi	r25, 0x03	; 3
     694:	61 f0       	breq	.+24     	; 0x6ae <CALLBACK_USB_GetDescriptor+0x22>
     696:	91 30       	cpi	r25, 0x01	; 1
     698:	f9 f4       	brne	.+62     	; 0x6d8 <CALLBACK_USB_GetDescriptor+0x4c>
     69a:	e4 e7       	ldi	r30, 0x74	; 116
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	22 e1       	ldi	r18, 0x12	; 18
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	1e c0       	rjmp	.+60     	; 0x6e0 <CALLBACK_USB_GetDescriptor+0x54>
     6a4:	e6 e8       	ldi	r30, 0x86	; 134
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	2e e3       	ldi	r18, 0x3E	; 62
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	49 f0       	breq	.+18     	; 0x6c4 <CALLBACK_USB_GetDescriptor+0x38>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	18 f0       	brcs	.+6      	; 0x6bc <CALLBACK_USB_GetDescriptor+0x30>
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	79 f4       	brne	.+30     	; 0x6d8 <CALLBACK_USB_GetDescriptor+0x4c>
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6bc:	e4 ec       	ldi	r30, 0xC4	; 196
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	84 91       	lpm	r24, Z+
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6c4:	e8 ec       	ldi	r30, 0xC8	; 200
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	84 91       	lpm	r24, Z+
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6cc:	ea ee       	ldi	r30, 0xEA	; 234
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	84 91       	lpm	r24, Z+
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <CALLBACK_USB_GetDescriptor+0x54>
     6d8:	e0 e0       	ldi	r30, 0x00	; 0
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     6e0:	ed 93       	st	X+, r30
     6e2:	fc 93       	st	X, r31
	return Size;
}
     6e4:	c9 01       	movw	r24, r18
     6e6:	08 95       	ret

000006e8 <Endpoint_Write_Control_Stream_LE>:
     6e8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     6ea:	40 91 43 02 	lds	r20, 0x0243
     6ee:	50 91 44 02 	lds	r21, 0x0244
     6f2:	46 17       	cp	r20, r22
     6f4:	57 07       	cpc	r21, r23
     6f6:	18 f4       	brcc	.+6      	; 0x6fe <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     6f8:	f9 01       	movw	r30, r18
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	3d c0       	rjmp	.+122    	; 0x778 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6fe:	61 15       	cp	r22, r1
     700:	71 05       	cpc	r23, r1
     702:	11 f0       	breq	.+4      	; 0x708 <Endpoint_Write_Control_Stream_LE+0x20>
     704:	ab 01       	movw	r20, r22
     706:	f8 cf       	rjmp	.-16     	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     708:	80 91 e8 00 	lds	r24, 0x00E8
     70c:	8e 77       	andi	r24, 0x7E	; 126
     70e:	80 93 e8 00 	sts	0x00E8, r24
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	f0 cf       	rjmp	.-32     	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     718:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     71c:	88 23       	and	r24, r24
     71e:	f1 f1       	breq	.+124    	; 0x79c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     720:	85 30       	cpi	r24, 0x05	; 5
     722:	f1 f1       	breq	.+124    	; 0x7a0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     724:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     728:	83 ff       	sbrs	r24, 3
     72a:	02 c0       	rjmp	.+4      	; 0x730 <Endpoint_Write_Control_Stream_LE+0x48>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     730:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     734:	82 fd       	sbrc	r24, 2
     736:	2c c0       	rjmp	.+88     	; 0x790 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     738:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     73c:	80 ff       	sbrs	r24, 0
     73e:	1c c0       	rjmp	.+56     	; 0x778 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     740:	80 91 f2 00 	lds	r24, 0x00F2
     744:	28 2f       	mov	r18, r24
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	07 c0       	rjmp	.+14     	; 0x758 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     74a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     74c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     750:	41 50       	subi	r20, 0x01	; 1
     752:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     754:	2f 5f       	subi	r18, 0xFF	; 255
     756:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     758:	41 15       	cp	r20, r1
     75a:	51 05       	cpc	r21, r1
     75c:	19 f0       	breq	.+6      	; 0x764 <Endpoint_Write_Control_Stream_LE+0x7c>
     75e:	28 30       	cpi	r18, 0x08	; 8
     760:	31 05       	cpc	r19, r1
     762:	98 f3       	brcs	.-26     	; 0x74a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	28 30       	cpi	r18, 0x08	; 8
     768:	31 05       	cpc	r19, r1
     76a:	09 f4       	brne	.+2      	; 0x76e <Endpoint_Write_Control_Stream_LE+0x86>
     76c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     76e:	80 91 e8 00 	lds	r24, 0x00E8
     772:	8e 77       	andi	r24, 0x7E	; 126
     774:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     778:	41 15       	cp	r20, r1
     77a:	51 05       	cpc	r21, r1
     77c:	69 f6       	brne	.-102    	; 0x718 <Endpoint_Write_Control_Stream_LE+0x30>
     77e:	99 23       	and	r25, r25
     780:	59 f6       	brne	.-106    	; 0x718 <Endpoint_Write_Control_Stream_LE+0x30>
     782:	06 c0       	rjmp	.+12     	; 0x790 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     784:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     788:	88 23       	and	r24, r24
     78a:	41 f0       	breq	.+16     	; 0x79c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     78c:	85 30       	cpi	r24, 0x05	; 5
     78e:	41 f0       	breq	.+16     	; 0x7a0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     790:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     794:	82 ff       	sbrs	r24, 2
     796:	f6 cf       	rjmp	.-20     	; 0x784 <Endpoint_Write_Control_Stream_LE+0x9c>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	08 95       	ret
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	08 95       	ret
     7a0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     7a2:	08 95       	ret

000007a4 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     7a4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7a6:	40 91 43 02 	lds	r20, 0x0243
     7aa:	50 91 44 02 	lds	r21, 0x0244
     7ae:	46 17       	cp	r20, r22
     7b0:	57 07       	cpc	r21, r23
     7b2:	18 f4       	brcc	.+6      	; 0x7ba <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7b4:	f9 01       	movw	r30, r18
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	40 c0       	rjmp	.+128    	; 0x83a <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7ba:	61 15       	cp	r22, r1
     7bc:	71 05       	cpc	r23, r1
     7be:	11 f0       	breq	.+4      	; 0x7c4 <Endpoint_Write_Control_PStream_LE+0x20>
     7c0:	ab 01       	movw	r20, r22
     7c2:	f8 cf       	rjmp	.-16     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7c4:	80 91 e8 00 	lds	r24, 0x00E8
     7c8:	8e 77       	andi	r24, 0x7E	; 126
     7ca:	80 93 e8 00 	sts	0x00E8, r24
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	f0 cf       	rjmp	.-32     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7d4:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7d8:	88 23       	and	r24, r24
     7da:	09 f4       	brne	.+2      	; 0x7de <Endpoint_Write_Control_PStream_LE+0x3a>
     7dc:	40 c0       	rjmp	.+128    	; 0x85e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7de:	85 30       	cpi	r24, 0x05	; 5
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <Endpoint_Write_Control_PStream_LE+0x40>
     7e2:	3f c0       	rjmp	.+126    	; 0x862 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7e8:	83 ff       	sbrs	r24, 3
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0x4c>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7f0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7f4:	82 fd       	sbrc	r24, 2
     7f6:	2d c0       	rjmp	.+90     	; 0x852 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7f8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     7fc:	80 ff       	sbrs	r24, 0
     7fe:	1d c0       	rjmp	.+58     	; 0x83a <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     800:	80 91 f2 00 	lds	r24, 0x00F2
     804:	28 2f       	mov	r18, r24
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	08 c0       	rjmp	.+16     	; 0x81a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     80a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     80c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     810:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     812:	41 50       	subi	r20, 0x01	; 1
     814:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     81a:	41 15       	cp	r20, r1
     81c:	51 05       	cpc	r21, r1
     81e:	19 f0       	breq	.+6      	; 0x826 <Endpoint_Write_Control_PStream_LE+0x82>
     820:	28 30       	cpi	r18, 0x08	; 8
     822:	31 05       	cpc	r19, r1
     824:	90 f3       	brcs	.-28     	; 0x80a <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	28 30       	cpi	r18, 0x08	; 8
     82a:	31 05       	cpc	r19, r1
     82c:	09 f4       	brne	.+2      	; 0x830 <Endpoint_Write_Control_PStream_LE+0x8c>
     82e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     830:	80 91 e8 00 	lds	r24, 0x00E8
     834:	8e 77       	andi	r24, 0x7E	; 126
     836:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     83a:	41 15       	cp	r20, r1
     83c:	51 05       	cpc	r21, r1
     83e:	51 f6       	brne	.-108    	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0x30>
     840:	99 23       	and	r25, r25
     842:	41 f6       	brne	.-112    	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0x30>
     844:	06 c0       	rjmp	.+12     	; 0x852 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     846:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     84a:	88 23       	and	r24, r24
     84c:	41 f0       	breq	.+16     	; 0x85e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     84e:	85 30       	cpi	r24, 0x05	; 5
     850:	41 f0       	breq	.+16     	; 0x862 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     852:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     856:	82 ff       	sbrs	r24, 2
     858:	f6 cf       	rjmp	.-20     	; 0x846 <Endpoint_Write_Control_PStream_LE+0xa2>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	08 95       	ret
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	08 95       	ret
     862:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     864:	08 95       	ret

00000866 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     866:	38 2f       	mov	r19, r24
     868:	28 2f       	mov	r18, r24
     86a:	2e c0       	rjmp	.+92     	; 0x8c8 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     86c:	82 2f       	mov	r24, r18
     86e:	8f 70       	andi	r24, 0x0F	; 15
     870:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     874:	23 17       	cp	r18, r19
     876:	21 f4       	brne	.+8      	; 0x880 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     878:	76 2f       	mov	r23, r22
     87a:	94 2f       	mov	r25, r20
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	06 c0       	rjmp	.+12     	; 0x88c <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     880:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     884:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     888:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     88c:	91 ff       	sbrs	r25, 1
     88e:	1b c0       	rjmp	.+54     	; 0x8c6 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     890:	80 91 eb 00 	lds	r24, 0x00EB
     894:	8e 7f       	andi	r24, 0xFE	; 254
     896:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     89a:	80 91 ed 00 	lds	r24, 0x00ED
     89e:	8d 7f       	andi	r24, 0xFD	; 253
     8a0:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     8a4:	80 91 eb 00 	lds	r24, 0x00EB
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     8ae:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     8b2:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     8b6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     8ba:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     8be:	87 fd       	sbrc	r24, 7
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <Endpoint_ConfigureEndpoint_Prv+0x60>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	25 30       	cpi	r18, 0x05	; 5
     8ca:	80 f2       	brcs	.-96     	; 0x86c <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8cc:	3f 70       	andi	r19, 0x0F	; 15
     8ce:	30 93 e9 00 	sts	0x00E9, r19
     8d2:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     8d4:	08 95       	ret

000008d6 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	06 2f       	mov	r16, r22
     8e0:	ec 01       	movw	r28, r24
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	2a c0       	rjmp	.+84     	; 0x93a <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     8e6:	98 81       	ld	r25, Y
     8e8:	99 23       	and	r25, r25
     8ea:	29 f1       	breq	.+74     	; 0x936 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     8ec:	6b 81       	ldd	r22, Y+3	; 0x03
     8ee:	e9 81       	ldd	r30, Y+1	; 0x01
     8f0:	fa 81       	ldd	r31, Y+2	; 0x02
     8f2:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     8f4:	89 2f       	mov	r24, r25
     8f6:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     8f8:	85 30       	cpi	r24, 0x05	; 5
     8fa:	18 f5       	brcc	.+70     	; 0x942 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8fc:	22 30       	cpi	r18, 0x02	; 2
     8fe:	10 f4       	brcc	.+4      	; 0x904 <Endpoint_ConfigureEndpointTable+0x2e>
     900:	52 e0       	ldi	r21, 0x02	; 2
     902:	01 c0       	rjmp	.+2      	; 0x906 <Endpoint_ConfigureEndpointTable+0x30>
     904:	56 e0       	ldi	r21, 0x06	; 6
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	28 e0       	ldi	r18, 0x08	; 8
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	03 c0       	rjmp	.+6      	; 0x914 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     90e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     910:	22 0f       	add	r18, r18
     912:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     914:	2e 17       	cp	r18, r30
     916:	3f 07       	cpc	r19, r31
     918:	d0 f3       	brcs	.-12     	; 0x90e <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     91a:	62 95       	swap	r22
     91c:	66 0f       	add	r22, r22
     91e:	66 0f       	add	r22, r22
     920:	60 7c       	andi	r22, 0xC0	; 192
     922:	99 1f       	adc	r25, r25
     924:	99 27       	eor	r25, r25
     926:	99 1f       	adc	r25, r25
     928:	69 2b       	or	r22, r25
     92a:	42 95       	swap	r20
     92c:	40 7f       	andi	r20, 0xF0	; 240
     92e:	45 2b       	or	r20, r21
     930:	9a df       	rcall	.-204    	; 0x866 <Endpoint_ConfigureEndpoint_Prv>
     932:	88 23       	and	r24, r24
     934:	31 f0       	breq	.+12     	; 0x942 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     936:	1f 5f       	subi	r17, 0xFF	; 255
     938:	25 96       	adiw	r28, 0x05	; 5
     93a:	10 17       	cp	r17, r16
     93c:	a0 f2       	brcs	.-88     	; 0x8e6 <Endpoint_ConfigureEndpointTable+0x10>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	01 c0       	rjmp	.+2      	; 0x944 <Endpoint_ConfigureEndpointTable+0x6e>
     942:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     94e:	80 91 3d 02 	lds	r24, 0x023D
     952:	88 23       	and	r24, r24
     954:	9c f4       	brge	.+38     	; 0x97c <Endpoint_ClearStatusStage+0x2e>
     956:	04 c0       	rjmp	.+8      	; 0x960 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     958:	80 91 3c 02 	lds	r24, 0x023C
     95c:	88 23       	and	r24, r24
     95e:	b9 f0       	breq	.+46     	; 0x98e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     960:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     964:	82 ff       	sbrs	r24, 2
     966:	f8 cf       	rjmp	.-16     	; 0x958 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     968:	80 91 e8 00 	lds	r24, 0x00E8
     96c:	8b 77       	andi	r24, 0x7B	; 123
     96e:	80 93 e8 00 	sts	0x00E8, r24
     972:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     974:	80 91 3c 02 	lds	r24, 0x023C
     978:	88 23       	and	r24, r24
     97a:	49 f0       	breq	.+18     	; 0x98e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     97c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     980:	80 ff       	sbrs	r24, 0
     982:	f8 cf       	rjmp	.-16     	; 0x974 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     984:	80 91 e8 00 	lds	r24, 0x00E8
     988:	8e 77       	andi	r24, 0x7E	; 126
     98a:	80 93 e8 00 	sts	0x00E8, r24
     98e:	08 95       	ret

00000990 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     990:	40 91 e4 00 	lds	r20, 0x00E4
     994:	50 91 e5 00 	lds	r21, 0x00E5
     998:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     99a:	80 91 ec 00 	lds	r24, 0x00EC
     99e:	80 ff       	sbrs	r24, 0
     9a0:	24 c0       	rjmp	.+72     	; 0x9ea <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9a2:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     9a6:	80 fd       	sbrc	r24, 0
     9a8:	1e c0       	rjmp	.+60     	; 0x9e6 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9aa:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ae:	88 23       	and	r24, r24
     9b0:	11 f4       	brne	.+4      	; 0x9b6 <Endpoint_WaitUntilReady+0x26>
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9b6:	85 30       	cpi	r24, 0x05	; 5
     9b8:	11 f4       	brne	.+4      	; 0x9be <Endpoint_WaitUntilReady+0x2e>
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9be:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     9c2:	85 ff       	sbrs	r24, 5
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <Endpoint_WaitUntilReady+0x3a>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	08 95       	ret
     9ca:	80 91 e4 00 	lds	r24, 0x00E4
     9ce:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9d2:	84 17       	cp	r24, r20
     9d4:	95 07       	cpc	r25, r21
     9d6:	09 f3       	breq	.-62     	; 0x99a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9d8:	22 23       	and	r18, r18
     9da:	11 f4       	brne	.+4      	; 0x9e0 <Endpoint_WaitUntilReady+0x50>
     9dc:	84 e0       	ldi	r24, 0x04	; 4
     9de:	08 95       	ret
     9e0:	21 50       	subi	r18, 0x01	; 1
     9e2:	ac 01       	movw	r20, r24
     9e4:	da cf       	rjmp	.-76     	; 0x99a <Endpoint_WaitUntilReady+0xa>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     9e8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9ea:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9ee:	82 ff       	sbrs	r24, 2
     9f0:	dc cf       	rjmp	.-72     	; 0x9aa <Endpoint_WaitUntilReady+0x1a>
     9f2:	f9 cf       	rjmp	.-14     	; 0x9e6 <Endpoint_WaitUntilReady+0x56>

000009f4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9f4:	40 d0       	rcall	.+128    	; 0xa76 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9f6:	42 d0       	rcall	.+132    	; 0xa7c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9f8:	80 91 d8 00 	lds	r24, 0x00D8
     9fc:	8f 77       	andi	r24, 0x7F	; 127
     9fe:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     a02:	80 91 d8 00 	lds	r24, 0x00D8
     a06:	80 68       	ori	r24, 0x80	; 128
     a08:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a0c:	80 91 d8 00 	lds	r24, 0x00D8
     a10:	8f 7d       	andi	r24, 0xDF	; 223
     a12:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a16:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a1c:	09 b4       	in	r0, 0x29	; 41
     a1e:	00 fe       	sbrs	r0, 0
     a20:	fd cf       	rjmp	.-6      	; 0xa1c <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     a22:	10 92 3c 02 	sts	0x023C, r1
	USB_Device_ConfigurationNumber  = 0;
     a26:	10 92 38 02 	sts	0x0238, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a2a:	10 92 3a 02 	sts	0x023A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a2e:	10 92 39 02 	sts	0x0239, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	42 e0       	ldi	r20, 0x02	; 2
     a38:	16 df       	rcall	.-468    	; 0x866 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a3a:	80 91 e1 00 	lds	r24, 0x00E1
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a44:	80 91 e2 00 	lds	r24, 0x00E2
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a4e:	80 91 e2 00 	lds	r24, 0x00E2
     a52:	88 60       	ori	r24, 0x08	; 8
     a54:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a58:	80 91 e0 00 	lds	r24, 0x00E0
     a5c:	8e 7f       	andi	r24, 0xFE	; 254
     a5e:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a62:	08 95       	ret

00000a64 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     a64:	e3 e6       	ldi	r30, 0x63	; 99
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 3b 02 	sts	0x023B, r24

	USB_ResetInterface();
}
     a74:	bf cf       	rjmp	.-130    	; 0x9f4 <USB_ResetInterface>

00000a76 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a76:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     a7a:	08 95       	ret

00000a7c <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a7c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     a80:	08 95       	ret

00000a82 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	1f 93       	push	r17
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     aa6:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     aaa:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aae:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     ab2:	80 91 f0 00 	lds	r24, 0x00F0
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     abc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     abe:	c2 d0       	rcall	.+388    	; 0xc44 <USB_Device_ProcessControlRequest>
     ac0:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ac4:	80 91 f0 00 	lds	r24, 0x00F0
     ac8:	88 60       	ori	r24, 0x08	; 8
     aca:	80 93 f0 00 	sts	0x00F0, r24
     ace:	1f 70       	andi	r17, 0x0F	; 15
     ad0:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	1f 91       	pop	r17
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0
     af4:	1f 90       	pop	r1
     af6:	18 95       	reti

00000af8 <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     af8:	1f 92       	push	r1
     afa:	0f 92       	push	r0
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     b1a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     b1e:	82 ff       	sbrs	r24, 2
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     b22:	80 91 e2 00 	lds	r24, 0x00E2
     b26:	82 ff       	sbrs	r24, 2
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     b2a:	80 91 e1 00 	lds	r24, 0x00E1
     b2e:	8b 7f       	andi	r24, 0xFB	; 251
     b30:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     b34:	ef d1       	rcall	.+990    	; 0xf14 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b36:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b3a:	80 ff       	sbrs	r24, 0
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b3e:	80 91 e2 00 	lds	r24, 0x00E2
     b42:	80 ff       	sbrs	r24, 0
     b44:	13 c0       	rjmp	.+38     	; 0xb6c <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b46:	80 91 e2 00 	lds	r24, 0x00E2
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b50:	80 91 e2 00 	lds	r24, 0x00E2
     b54:	80 61       	ori	r24, 0x10	; 16
     b56:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b5a:	80 91 d8 00 	lds	r24, 0x00D8
     b5e:	80 62       	ori	r24, 0x20	; 32
     b60:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b64:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     b66:	10 92 3c 02 	sts	0x023C, r1
		EVENT_USB_Device_Disconnect();
     b6a:	eb db       	rcall	.-2090   	; 0x342 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b6c:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b70:	84 ff       	sbrs	r24, 4
     b72:	2c c0       	rjmp	.+88     	; 0xbcc <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b74:	80 91 e2 00 	lds	r24, 0x00E2
     b78:	84 ff       	sbrs	r24, 4
     b7a:	28 c0       	rjmp	.+80     	; 0xbcc <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b7c:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b82:	09 b4       	in	r0, 0x29	; 41
     b84:	00 fe       	sbrs	r0, 0
     b86:	fd cf       	rjmp	.-6      	; 0xb82 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b88:	80 91 d8 00 	lds	r24, 0x00D8
     b8c:	8f 7d       	andi	r24, 0xDF	; 223
     b8e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b92:	80 91 e1 00 	lds	r24, 0x00E1
     b96:	8f 7e       	andi	r24, 0xEF	; 239
     b98:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b9c:	80 91 e2 00 	lds	r24, 0x00E2
     ba0:	8f 7e       	andi	r24, 0xEF	; 239
     ba2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ba6:	80 91 e2 00 	lds	r24, 0x00E2
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     bb0:	80 91 38 02 	lds	r24, 0x0238
     bb4:	88 23       	and	r24, r24
     bb6:	31 f4       	brne	.+12     	; 0xbc4 <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bb8:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bbc:	87 fd       	sbrc	r24, 7
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <__vector_11+0xcc>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <__vector_11+0xce>
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	80 93 3c 02 	sts	0x023C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     bca:	ba db       	rcall	.-2188   	; 0x340 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     bcc:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     bd0:	83 ff       	sbrs	r24, 3
     bd2:	27 c0       	rjmp	.+78     	; 0xc22 <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     bd4:	80 91 e2 00 	lds	r24, 0x00E2
     bd8:	83 ff       	sbrs	r24, 3
     bda:	23 c0       	rjmp	.+70     	; 0xc22 <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     bdc:	80 91 e1 00 	lds	r24, 0x00E1
     be0:	87 7f       	andi	r24, 0xF7	; 247
     be2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	80 93 3c 02 	sts	0x023C, r24
		USB_Device_ConfigurationNumber = 0;
     bec:	10 92 38 02 	sts	0x0238, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bf0:	80 91 e1 00 	lds	r24, 0x00E1
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     bfa:	80 91 e2 00 	lds	r24, 0x00E2
     bfe:	8e 7f       	andi	r24, 0xFE	; 254
     c00:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c04:	80 91 e2 00 	lds	r24, 0x00E2
     c08:	80 61       	ori	r24, 0x10	; 16
     c0a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	42 e0       	ldi	r20, 0x02	; 2
     c14:	28 de       	rcall	.-944    	; 0x866 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c16:	80 91 f0 00 	lds	r24, 0x00F0
     c1a:	88 60       	ori	r24, 0x08	; 8
     c1c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c20:	79 d1       	rcall	.+754    	; 0xf14 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c44:	1f 93       	push	r17
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	ac 97       	sbiw	r28, 0x2c	; 44
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	ed e3       	ldi	r30, 0x3D	; 61
     c5c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c5e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     c62:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     c64:	22 e0       	ldi	r18, 0x02	; 2
     c66:	e5 34       	cpi	r30, 0x45	; 69
     c68:	f2 07       	cpc	r31, r18
     c6a:	c9 f7       	brne	.-14     	; 0xc5e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     c6c:	6b db       	rcall	.-2346   	; 0x344 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c6e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     c72:	83 ff       	sbrs	r24, 3
     c74:	37 c1       	rjmp	.+622    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     c76:	80 91 3d 02 	lds	r24, 0x023D

		switch (USB_ControlRequest.bRequest)
     c7a:	30 91 3e 02 	lds	r19, 0x023E
     c7e:	35 30       	cpi	r19, 0x05	; 5
     c80:	09 f4       	brne	.+2      	; 0xc84 <USB_Device_ProcessControlRequest+0x40>
     c82:	87 c0       	rjmp	.+270    	; 0xd92 <USB_Device_ProcessControlRequest+0x14e>
     c84:	36 30       	cpi	r19, 0x06	; 6
     c86:	40 f4       	brcc	.+16     	; 0xc98 <USB_Device_ProcessControlRequest+0x54>
     c88:	31 30       	cpi	r19, 0x01	; 1
     c8a:	c9 f1       	breq	.+114    	; 0xcfe <USB_Device_ProcessControlRequest+0xba>
     c8c:	31 30       	cpi	r19, 0x01	; 1
     c8e:	70 f0       	brcs	.+28     	; 0xcac <USB_Device_ProcessControlRequest+0x68>
     c90:	33 30       	cpi	r19, 0x03	; 3
     c92:	09 f0       	breq	.+2      	; 0xc96 <USB_Device_ProcessControlRequest+0x52>
     c94:	27 c1       	rjmp	.+590    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
     c96:	33 c0       	rjmp	.+102    	; 0xcfe <USB_Device_ProcessControlRequest+0xba>
     c98:	38 30       	cpi	r19, 0x08	; 8
     c9a:	09 f4       	brne	.+2      	; 0xc9e <USB_Device_ProcessControlRequest+0x5a>
     c9c:	f5 c0       	rjmp	.+490    	; 0xe88 <USB_Device_ProcessControlRequest+0x244>
     c9e:	39 30       	cpi	r19, 0x09	; 9
     ca0:	09 f4       	brne	.+2      	; 0xca4 <USB_Device_ProcessControlRequest+0x60>
     ca2:	04 c1       	rjmp	.+520    	; 0xeac <USB_Device_ProcessControlRequest+0x268>
     ca4:	36 30       	cpi	r19, 0x06	; 6
     ca6:	09 f0       	breq	.+2      	; 0xcaa <USB_Device_ProcessControlRequest+0x66>
     ca8:	1d c1       	rjmp	.+570    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
     caa:	96 c0       	rjmp	.+300    	; 0xdd8 <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cac:	80 38       	cpi	r24, 0x80	; 128
     cae:	21 f0       	breq	.+8      	; 0xcb8 <USB_Device_ProcessControlRequest+0x74>
     cb0:	82 38       	cpi	r24, 0x82	; 130
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <USB_Device_ProcessControlRequest+0x72>
     cb4:	17 c1       	rjmp	.+558    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
     cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <USB_Device_ProcessControlRequest+0x84>
     cb8:	90 91 39 02 	lds	r25, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     cbc:	80 91 3a 02 	lds	r24, 0x023A
     cc0:	88 23       	and	r24, r24
     cc2:	99 f0       	breq	.+38     	; 0xcea <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     cc4:	92 60       	ori	r25, 0x02	; 2
     cc6:	11 c0       	rjmp	.+34     	; 0xcea <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cc8:	80 91 41 02 	lds	r24, 0x0241
     ccc:	8f 70       	andi	r24, 0x0F	; 15
     cce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     cd2:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	25 e0       	ldi	r18, 0x05	; 5
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	2a 95       	dec	r18
     ce0:	e1 f7       	brne	.-8      	; 0xcda <USB_Device_ProcessControlRequest+0x96>
     ce2:	98 2f       	mov	r25, r24
     ce4:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ce6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cea:	80 91 e8 00 	lds	r24, 0x00E8
     cee:	87 7f       	andi	r24, 0xF7	; 247
     cf0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     cf4:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     cf8:	10 92 f1 00 	sts	0x00F1, r1
     cfc:	d0 c0       	rjmp	.+416    	; 0xe9e <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cfe:	88 23       	and	r24, r24
     d00:	19 f0       	breq	.+6      	; 0xd08 <USB_Device_ProcessControlRequest+0xc4>
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	09 f0       	breq	.+2      	; 0xd08 <USB_Device_ProcessControlRequest+0xc4>
     d06:	ee c0       	rjmp	.+476    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	8f 71       	andi	r24, 0x1F	; 31
     d0c:	90 70       	andi	r25, 0x00	; 0
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	21 f0       	breq	.+8      	; 0xd1a <USB_Device_ProcessControlRequest+0xd6>
     d12:	02 97       	sbiw	r24, 0x02	; 2
     d14:	09 f0       	breq	.+2      	; 0xd18 <USB_Device_ProcessControlRequest+0xd4>
     d16:	e6 c0       	rjmp	.+460    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
     d18:	0c c0       	rjmp	.+24     	; 0xd32 <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     d1a:	80 91 3f 02 	lds	r24, 0x023F
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	09 f0       	breq	.+2      	; 0xd24 <USB_Device_ProcessControlRequest+0xe0>
     d22:	e0 c0       	rjmp	.+448    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d24:	10 92 3a 02 	sts	0x023A, r1
     d28:	33 30       	cpi	r19, 0x03	; 3
     d2a:	69 f5       	brne	.+90     	; 0xd86 <USB_Device_ProcessControlRequest+0x142>
     d2c:	80 93 3a 02 	sts	0x023A, r24
     d30:	2a c0       	rjmp	.+84     	; 0xd86 <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     d32:	80 91 3f 02 	lds	r24, 0x023F
     d36:	88 23       	and	r24, r24
     d38:	31 f5       	brne	.+76     	; 0xd86 <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d3a:	20 91 41 02 	lds	r18, 0x0241
     d3e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     d40:	09 f4       	brne	.+2      	; 0xd44 <USB_Device_ProcessControlRequest+0x100>
     d42:	d0 c0       	rjmp	.+416    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d44:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d48:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d4c:	80 ff       	sbrs	r24, 0
     d4e:	1b c0       	rjmp	.+54     	; 0xd86 <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d50:	33 30       	cpi	r19, 0x03	; 3
     d52:	21 f4       	brne	.+8      	; 0xd5c <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d54:	80 91 eb 00 	lds	r24, 0x00EB
     d58:	80 62       	ori	r24, 0x20	; 32
     d5a:	13 c0       	rjmp	.+38     	; 0xd82 <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d5c:	80 91 eb 00 	lds	r24, 0x00EB
     d60:	80 61       	ori	r24, 0x10	; 16
     d62:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <USB_Device_ProcessControlRequest+0x12c>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	2a 95       	dec	r18
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <USB_Device_ProcessControlRequest+0x128>
     d74:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     d78:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     d7c:	80 91 eb 00 	lds	r24, 0x00EB
     d80:	88 60       	ori	r24, 0x08	; 8
     d82:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d86:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d8a:	80 91 e8 00 	lds	r24, 0x00E8
     d8e:	87 7f       	andi	r24, 0xF7	; 247
     d90:	89 c0       	rjmp	.+274    	; 0xea4 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d92:	88 23       	and	r24, r24
     d94:	09 f0       	breq	.+2      	; 0xd98 <USB_Device_ProcessControlRequest+0x154>
     d96:	a6 c0       	rjmp	.+332    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     d98:	10 91 3f 02 	lds	r17, 0x023F
     d9c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     d9e:	80 91 e3 00 	lds	r24, 0x00E3
     da2:	80 78       	andi	r24, 0x80	; 128
     da4:	81 2b       	or	r24, r17
     da6:	80 93 e3 00 	sts	0x00E3, r24
     daa:	80 91 e8 00 	lds	r24, 0x00E8
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     db4:	cc dd       	rcall	.-1128   	; 0x94e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     db6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     dba:	80 ff       	sbrs	r24, 0
     dbc:	fc cf       	rjmp	.-8      	; 0xdb6 <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     dbe:	80 91 e3 00 	lds	r24, 0x00E3
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     dc8:	11 23       	and	r17, r17
     dca:	11 f4       	brne	.+4      	; 0xdd0 <USB_Device_ProcessControlRequest+0x18c>
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <USB_Device_ProcessControlRequest+0x18e>
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	80 93 3c 02 	sts	0x023C, r24
     dd6:	86 c0       	rjmp	.+268    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     dd8:	80 58       	subi	r24, 0x80	; 128
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <USB_Device_ProcessControlRequest+0x19c>
     dde:	82 c0       	rjmp	.+260    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     de0:	80 91 3f 02 	lds	r24, 0x023F
     de4:	90 91 40 02 	lds	r25, 0x0240
     de8:	23 e0       	ldi	r18, 0x03	; 3
     dea:	8c 3d       	cpi	r24, 0xDC	; 220
     dec:	92 07       	cpc	r25, r18
     dee:	09 f0       	breq	.+2      	; 0xdf2 <USB_Device_ProcessControlRequest+0x1ae>
     df0:	33 c0       	rjmp	.+102    	; 0xe58 <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     df6:	8a e2       	ldi	r24, 0x2A	; 42
     df8:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     dfa:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     dfc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     dfe:	de 01       	movw	r26, r28
     e00:	15 96       	adiw	r26, 0x05	; 5
     e02:	6e e0       	ldi	r22, 0x0E	; 14
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e08:	11 e2       	ldi	r17, 0x21	; 33
     e0a:	e6 2f       	mov	r30, r22
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	10 93 57 00 	sts	0x0057, r17
     e12:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     e14:	40 ff       	sbrs	r20, 0
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
     e18:	82 95       	swap	r24
     e1a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     e1e:	8f 70       	andi	r24, 0x0F	; 15
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e24:	8a 30       	cpi	r24, 0x0A	; 10
     e26:	18 f0       	brcs	.+6      	; 0xe2e <USB_Device_ProcessControlRequest+0x1ea>
     e28:	c9 01       	movw	r24, r18
     e2a:	c7 96       	adiw	r24, 0x37	; 55
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <USB_Device_ProcessControlRequest+0x1ee>
     e2e:	c9 01       	movw	r24, r18
     e30:	c0 96       	adiw	r24, 0x30	; 48
     e32:	8d 93       	st	X+, r24
     e34:	9d 93       	st	X+, r25
     e36:	4f 5f       	subi	r20, 0xFF	; 255
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e3a:	44 31       	cpi	r20, 0x14	; 20
     e3c:	51 05       	cpc	r21, r1
     e3e:	29 f7       	brne	.-54     	; 0xe0a <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e40:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e42:	80 91 e8 00 	lds	r24, 0x00E8
     e46:	87 7f       	andi	r24, 0xF7	; 247
     e48:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e4c:	ce 01       	movw	r24, r28
     e4e:	03 96       	adiw	r24, 0x03	; 3
     e50:	6a e2       	ldi	r22, 0x2A	; 42
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	49 dc       	rcall	.-1902   	; 0x6e8 <Endpoint_Write_Control_Stream_LE>
     e56:	12 c0       	rjmp	.+36     	; 0xe7c <USB_Device_ProcessControlRequest+0x238>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e58:	60 91 41 02 	lds	r22, 0x0241
     e5c:	ae 01       	movw	r20, r28
     e5e:	4f 5f       	subi	r20, 0xFF	; 255
     e60:	5f 4f       	sbci	r21, 0xFF	; 255
     e62:	14 dc       	rcall	.-2008   	; 0x68c <CALLBACK_USB_GetDescriptor>
     e64:	bc 01       	movw	r22, r24
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	09 f4       	brne	.+2      	; 0xe6c <USB_Device_ProcessControlRequest+0x228>
     e6a:	3c c0       	rjmp	.+120    	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
     e6c:	80 91 e8 00 	lds	r24, 0x00E8
     e70:	87 7f       	andi	r24, 0xF7	; 247
     e72:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	94 dc       	rcall	.-1752   	; 0x7a4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e7c:	80 91 e8 00 	lds	r24, 0x00E8
     e80:	8b 77       	andi	r24, 0x7B	; 123
     e82:	80 93 e8 00 	sts	0x00E8, r24
     e86:	2e c0       	rjmp	.+92     	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     e88:	80 38       	cpi	r24, 0x80	; 128
     e8a:	61 f5       	brne	.+88     	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
     e90:	87 7f       	andi	r24, 0xF7	; 247
     e92:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     e96:	80 91 38 02 	lds	r24, 0x0238
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e9a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e9e:	80 91 e8 00 	lds	r24, 0x00E8
     ea2:	8e 77       	andi	r24, 0x7E	; 126
     ea4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     ea8:	52 dd       	rcall	.-1372   	; 0x94e <Endpoint_ClearStatusStage>
     eaa:	1c c0       	rjmp	.+56     	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     eac:	88 23       	and	r24, r24
     eae:	d1 f4       	brne	.+52     	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     eb0:	90 91 3f 02 	lds	r25, 0x023F
     eb4:	92 30       	cpi	r25, 0x02	; 2
     eb6:	b0 f4       	brcc	.+44     	; 0xee4 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eb8:	80 91 e8 00 	lds	r24, 0x00E8
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ec2:	90 93 38 02 	sts	0x0238, r25

	Endpoint_ClearStatusStage();
     ec6:	43 dd       	rcall	.-1402   	; 0x94e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ec8:	80 91 38 02 	lds	r24, 0x0238
     ecc:	88 23       	and	r24, r24
     ece:	31 f4       	brne	.+12     	; 0xedc <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ed0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ed4:	87 fd       	sbrc	r24, 7
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <USB_Device_ProcessControlRequest+0x298>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	01 c0       	rjmp	.+2      	; 0xede <USB_Device_ProcessControlRequest+0x29a>
     edc:	84 e0       	ldi	r24, 0x04	; 4
     ede:	80 93 3c 02 	sts	0x023C, r24

	EVENT_USB_Device_ConfigurationChanged();
     ee2:	33 da       	rcall	.-2970   	; 0x34a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ee4:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ee8:	83 ff       	sbrs	r24, 3
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eec:	80 91 e8 00 	lds	r24, 0x00E8
     ef0:	87 7f       	andi	r24, 0xF7	; 247
     ef2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ef6:	80 91 eb 00 	lds	r24, 0x00EB
     efa:	80 62       	ori	r24, 0x20	; 32
     efc:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f00:	ac 96       	adiw	r28, 0x2c	; 44
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	1f 91       	pop	r17
     f12:	08 95       	ret

00000f14 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f14:	08 95       	ret

00000f16 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f16:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     f18:	80 91 3c 02 	lds	r24, 0x023C
     f1c:	88 23       	and	r24, r24
     f1e:	71 f0       	breq	.+28     	; 0xf3c <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f20:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f24:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f28:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f2c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     f30:	83 ff       	sbrs	r24, 3
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
     f34:	87 de       	rcall	.-754    	; 0xc44 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f36:	1f 70       	andi	r17, 0x0F	; 15
     f38:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     f3c:	1f 91       	pop	r17
     f3e:	08 95       	ret

00000f40 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f40:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f42:	80 91 3c 02 	lds	r24, 0x023C
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	29 f5       	brne	.+74     	; 0xf94 <CDC_Device_ReceiveByte+0x54>
     f4a:	84 89       	ldd	r24, Z+20	; 0x14
     f4c:	95 89       	ldd	r25, Z+21	; 0x15
     f4e:	a6 89       	ldd	r26, Z+22	; 0x16
     f50:	b7 89       	ldd	r27, Z+23	; 0x17
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	a1 05       	cpc	r26, r1
     f56:	b1 05       	cpc	r27, r1
     f58:	e9 f0       	breq	.+58     	; 0xf94 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f5a:	86 81       	ldd	r24, Z+6	; 0x06
     f5c:	8f 70       	andi	r24, 0x0F	; 15
     f5e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f62:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     f66:	82 ff       	sbrs	r24, 2
     f68:	15 c0       	rjmp	.+42     	; 0xf94 <CDC_Device_ReceiveByte+0x54>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f6a:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     f6e:	88 23       	and	r24, r24
     f70:	19 f4       	brne	.+6      	; 0xf78 <CDC_Device_ReceiveByte+0x38>
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f78:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f80:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     f84:	88 23       	and	r24, r24
     f86:	41 f4       	brne	.+16     	; 0xf98 <CDC_Device_ReceiveByte+0x58>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f88:	80 91 e8 00 	lds	r24, 0x00E8
     f8c:	8b 77       	andi	r24, 0x7B	; 123
     f8e:	80 93 e8 00 	sts	0x00E8, r24
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <CDC_Device_ReceiveByte+0x58>
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     f98:	c9 01       	movw	r24, r18
     f9a:	08 95       	ret

00000f9c <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
     f9c:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
     f9e:	2e e0       	ldi	r18, 0x0E	; 14
     fa0:	db 01       	movw	r26, r22
     fa2:	1d 92       	st	X+, r1
     fa4:	2a 95       	dec	r18
     fa6:	e9 f7       	brne	.-6      	; 0xfa2 <CDC_Device_CreateStream+0x6>
     fa8:	23 e0       	ldi	r18, 0x03	; 3
     faa:	23 83       	std	Z+3, r18	; 0x03
     fac:	28 e5       	ldi	r18, 0x58	; 88
     fae:	38 e0       	ldi	r19, 0x08	; 8
     fb0:	31 87       	std	Z+9, r19	; 0x09
     fb2:	20 87       	std	Z+8, r18	; 0x08
     fb4:	21 ee       	ldi	r18, 0xE1	; 225
     fb6:	37 e0       	ldi	r19, 0x07	; 7
     fb8:	33 87       	std	Z+11, r19	; 0x0b
     fba:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     fbc:	95 87       	std	Z+13, r25	; 0x0d
     fbe:	84 87       	std	Z+12, r24	; 0x0c
}
     fc0:	08 95       	ret

00000fc2 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
     fc2:	fc 01       	movw	r30, r24
     fc4:	84 85       	ldd	r24, Z+12	; 0x0c
     fc6:	95 85       	ldd	r25, Z+13	; 0x0d
     fc8:	bb df       	rcall	.-138    	; 0xf40 <CDC_Device_ReceiveByte>
     fca:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
     fcc:	97 ff       	sbrs	r25, 7
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <CDC_Device_getchar+0x12>
     fd0:	2e ef       	ldi	r18, 0xFE	; 254
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
     fd4:	c9 01       	movw	r24, r18
     fd6:	08 95       	ret

00000fd8 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     fd8:	08 95       	ret

00000fda <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fda:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fdc:	80 91 3c 02 	lds	r24, 0x023C
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	19 f5       	brne	.+70     	; 0x102a <CDC_Device_Flush+0x50>
     fe4:	84 89       	ldd	r24, Z+20	; 0x14
     fe6:	95 89       	ldd	r25, Z+21	; 0x15
     fe8:	a6 89       	ldd	r26, Z+22	; 0x16
     fea:	b7 89       	ldd	r27, Z+23	; 0x17
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	a1 05       	cpc	r26, r1
     ff0:	b1 05       	cpc	r27, r1
     ff2:	d9 f0       	breq	.+54     	; 0x102a <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ff4:	81 81       	ldd	r24, Z+1	; 0x01
     ff6:	8f 70       	andi	r24, 0x0F	; 15
     ff8:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ffc:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1000:	88 23       	and	r24, r24
    1002:	a9 f0       	breq	.+42     	; 0x102e <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1004:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1008:	80 91 e8 00 	lds	r24, 0x00E8
    100c:	8e 77       	andi	r24, 0x7E	; 126
    100e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1012:	95 fd       	sbrc	r25, 5
    1014:	0c c0       	rjmp	.+24     	; 0x102e <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1016:	bc dc       	rcall	.-1672   	; 0x990 <Endpoint_WaitUntilReady>
    1018:	98 2f       	mov	r25, r24
    101a:	88 23       	and	r24, r24
    101c:	49 f4       	brne	.+18     	; 0x1030 <CDC_Device_Flush+0x56>
    101e:	80 91 e8 00 	lds	r24, 0x00E8
    1022:	8e 77       	andi	r24, 0x7E	; 126
    1024:	80 93 e8 00 	sts	0x00E8, r24
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <CDC_Device_Flush+0x56>
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <CDC_Device_Flush+0x56>
    102e:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1030:	89 2f       	mov	r24, r25
    1032:	08 95       	ret

00001034 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1034:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1036:	80 91 3c 02 	lds	r24, 0x023C
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	91 f4       	brne	.+36     	; 0x1062 <CDC_Device_USBTask+0x2e>
    103e:	84 89       	ldd	r24, Z+20	; 0x14
    1040:	95 89       	ldd	r25, Z+21	; 0x15
    1042:	a6 89       	ldd	r26, Z+22	; 0x16
    1044:	b7 89       	ldd	r27, Z+23	; 0x17
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	a1 05       	cpc	r26, r1
    104a:	b1 05       	cpc	r27, r1
    104c:	51 f0       	breq	.+20     	; 0x1062 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    104e:	81 81       	ldd	r24, Z+1	; 0x01
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1056:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    105a:	80 ff       	sbrs	r24, 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    105e:	cf 01       	movw	r24, r30
    1060:	bc cf       	rjmp	.-136    	; 0xfda <CDC_Device_Flush>
    1062:	08 95       	ret

00001064 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1064:	1f 93       	push	r17
    1066:	fc 01       	movw	r30, r24
    1068:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    106a:	80 91 3c 02 	lds	r24, 0x023C
    106e:	84 30       	cpi	r24, 0x04	; 4
    1070:	e1 f4       	brne	.+56     	; 0x10aa <CDC_Device_SendByte+0x46>
    1072:	84 89       	ldd	r24, Z+20	; 0x14
    1074:	95 89       	ldd	r25, Z+21	; 0x15
    1076:	a6 89       	ldd	r26, Z+22	; 0x16
    1078:	b7 89       	ldd	r27, Z+23	; 0x17
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	a1 05       	cpc	r26, r1
    107e:	b1 05       	cpc	r27, r1
    1080:	a1 f0       	breq	.+40     	; 0x10aa <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1082:	81 81       	ldd	r24, Z+1	; 0x01
    1084:	8f 70       	andi	r24, 0x0F	; 15
    1086:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    108a:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    108e:	85 fd       	sbrc	r24, 5
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1092:	80 91 e8 00 	lds	r24, 0x00E8
    1096:	8e 77       	andi	r24, 0x7E	; 126
    1098:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    109c:	79 dc       	rcall	.-1806   	; 0x990 <Endpoint_WaitUntilReady>
    109e:	88 23       	and	r24, r24
    10a0:	29 f4       	brne	.+10     	; 0x10ac <CDC_Device_SendByte+0x48>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10a2:	10 93 f1 00 	sts	0x00F1, r17
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <CDC_Device_SendByte+0x48>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    10aa:	82 e0       	ldi	r24, 0x02	; 2
}
    10ac:	1f 91       	pop	r17
    10ae:	08 95       	ret

000010b0 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    10b0:	28 2f       	mov	r18, r24
    10b2:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    10b4:	84 85       	ldd	r24, Z+12	; 0x0c
    10b6:	95 85       	ldd	r25, Z+13	; 0x0d
    10b8:	62 2f       	mov	r22, r18
    10ba:	d4 df       	rcall	.-88     	; 0x1064 <CDC_Device_SendByte>
    10bc:	88 23       	and	r24, r24
    10be:	19 f4       	brne	.+6      	; 0x10c6 <CDC_Device_putchar+0x16>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <CDC_Device_putchar+0x1a>
    10c6:	2f ef       	ldi	r18, 0xFF	; 255
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
}
    10ca:	c9 01       	movw	r24, r18
    10cc:	08 95       	ret

000010ce <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    10d4:	40 96       	adiw	r24, 0x10	; 16
    10d6:	fc 01       	movw	r30, r24
    10d8:	8b e0       	ldi	r24, 0x0B	; 11
    10da:	df 01       	movw	r26, r30
    10dc:	1d 92       	st	X+, r1
    10de:	8a 95       	dec	r24
    10e0:	e9 f7       	brne	.-6      	; 0x10dc <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    10e6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	f1 db       	rcall	.-2078   	; 0x8d6 <Endpoint_ConfigureEndpointTable>
    10f4:	88 23       	and	r24, r24
    10f6:	71 f0       	breq	.+28     	; 0x1114 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    10f8:	ce 01       	movw	r24, r28
    10fa:	06 96       	adiw	r24, 0x06	; 6
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	eb db       	rcall	.-2090   	; 0x8d6 <Endpoint_ConfigureEndpointTable>
    1100:	88 23       	and	r24, r24
    1102:	41 f0       	breq	.+16     	; 0x1114 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1104:	ce 01       	movw	r24, r28
    1106:	0b 96       	adiw	r24, 0x0b	; 11
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	e5 db       	rcall	.-2102   	; 0x8d6 <Endpoint_ConfigureEndpointTable>
    110c:	88 23       	and	r24, r24
    110e:	19 f0       	breq	.+6      	; 0x1116 <CDC_Device_ConfigureEndpoints+0x48>
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <CDC_Device_ConfigureEndpoints+0x48>
    1114:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1122:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1126:	83 ff       	sbrs	r24, 3
    1128:	a3 c0       	rjmp	.+326    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    112a:	88 81       	ld	r24, Y
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	20 91 41 02 	lds	r18, 0x0241
    1132:	30 91 42 02 	lds	r19, 0x0242
    1136:	28 17       	cp	r18, r24
    1138:	39 07       	cpc	r19, r25
    113a:	09 f0       	breq	.+2      	; 0x113e <CDC_Device_ProcessControlRequest+0x22>
    113c:	99 c0       	rjmp	.+306    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    113e:	80 91 3e 02 	lds	r24, 0x023E
    1142:	81 32       	cpi	r24, 0x21	; 33
    1144:	69 f0       	breq	.+26     	; 0x1160 <CDC_Device_ProcessControlRequest+0x44>
    1146:	82 32       	cpi	r24, 0x22	; 34
    1148:	20 f4       	brcc	.+8      	; 0x1152 <CDC_Device_ProcessControlRequest+0x36>
    114a:	80 32       	cpi	r24, 0x20	; 32
    114c:	09 f0       	breq	.+2      	; 0x1150 <CDC_Device_ProcessControlRequest+0x34>
    114e:	90 c0       	rjmp	.+288    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
    1150:	3c c0       	rjmp	.+120    	; 0x11ca <CDC_Device_ProcessControlRequest+0xae>
    1152:	82 32       	cpi	r24, 0x22	; 34
    1154:	09 f4       	brne	.+2      	; 0x1158 <CDC_Device_ProcessControlRequest+0x3c>
    1156:	6b c0       	rjmp	.+214    	; 0x122e <CDC_Device_ProcessControlRequest+0x112>
    1158:	83 32       	cpi	r24, 0x23	; 35
    115a:	09 f0       	breq	.+2      	; 0x115e <CDC_Device_ProcessControlRequest+0x42>
    115c:	89 c0       	rjmp	.+274    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
    115e:	7a c0       	rjmp	.+244    	; 0x1254 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1160:	80 91 3d 02 	lds	r24, 0x023D
    1164:	81 3a       	cpi	r24, 0xA1	; 161
    1166:	09 f0       	breq	.+2      	; 0x116a <CDC_Device_ProcessControlRequest+0x4e>
    1168:	83 c0       	rjmp	.+262    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    116a:	80 91 e8 00 	lds	r24, 0x00E8
    116e:	87 7f       	andi	r24, 0xF7	; 247
    1170:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1174:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1178:	80 ff       	sbrs	r24, 0
    117a:	fc cf       	rjmp	.-8      	; 0x1174 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    117c:	8c 89       	ldd	r24, Y+20	; 0x14
    117e:	9d 89       	ldd	r25, Y+21	; 0x15
    1180:	ae 89       	ldd	r26, Y+22	; 0x16
    1182:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1184:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1188:	29 2f       	mov	r18, r25
    118a:	3a 2f       	mov	r19, r26
    118c:	4b 2f       	mov	r20, r27
    118e:	55 27       	eor	r21, r21
    1190:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    1194:	9d 01       	movw	r18, r26
    1196:	44 27       	eor	r20, r20
    1198:	55 27       	eor	r21, r21
    119a:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    119e:	8b 2f       	mov	r24, r27
    11a0:	99 27       	eor	r25, r25
    11a2:	aa 27       	eor	r26, r26
    11a4:	bb 27       	eor	r27, r27
    11a6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    11aa:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11ac:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    11b0:	89 8d       	ldd	r24, Y+25	; 0x19
    11b2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    11b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11b8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11bc:	80 91 e8 00 	lds	r24, 0x00E8
    11c0:	8e 77       	andi	r24, 0x7E	; 126
    11c2:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    11c6:	c3 db       	rcall	.-2170   	; 0x94e <Endpoint_ClearStatusStage>
    11c8:	53 c0       	rjmp	.+166    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11ca:	80 91 3d 02 	lds	r24, 0x023D
    11ce:	81 32       	cpi	r24, 0x21	; 33
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <CDC_Device_ProcessControlRequest+0xb8>
    11d2:	4e c0       	rjmp	.+156    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11d4:	80 91 e8 00 	lds	r24, 0x00E8
    11d8:	87 7f       	andi	r24, 0xF7	; 247
    11da:	80 93 e8 00 	sts	0x00E8, r24
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    11e0:	80 91 3c 02 	lds	r24, 0x023C
    11e4:	88 23       	and	r24, r24
    11e6:	09 f4       	brne	.+2      	; 0x11ea <CDC_Device_ProcessControlRequest+0xce>
    11e8:	43 c0       	rjmp	.+134    	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11ea:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    11ee:	82 ff       	sbrs	r24, 2
    11f0:	f7 cf       	rjmp	.-18     	; 0x11e0 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    11f2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    11f6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    11fa:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    11fe:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1202:	8c 8b       	std	Y+20, r24	; 0x14
    1204:	9d 8b       	std	Y+21, r25	; 0x15
    1206:	2e 8b       	std	Y+22, r18	; 0x16
    1208:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    120a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    120e:	88 8f       	std	Y+24, r24	; 0x18
    1210:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1214:	89 8f       	std	Y+25, r24	; 0x19
    1216:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    121a:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    121c:	80 91 e8 00 	lds	r24, 0x00E8
    1220:	8b 77       	andi	r24, 0x7B	; 123
    1222:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1226:	93 db       	rcall	.-2266   	; 0x94e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1228:	ce 01       	movw	r24, r28
    122a:	d6 de       	rcall	.-596    	; 0xfd8 <CDC_Device_Event_Stub>
    122c:	21 c0       	rjmp	.+66     	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    122e:	80 91 3d 02 	lds	r24, 0x023D
    1232:	81 32       	cpi	r24, 0x21	; 33
    1234:	e9 f4       	brne	.+58     	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1236:	80 91 e8 00 	lds	r24, 0x00E8
    123a:	87 7f       	andi	r24, 0xF7	; 247
    123c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1240:	86 db       	rcall	.-2292   	; 0x94e <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1242:	80 91 3f 02 	lds	r24, 0x023F
    1246:	90 91 40 02 	lds	r25, 0x0240
    124a:	99 8b       	std	Y+17, r25	; 0x11
    124c:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    124e:	ce 01       	movw	r24, r28
    1250:	c3 de       	rcall	.-634    	; 0xfd8 <CDC_Device_Event_Stub>
    1252:	0e c0       	rjmp	.+28     	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1254:	80 91 3d 02 	lds	r24, 0x023D
    1258:	81 32       	cpi	r24, 0x21	; 33
    125a:	51 f4       	brne	.+20     	; 0x1270 <CDC_Device_ProcessControlRequest+0x154>
    125c:	80 91 e8 00 	lds	r24, 0x00E8
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1266:	73 db       	rcall	.-2330   	; 0x94e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1268:	ce 01       	movw	r24, r28
    126a:	60 91 3f 02 	lds	r22, 0x023F
    126e:	b4 de       	rcall	.-664    	; 0xfd8 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <itoa>:
    1276:	fb 01       	movw	r30, r22
    1278:	9f 01       	movw	r18, r30
    127a:	e8 94       	clt
    127c:	42 30       	cpi	r20, 0x02	; 2
    127e:	bc f0       	brlt	.+46     	; 0x12ae <itoa+0x38>
    1280:	45 32       	cpi	r20, 0x25	; 37
    1282:	ac f4       	brge	.+42     	; 0x12ae <itoa+0x38>
    1284:	4a 30       	cpi	r20, 0x0A	; 10
    1286:	29 f4       	brne	.+10     	; 0x1292 <itoa+0x1c>
    1288:	97 fb       	bst	r25, 7
    128a:	1e f4       	brtc	.+6      	; 0x1292 <itoa+0x1c>
    128c:	90 95       	com	r25
    128e:	81 95       	neg	r24
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	64 2f       	mov	r22, r20
    1294:	77 27       	eor	r23, r23
    1296:	6c d0       	rcall	.+216    	; 0x1370 <__udivmodhi4>
    1298:	80 5d       	subi	r24, 0xD0	; 208
    129a:	8a 33       	cpi	r24, 0x3A	; 58
    129c:	0c f0       	brlt	.+2      	; 0x12a0 <itoa+0x2a>
    129e:	89 5d       	subi	r24, 0xD9	; 217
    12a0:	81 93       	st	Z+, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	a9 f7       	brne	.-22     	; 0x1292 <itoa+0x1c>
    12a8:	16 f4       	brtc	.+4      	; 0x12ae <itoa+0x38>
    12aa:	5d e2       	ldi	r21, 0x2D	; 45
    12ac:	51 93       	st	Z+, r21
    12ae:	10 82       	st	Z, r1
    12b0:	c9 01       	movw	r24, r18
    12b2:	30 c0       	rjmp	.+96     	; 0x1314 <strrev>

000012b4 <fputs>:
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	7c 01       	movw	r14, r24
    12c2:	8b 01       	movw	r16, r22
    12c4:	db 01       	movw	r26, r22
    12c6:	13 96       	adiw	r26, 0x03	; 3
    12c8:	8c 91       	ld	r24, X
    12ca:	81 fd       	sbrc	r24, 1
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <fputs+0x20>
    12ce:	cf ef       	ldi	r28, 0xFF	; 255
    12d0:	df ef       	ldi	r29, 0xFF	; 255
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <fputs+0x46>
    12d4:	c0 e0       	ldi	r28, 0x00	; 0
    12d6:	d0 e0       	ldi	r29, 0x00	; 0
    12d8:	0b c0       	rjmp	.+22     	; 0x12f0 <fputs+0x3c>
    12da:	d8 01       	movw	r26, r16
    12dc:	18 96       	adiw	r26, 0x08	; 8
    12de:	ed 91       	ld	r30, X+
    12e0:	fc 91       	ld	r31, X
    12e2:	19 97       	sbiw	r26, 0x09	; 9
    12e4:	b8 01       	movw	r22, r16
    12e6:	09 95       	icall
    12e8:	89 2b       	or	r24, r25
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <fputs+0x3c>
    12ec:	cf ef       	ldi	r28, 0xFF	; 255
    12ee:	df ef       	ldi	r29, 0xFF	; 255
    12f0:	f7 01       	movw	r30, r14
    12f2:	81 91       	ld	r24, Z+
    12f4:	7f 01       	movw	r14, r30
    12f6:	88 23       	and	r24, r24
    12f8:	81 f7       	brne	.-32     	; 0x12da <fputs+0x26>
    12fa:	ce 01       	movw	r24, r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	e6 e0       	ldi	r30, 0x06	; 6
    1302:	56 c0       	rjmp	.+172    	; 0x13b0 <__epilogue_restores__+0x18>

00001304 <__eerd_word_usb162>:
    1304:	a8 e1       	ldi	r26, 0x18	; 24
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	42 e0       	ldi	r20, 0x02	; 2
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	15 c0       	rjmp	.+42     	; 0x1338 <__eerd_blraw_usb162>

0000130e <__eewr_word_usb162>:
    130e:	22 d0       	rcall	.+68     	; 0x1354 <__eewr_byte_usb162>
    1310:	27 2f       	mov	r18, r23
    1312:	21 c0       	rjmp	.+66     	; 0x1356 <__eewr_r18_usb162>

00001314 <strrev>:
    1314:	dc 01       	movw	r26, r24
    1316:	fc 01       	movw	r30, r24
    1318:	67 2f       	mov	r22, r23
    131a:	71 91       	ld	r23, Z+
    131c:	77 23       	and	r23, r23
    131e:	e1 f7       	brne	.-8      	; 0x1318 <strrev+0x4>
    1320:	32 97       	sbiw	r30, 0x02	; 2
    1322:	04 c0       	rjmp	.+8      	; 0x132c <strrev+0x18>
    1324:	7c 91       	ld	r23, X
    1326:	6d 93       	st	X+, r22
    1328:	70 83       	st	Z, r23
    132a:	62 91       	ld	r22, -Z
    132c:	ae 17       	cp	r26, r30
    132e:	bf 07       	cpc	r27, r31
    1330:	c8 f3       	brcs	.-14     	; 0x1324 <strrev+0x10>
    1332:	08 95       	ret

00001334 <__eerd_block_usb162>:
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22

00001338 <__eerd_blraw_usb162>:
    1338:	fc 01       	movw	r30, r24
    133a:	f9 99       	sbic	0x1f, 1	; 31
    133c:	fe cf       	rjmp	.-4      	; 0x133a <__eerd_blraw_usb162+0x2>
    133e:	06 c0       	rjmp	.+12     	; 0x134c <__eerd_blraw_usb162+0x14>
    1340:	f2 bd       	out	0x22, r31	; 34
    1342:	e1 bd       	out	0x21, r30	; 33
    1344:	f8 9a       	sbi	0x1f, 0	; 31
    1346:	31 96       	adiw	r30, 0x01	; 1
    1348:	00 b4       	in	r0, 0x20	; 32
    134a:	0d 92       	st	X+, r0
    134c:	41 50       	subi	r20, 0x01	; 1
    134e:	50 40       	sbci	r21, 0x00	; 0
    1350:	b8 f7       	brcc	.-18     	; 0x1340 <__eerd_blraw_usb162+0x8>
    1352:	08 95       	ret

00001354 <__eewr_byte_usb162>:
    1354:	26 2f       	mov	r18, r22

00001356 <__eewr_r18_usb162>:
    1356:	f9 99       	sbic	0x1f, 1	; 31
    1358:	fe cf       	rjmp	.-4      	; 0x1356 <__eewr_r18_usb162>
    135a:	1f ba       	out	0x1f, r1	; 31
    135c:	92 bd       	out	0x22, r25	; 34
    135e:	81 bd       	out	0x21, r24	; 33
    1360:	20 bd       	out	0x20, r18	; 32
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	fa 9a       	sbi	0x1f, 2	; 31
    1368:	f9 9a       	sbi	0x1f, 1	; 31
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	08 95       	ret

00001370 <__udivmodhi4>:
    1370:	aa 1b       	sub	r26, r26
    1372:	bb 1b       	sub	r27, r27
    1374:	51 e1       	ldi	r21, 0x11	; 17
    1376:	07 c0       	rjmp	.+14     	; 0x1386 <__udivmodhi4_ep>

00001378 <__udivmodhi4_loop>:
    1378:	aa 1f       	adc	r26, r26
    137a:	bb 1f       	adc	r27, r27
    137c:	a6 17       	cp	r26, r22
    137e:	b7 07       	cpc	r27, r23
    1380:	10 f0       	brcs	.+4      	; 0x1386 <__udivmodhi4_ep>
    1382:	a6 1b       	sub	r26, r22
    1384:	b7 0b       	sbc	r27, r23

00001386 <__udivmodhi4_ep>:
    1386:	88 1f       	adc	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	5a 95       	dec	r21
    138c:	a9 f7       	brne	.-22     	; 0x1378 <__udivmodhi4_loop>
    138e:	80 95       	com	r24
    1390:	90 95       	com	r25
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	08 95       	ret

00001398 <__epilogue_restores__>:
    1398:	2a 88       	ldd	r2, Y+18	; 0x12
    139a:	39 88       	ldd	r3, Y+17	; 0x11
    139c:	48 88       	ldd	r4, Y+16	; 0x10
    139e:	5f 84       	ldd	r5, Y+15	; 0x0f
    13a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    13a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    13a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    13a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    13aa:	b9 84       	ldd	r11, Y+9	; 0x09
    13ac:	c8 84       	ldd	r12, Y+8	; 0x08
    13ae:	df 80       	ldd	r13, Y+7	; 0x07
    13b0:	ee 80       	ldd	r14, Y+6	; 0x06
    13b2:	fd 80       	ldd	r15, Y+5	; 0x05
    13b4:	0c 81       	ldd	r16, Y+4	; 0x04
    13b6:	1b 81       	ldd	r17, Y+3	; 0x03
    13b8:	aa 81       	ldd	r26, Y+2	; 0x02
    13ba:	b9 81       	ldd	r27, Y+1	; 0x01
    13bc:	ce 0f       	add	r28, r30
    13be:	d1 1d       	adc	r29, r1
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	ed 01       	movw	r28, r26
    13cc:	08 95       	ret

000013ce <_exit>:
    13ce:	f8 94       	cli

000013d0 <__stop_program>:
    13d0:	ff cf       	rjmp	.-2      	; 0x13d0 <__stop_program>
